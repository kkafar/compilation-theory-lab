Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> instructions_opt
Rule 2     empty -> <empty>
Rule 3     instructions_opt -> instructions
Rule 4     instructions_opt -> empty
Rule 5     instructions -> instructions instruction
Rule 6     instructions -> instruction
Rule 7     instruction -> assignment
Rule 8     instruction -> conditional_statement
Rule 9     instruction -> print_statement
Rule 10    instruction -> jump_statement
Rule 11    instruction -> return_statement
Rule 12    instruction -> while_loop
Rule 13    instruction -> for_loop
Rule 14    instruction -> instruction_block
Rule 15    instruction_block -> { instructions }
Rule 16    assignment -> assign_id = expression ;
Rule 17    assignment -> assign_id MUL_ASSIGN expression ;
Rule 18    assignment -> assign_id DIV_ASSIGN expression ;
Rule 19    assignment -> assign_id PLUS_ASSIGN expression ;
Rule 20    assignment -> assign_id SUB_ASSIGN expression ;
Rule 21    assign_id -> ID
Rule 22    assign_id -> ID vector
Rule 23    expression -> expression_binop
Rule 24    expression -> expression_relop
Rule 25    expression -> expression_unary
Rule 26    expression -> matrix_funcs
Rule 27    expression -> constant
Rule 28    expression -> ID
Rule 29    expression -> matrix
Rule 30    expression -> ( expression )
Rule 31    expression_binop -> expression + expression
Rule 32    expression_binop -> expression - expression
Rule 33    expression_binop -> expression * expression
Rule 34    expression_binop -> expression / expression
Rule 35    expression_binop -> expression MATRIX_PLUS expression
Rule 36    expression_binop -> expression MATRIX_SUB expression
Rule 37    expression_binop -> expression MATRIX_MUL expression
Rule 38    expression_binop -> expression MATRIX_DIV expression
Rule 39    expression_relop -> expression RELOP_EQ expression
Rule 40    expression_relop -> expression RELOP_GT expression
Rule 41    expression_relop -> expression RELOP_LT expression
Rule 42    expression_relop -> expression RELOP_GE expression
Rule 43    expression_relop -> expression RELOP_LE expression
Rule 44    expression_relop -> expression RELOP_NE expression
Rule 45    expression_unary -> - expression
Rule 46    expression_unary -> expression '
Rule 47    matrix_funcs -> ZEROS ( expression_list )
Rule 48    matrix_funcs -> ONES ( expression_list )
Rule 49    matrix_funcs -> EYE ( expression_list )
Rule 50    constant -> DT_STRING
Rule 51    constant -> number
Rule 52    matrix -> [ vectors ]
Rule 53    vectors -> vector
Rule 54    vectors -> vectors , vector
Rule 55    vector -> [ numbers ]
Rule 56    vector -> [ ]
Rule 57    numbers -> numbers , number
Rule 58    numbers -> number
Rule 59    number -> DT_INTEGER
Rule 60    number -> DT_FLOAT
Rule 61    conditional_statement -> IF ( expression ) instruction
Rule 62    conditional_statement -> IF ( expression ) instruction ELSE instruction
Rule 63    jump_statement -> BREAK ;
Rule 64    jump_statement -> CONTINUE ;
Rule 65    return_statement -> RETURN ;
Rule 66    return_statement -> RETURN expression ;
Rule 67    print_statement -> PRINT expression_list ;
Rule 68    expression_list -> expression_list , expression
Rule 69    expression_list -> expression
Rule 70    while_loop -> WHILE ( expression ) instruction
Rule 71    for_loop -> FOR ID = range_value : range_value instruction
Rule 72    range_value -> DT_INTEGER
Rule 73    range_value -> ID

Terminals, with rules where they appear

'                    : 46
(                    : 30 47 48 49 61 62 70
)                    : 30 47 48 49 61 62 70
*                    : 33
+                    : 31
,                    : 54 57 68
-                    : 32 45
/                    : 34
:                    : 71
;                    : 16 17 18 19 20 63 64 65 66 67
=                    : 16 71
BREAK                : 63
CONTINUE             : 64
DIV_ASSIGN           : 18
DT_FLOAT             : 60
DT_INTEGER           : 59 72
DT_STRING            : 50
ELSE                 : 62
EYE                  : 49
FOR                  : 71
ID                   : 21 22 28 71 73
IF                   : 61 62
MATRIX_DIV           : 38
MATRIX_MUL           : 37
MATRIX_PLUS          : 35
MATRIX_SUB           : 36
MUL_ASSIGN           : 17
ONES                 : 48
PLUS_ASSIGN          : 19
PRINT                : 67
RELOP_EQ             : 39
RELOP_GE             : 42
RELOP_GT             : 40
RELOP_LE             : 43
RELOP_LT             : 41
RELOP_NE             : 44
RETURN               : 65 66
SUB_ASSIGN           : 20
WHILE                : 70
ZEROS                : 47
[                    : 52 55 56
]                    : 52 55 56
error                : 
{                    : 15
}                    : 15

Nonterminals, with rules where they appear

assign_id            : 16 17 18 19 20
assignment           : 7
conditional_statement : 8
constant             : 27
empty                : 4
expression           : 16 17 18 19 20 30 31 31 32 32 33 33 34 34 35 35 36 36 37 37 38 38 39 39 40 40 41 41 42 42 43 43 44 44 45 46 61 62 66 68 69 70
expression_binop     : 23
expression_list      : 47 48 49 67 68
expression_relop     : 24
expression_unary     : 25
for_loop             : 13
instruction          : 5 6 61 62 62 70 71
instruction_block    : 14
instructions         : 3 5 15
instructions_opt     : 1
jump_statement       : 10
matrix               : 29
matrix_funcs         : 26
number               : 51 57 58
numbers              : 55 57
print_statement      : 9
program              : 0
range_value          : 71 71
return_statement     : 11
vector               : 22 53 54
vectors              : 52 54
while_loop           : 12

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . instructions_opt
    (3) instructions_opt -> . instructions
    (4) instructions_opt -> . empty
    (5) instructions -> . instructions instruction
    (6) instructions -> . instruction
    (2) empty -> .
    (7) instruction -> . assignment
    (8) instruction -> . conditional_statement
    (9) instruction -> . print_statement
    (10) instruction -> . jump_statement
    (11) instruction -> . return_statement
    (12) instruction -> . while_loop
    (13) instruction -> . for_loop
    (14) instruction -> . instruction_block
    (16) assignment -> . assign_id = expression ;
    (17) assignment -> . assign_id MUL_ASSIGN expression ;
    (18) assignment -> . assign_id DIV_ASSIGN expression ;
    (19) assignment -> . assign_id PLUS_ASSIGN expression ;
    (20) assignment -> . assign_id SUB_ASSIGN expression ;
    (61) conditional_statement -> . IF ( expression ) instruction
    (62) conditional_statement -> . IF ( expression ) instruction ELSE instruction
    (67) print_statement -> . PRINT expression_list ;
    (63) jump_statement -> . BREAK ;
    (64) jump_statement -> . CONTINUE ;
    (65) return_statement -> . RETURN ;
    (66) return_statement -> . RETURN expression ;
    (70) while_loop -> . WHILE ( expression ) instruction
    (71) for_loop -> . FOR ID = range_value : range_value instruction
    (15) instruction_block -> . { instructions }
    (21) assign_id -> . ID
    (22) assign_id -> . ID vector

    $end            reduce using rule 2 (empty -> .)
    IF              shift and go to state 15
    PRINT           shift and go to state 16
    BREAK           shift and go to state 17
    CONTINUE        shift and go to state 18
    RETURN          shift and go to state 19
    WHILE           shift and go to state 20
    FOR             shift and go to state 21
    {               shift and go to state 23
    ID              shift and go to state 22

    program                        shift and go to state 1
    instructions_opt               shift and go to state 2
    instructions                   shift and go to state 3
    empty                          shift and go to state 4
    instruction                    shift and go to state 5
    assignment                     shift and go to state 6
    conditional_statement          shift and go to state 7
    print_statement                shift and go to state 8
    jump_statement                 shift and go to state 9
    return_statement               shift and go to state 10
    while_loop                     shift and go to state 11
    for_loop                       shift and go to state 12
    instruction_block              shift and go to state 13
    assign_id                      shift and go to state 14

state 1

    (0) S' -> program .



state 2

    (1) program -> instructions_opt .

    $end            reduce using rule 1 (program -> instructions_opt .)


state 3

    (3) instructions_opt -> instructions .
    (5) instructions -> instructions . instruction
    (7) instruction -> . assignment
    (8) instruction -> . conditional_statement
    (9) instruction -> . print_statement
    (10) instruction -> . jump_statement
    (11) instruction -> . return_statement
    (12) instruction -> . while_loop
    (13) instruction -> . for_loop
    (14) instruction -> . instruction_block
    (16) assignment -> . assign_id = expression ;
    (17) assignment -> . assign_id MUL_ASSIGN expression ;
    (18) assignment -> . assign_id DIV_ASSIGN expression ;
    (19) assignment -> . assign_id PLUS_ASSIGN expression ;
    (20) assignment -> . assign_id SUB_ASSIGN expression ;
    (61) conditional_statement -> . IF ( expression ) instruction
    (62) conditional_statement -> . IF ( expression ) instruction ELSE instruction
    (67) print_statement -> . PRINT expression_list ;
    (63) jump_statement -> . BREAK ;
    (64) jump_statement -> . CONTINUE ;
    (65) return_statement -> . RETURN ;
    (66) return_statement -> . RETURN expression ;
    (70) while_loop -> . WHILE ( expression ) instruction
    (71) for_loop -> . FOR ID = range_value : range_value instruction
    (15) instruction_block -> . { instructions }
    (21) assign_id -> . ID
    (22) assign_id -> . ID vector

    $end            reduce using rule 3 (instructions_opt -> instructions .)
    IF              shift and go to state 15
    PRINT           shift and go to state 16
    BREAK           shift and go to state 17
    CONTINUE        shift and go to state 18
    RETURN          shift and go to state 19
    WHILE           shift and go to state 20
    FOR             shift and go to state 21
    {               shift and go to state 23
    ID              shift and go to state 22

    instruction                    shift and go to state 24
    assignment                     shift and go to state 6
    conditional_statement          shift and go to state 7
    print_statement                shift and go to state 8
    jump_statement                 shift and go to state 9
    return_statement               shift and go to state 10
    while_loop                     shift and go to state 11
    for_loop                       shift and go to state 12
    instruction_block              shift and go to state 13
    assign_id                      shift and go to state 14

state 4

    (4) instructions_opt -> empty .

    $end            reduce using rule 4 (instructions_opt -> empty .)


state 5

    (6) instructions -> instruction .

    IF              reduce using rule 6 (instructions -> instruction .)
    PRINT           reduce using rule 6 (instructions -> instruction .)
    BREAK           reduce using rule 6 (instructions -> instruction .)
    CONTINUE        reduce using rule 6 (instructions -> instruction .)
    RETURN          reduce using rule 6 (instructions -> instruction .)
    WHILE           reduce using rule 6 (instructions -> instruction .)
    FOR             reduce using rule 6 (instructions -> instruction .)
    {               reduce using rule 6 (instructions -> instruction .)
    ID              reduce using rule 6 (instructions -> instruction .)
    $end            reduce using rule 6 (instructions -> instruction .)
    }               reduce using rule 6 (instructions -> instruction .)


state 6

    (7) instruction -> assignment .

    IF              reduce using rule 7 (instruction -> assignment .)
    PRINT           reduce using rule 7 (instruction -> assignment .)
    BREAK           reduce using rule 7 (instruction -> assignment .)
    CONTINUE        reduce using rule 7 (instruction -> assignment .)
    RETURN          reduce using rule 7 (instruction -> assignment .)
    WHILE           reduce using rule 7 (instruction -> assignment .)
    FOR             reduce using rule 7 (instruction -> assignment .)
    {               reduce using rule 7 (instruction -> assignment .)
    ID              reduce using rule 7 (instruction -> assignment .)
    $end            reduce using rule 7 (instruction -> assignment .)
    }               reduce using rule 7 (instruction -> assignment .)
    ELSE            reduce using rule 7 (instruction -> assignment .)


state 7

    (8) instruction -> conditional_statement .

    IF              reduce using rule 8 (instruction -> conditional_statement .)
    PRINT           reduce using rule 8 (instruction -> conditional_statement .)
    BREAK           reduce using rule 8 (instruction -> conditional_statement .)
    CONTINUE        reduce using rule 8 (instruction -> conditional_statement .)
    RETURN          reduce using rule 8 (instruction -> conditional_statement .)
    WHILE           reduce using rule 8 (instruction -> conditional_statement .)
    FOR             reduce using rule 8 (instruction -> conditional_statement .)
    {               reduce using rule 8 (instruction -> conditional_statement .)
    ID              reduce using rule 8 (instruction -> conditional_statement .)
    $end            reduce using rule 8 (instruction -> conditional_statement .)
    }               reduce using rule 8 (instruction -> conditional_statement .)
    ELSE            reduce using rule 8 (instruction -> conditional_statement .)


state 8

    (9) instruction -> print_statement .

    IF              reduce using rule 9 (instruction -> print_statement .)
    PRINT           reduce using rule 9 (instruction -> print_statement .)
    BREAK           reduce using rule 9 (instruction -> print_statement .)
    CONTINUE        reduce using rule 9 (instruction -> print_statement .)
    RETURN          reduce using rule 9 (instruction -> print_statement .)
    WHILE           reduce using rule 9 (instruction -> print_statement .)
    FOR             reduce using rule 9 (instruction -> print_statement .)
    {               reduce using rule 9 (instruction -> print_statement .)
    ID              reduce using rule 9 (instruction -> print_statement .)
    $end            reduce using rule 9 (instruction -> print_statement .)
    }               reduce using rule 9 (instruction -> print_statement .)
    ELSE            reduce using rule 9 (instruction -> print_statement .)


state 9

    (10) instruction -> jump_statement .

    IF              reduce using rule 10 (instruction -> jump_statement .)
    PRINT           reduce using rule 10 (instruction -> jump_statement .)
    BREAK           reduce using rule 10 (instruction -> jump_statement .)
    CONTINUE        reduce using rule 10 (instruction -> jump_statement .)
    RETURN          reduce using rule 10 (instruction -> jump_statement .)
    WHILE           reduce using rule 10 (instruction -> jump_statement .)
    FOR             reduce using rule 10 (instruction -> jump_statement .)
    {               reduce using rule 10 (instruction -> jump_statement .)
    ID              reduce using rule 10 (instruction -> jump_statement .)
    $end            reduce using rule 10 (instruction -> jump_statement .)
    }               reduce using rule 10 (instruction -> jump_statement .)
    ELSE            reduce using rule 10 (instruction -> jump_statement .)


state 10

    (11) instruction -> return_statement .

    IF              reduce using rule 11 (instruction -> return_statement .)
    PRINT           reduce using rule 11 (instruction -> return_statement .)
    BREAK           reduce using rule 11 (instruction -> return_statement .)
    CONTINUE        reduce using rule 11 (instruction -> return_statement .)
    RETURN          reduce using rule 11 (instruction -> return_statement .)
    WHILE           reduce using rule 11 (instruction -> return_statement .)
    FOR             reduce using rule 11 (instruction -> return_statement .)
    {               reduce using rule 11 (instruction -> return_statement .)
    ID              reduce using rule 11 (instruction -> return_statement .)
    $end            reduce using rule 11 (instruction -> return_statement .)
    }               reduce using rule 11 (instruction -> return_statement .)
    ELSE            reduce using rule 11 (instruction -> return_statement .)


state 11

    (12) instruction -> while_loop .

    IF              reduce using rule 12 (instruction -> while_loop .)
    PRINT           reduce using rule 12 (instruction -> while_loop .)
    BREAK           reduce using rule 12 (instruction -> while_loop .)
    CONTINUE        reduce using rule 12 (instruction -> while_loop .)
    RETURN          reduce using rule 12 (instruction -> while_loop .)
    WHILE           reduce using rule 12 (instruction -> while_loop .)
    FOR             reduce using rule 12 (instruction -> while_loop .)
    {               reduce using rule 12 (instruction -> while_loop .)
    ID              reduce using rule 12 (instruction -> while_loop .)
    $end            reduce using rule 12 (instruction -> while_loop .)
    }               reduce using rule 12 (instruction -> while_loop .)
    ELSE            reduce using rule 12 (instruction -> while_loop .)


state 12

    (13) instruction -> for_loop .

    IF              reduce using rule 13 (instruction -> for_loop .)
    PRINT           reduce using rule 13 (instruction -> for_loop .)
    BREAK           reduce using rule 13 (instruction -> for_loop .)
    CONTINUE        reduce using rule 13 (instruction -> for_loop .)
    RETURN          reduce using rule 13 (instruction -> for_loop .)
    WHILE           reduce using rule 13 (instruction -> for_loop .)
    FOR             reduce using rule 13 (instruction -> for_loop .)
    {               reduce using rule 13 (instruction -> for_loop .)
    ID              reduce using rule 13 (instruction -> for_loop .)
    $end            reduce using rule 13 (instruction -> for_loop .)
    }               reduce using rule 13 (instruction -> for_loop .)
    ELSE            reduce using rule 13 (instruction -> for_loop .)


state 13

    (14) instruction -> instruction_block .

    IF              reduce using rule 14 (instruction -> instruction_block .)
    PRINT           reduce using rule 14 (instruction -> instruction_block .)
    BREAK           reduce using rule 14 (instruction -> instruction_block .)
    CONTINUE        reduce using rule 14 (instruction -> instruction_block .)
    RETURN          reduce using rule 14 (instruction -> instruction_block .)
    WHILE           reduce using rule 14 (instruction -> instruction_block .)
    FOR             reduce using rule 14 (instruction -> instruction_block .)
    {               reduce using rule 14 (instruction -> instruction_block .)
    ID              reduce using rule 14 (instruction -> instruction_block .)
    $end            reduce using rule 14 (instruction -> instruction_block .)
    }               reduce using rule 14 (instruction -> instruction_block .)
    ELSE            reduce using rule 14 (instruction -> instruction_block .)


state 14

    (16) assignment -> assign_id . = expression ;
    (17) assignment -> assign_id . MUL_ASSIGN expression ;
    (18) assignment -> assign_id . DIV_ASSIGN expression ;
    (19) assignment -> assign_id . PLUS_ASSIGN expression ;
    (20) assignment -> assign_id . SUB_ASSIGN expression ;

    =               shift and go to state 25
    MUL_ASSIGN      shift and go to state 26
    DIV_ASSIGN      shift and go to state 27
    PLUS_ASSIGN     shift and go to state 28
    SUB_ASSIGN      shift and go to state 29


state 15

    (61) conditional_statement -> IF . ( expression ) instruction
    (62) conditional_statement -> IF . ( expression ) instruction ELSE instruction

    (               shift and go to state 30


state 16

    (67) print_statement -> PRINT . expression_list ;
    (68) expression_list -> . expression_list , expression
    (69) expression_list -> . expression
    (23) expression -> . expression_binop
    (24) expression -> . expression_relop
    (25) expression -> . expression_unary
    (26) expression -> . matrix_funcs
    (27) expression -> . constant
    (28) expression -> . ID
    (29) expression -> . matrix
    (30) expression -> . ( expression )
    (31) expression_binop -> . expression + expression
    (32) expression_binop -> . expression - expression
    (33) expression_binop -> . expression * expression
    (34) expression_binop -> . expression / expression
    (35) expression_binop -> . expression MATRIX_PLUS expression
    (36) expression_binop -> . expression MATRIX_SUB expression
    (37) expression_binop -> . expression MATRIX_MUL expression
    (38) expression_binop -> . expression MATRIX_DIV expression
    (39) expression_relop -> . expression RELOP_EQ expression
    (40) expression_relop -> . expression RELOP_GT expression
    (41) expression_relop -> . expression RELOP_LT expression
    (42) expression_relop -> . expression RELOP_GE expression
    (43) expression_relop -> . expression RELOP_LE expression
    (44) expression_relop -> . expression RELOP_NE expression
    (45) expression_unary -> . - expression
    (46) expression_unary -> . expression '
    (47) matrix_funcs -> . ZEROS ( expression_list )
    (48) matrix_funcs -> . ONES ( expression_list )
    (49) matrix_funcs -> . EYE ( expression_list )
    (50) constant -> . DT_STRING
    (51) constant -> . number
    (52) matrix -> . [ vectors ]
    (59) number -> . DT_INTEGER
    (60) number -> . DT_FLOAT

    ID              shift and go to state 38
    (               shift and go to state 40
    -               shift and go to state 41
    ZEROS           shift and go to state 42
    ONES            shift and go to state 43
    EYE             shift and go to state 44
    DT_STRING       shift and go to state 45
    [               shift and go to state 47
    DT_INTEGER      shift and go to state 48
    DT_FLOAT        shift and go to state 49

    expression_list                shift and go to state 31
    expression                     shift and go to state 32
    expression_binop               shift and go to state 33
    expression_relop               shift and go to state 34
    expression_unary               shift and go to state 35
    matrix_funcs                   shift and go to state 36
    constant                       shift and go to state 37
    matrix                         shift and go to state 39
    number                         shift and go to state 46

state 17

    (63) jump_statement -> BREAK . ;

    ;               shift and go to state 50


state 18

    (64) jump_statement -> CONTINUE . ;

    ;               shift and go to state 51


state 19

    (65) return_statement -> RETURN . ;
    (66) return_statement -> RETURN . expression ;
    (23) expression -> . expression_binop
    (24) expression -> . expression_relop
    (25) expression -> . expression_unary
    (26) expression -> . matrix_funcs
    (27) expression -> . constant
    (28) expression -> . ID
    (29) expression -> . matrix
    (30) expression -> . ( expression )
    (31) expression_binop -> . expression + expression
    (32) expression_binop -> . expression - expression
    (33) expression_binop -> . expression * expression
    (34) expression_binop -> . expression / expression
    (35) expression_binop -> . expression MATRIX_PLUS expression
    (36) expression_binop -> . expression MATRIX_SUB expression
    (37) expression_binop -> . expression MATRIX_MUL expression
    (38) expression_binop -> . expression MATRIX_DIV expression
    (39) expression_relop -> . expression RELOP_EQ expression
    (40) expression_relop -> . expression RELOP_GT expression
    (41) expression_relop -> . expression RELOP_LT expression
    (42) expression_relop -> . expression RELOP_GE expression
    (43) expression_relop -> . expression RELOP_LE expression
    (44) expression_relop -> . expression RELOP_NE expression
    (45) expression_unary -> . - expression
    (46) expression_unary -> . expression '
    (47) matrix_funcs -> . ZEROS ( expression_list )
    (48) matrix_funcs -> . ONES ( expression_list )
    (49) matrix_funcs -> . EYE ( expression_list )
    (50) constant -> . DT_STRING
    (51) constant -> . number
    (52) matrix -> . [ vectors ]
    (59) number -> . DT_INTEGER
    (60) number -> . DT_FLOAT

    ;               shift and go to state 52
    ID              shift and go to state 38
    (               shift and go to state 40
    -               shift and go to state 41
    ZEROS           shift and go to state 42
    ONES            shift and go to state 43
    EYE             shift and go to state 44
    DT_STRING       shift and go to state 45
    [               shift and go to state 47
    DT_INTEGER      shift and go to state 48
    DT_FLOAT        shift and go to state 49

    expression                     shift and go to state 53
    expression_binop               shift and go to state 33
    expression_relop               shift and go to state 34
    expression_unary               shift and go to state 35
    matrix_funcs                   shift and go to state 36
    constant                       shift and go to state 37
    matrix                         shift and go to state 39
    number                         shift and go to state 46

state 20

    (70) while_loop -> WHILE . ( expression ) instruction

    (               shift and go to state 54


state 21

    (71) for_loop -> FOR . ID = range_value : range_value instruction

    ID              shift and go to state 55


state 22

    (21) assign_id -> ID .
    (22) assign_id -> ID . vector
    (55) vector -> . [ numbers ]
    (56) vector -> . [ ]

    =               reduce using rule 21 (assign_id -> ID .)
    MUL_ASSIGN      reduce using rule 21 (assign_id -> ID .)
    DIV_ASSIGN      reduce using rule 21 (assign_id -> ID .)
    PLUS_ASSIGN     reduce using rule 21 (assign_id -> ID .)
    SUB_ASSIGN      reduce using rule 21 (assign_id -> ID .)
    [               shift and go to state 57

    vector                         shift and go to state 56

state 23

    (15) instruction_block -> { . instructions }
    (5) instructions -> . instructions instruction
    (6) instructions -> . instruction
    (7) instruction -> . assignment
    (8) instruction -> . conditional_statement
    (9) instruction -> . print_statement
    (10) instruction -> . jump_statement
    (11) instruction -> . return_statement
    (12) instruction -> . while_loop
    (13) instruction -> . for_loop
    (14) instruction -> . instruction_block
    (16) assignment -> . assign_id = expression ;
    (17) assignment -> . assign_id MUL_ASSIGN expression ;
    (18) assignment -> . assign_id DIV_ASSIGN expression ;
    (19) assignment -> . assign_id PLUS_ASSIGN expression ;
    (20) assignment -> . assign_id SUB_ASSIGN expression ;
    (61) conditional_statement -> . IF ( expression ) instruction
    (62) conditional_statement -> . IF ( expression ) instruction ELSE instruction
    (67) print_statement -> . PRINT expression_list ;
    (63) jump_statement -> . BREAK ;
    (64) jump_statement -> . CONTINUE ;
    (65) return_statement -> . RETURN ;
    (66) return_statement -> . RETURN expression ;
    (70) while_loop -> . WHILE ( expression ) instruction
    (71) for_loop -> . FOR ID = range_value : range_value instruction
    (15) instruction_block -> . { instructions }
    (21) assign_id -> . ID
    (22) assign_id -> . ID vector

    IF              shift and go to state 15
    PRINT           shift and go to state 16
    BREAK           shift and go to state 17
    CONTINUE        shift and go to state 18
    RETURN          shift and go to state 19
    WHILE           shift and go to state 20
    FOR             shift and go to state 21
    {               shift and go to state 23
    ID              shift and go to state 22

    instructions                   shift and go to state 58
    instruction                    shift and go to state 5
    assignment                     shift and go to state 6
    conditional_statement          shift and go to state 7
    print_statement                shift and go to state 8
    jump_statement                 shift and go to state 9
    return_statement               shift and go to state 10
    while_loop                     shift and go to state 11
    for_loop                       shift and go to state 12
    instruction_block              shift and go to state 13
    assign_id                      shift and go to state 14

state 24

    (5) instructions -> instructions instruction .

    IF              reduce using rule 5 (instructions -> instructions instruction .)
    PRINT           reduce using rule 5 (instructions -> instructions instruction .)
    BREAK           reduce using rule 5 (instructions -> instructions instruction .)
    CONTINUE        reduce using rule 5 (instructions -> instructions instruction .)
    RETURN          reduce using rule 5 (instructions -> instructions instruction .)
    WHILE           reduce using rule 5 (instructions -> instructions instruction .)
    FOR             reduce using rule 5 (instructions -> instructions instruction .)
    {               reduce using rule 5 (instructions -> instructions instruction .)
    ID              reduce using rule 5 (instructions -> instructions instruction .)
    $end            reduce using rule 5 (instructions -> instructions instruction .)
    }               reduce using rule 5 (instructions -> instructions instruction .)


state 25

    (16) assignment -> assign_id = . expression ;
    (23) expression -> . expression_binop
    (24) expression -> . expression_relop
    (25) expression -> . expression_unary
    (26) expression -> . matrix_funcs
    (27) expression -> . constant
    (28) expression -> . ID
    (29) expression -> . matrix
    (30) expression -> . ( expression )
    (31) expression_binop -> . expression + expression
    (32) expression_binop -> . expression - expression
    (33) expression_binop -> . expression * expression
    (34) expression_binop -> . expression / expression
    (35) expression_binop -> . expression MATRIX_PLUS expression
    (36) expression_binop -> . expression MATRIX_SUB expression
    (37) expression_binop -> . expression MATRIX_MUL expression
    (38) expression_binop -> . expression MATRIX_DIV expression
    (39) expression_relop -> . expression RELOP_EQ expression
    (40) expression_relop -> . expression RELOP_GT expression
    (41) expression_relop -> . expression RELOP_LT expression
    (42) expression_relop -> . expression RELOP_GE expression
    (43) expression_relop -> . expression RELOP_LE expression
    (44) expression_relop -> . expression RELOP_NE expression
    (45) expression_unary -> . - expression
    (46) expression_unary -> . expression '
    (47) matrix_funcs -> . ZEROS ( expression_list )
    (48) matrix_funcs -> . ONES ( expression_list )
    (49) matrix_funcs -> . EYE ( expression_list )
    (50) constant -> . DT_STRING
    (51) constant -> . number
    (52) matrix -> . [ vectors ]
    (59) number -> . DT_INTEGER
    (60) number -> . DT_FLOAT

    ID              shift and go to state 38
    (               shift and go to state 40
    -               shift and go to state 41
    ZEROS           shift and go to state 42
    ONES            shift and go to state 43
    EYE             shift and go to state 44
    DT_STRING       shift and go to state 45
    [               shift and go to state 47
    DT_INTEGER      shift and go to state 48
    DT_FLOAT        shift and go to state 49

    expression                     shift and go to state 59
    expression_binop               shift and go to state 33
    expression_relop               shift and go to state 34
    expression_unary               shift and go to state 35
    matrix_funcs                   shift and go to state 36
    constant                       shift and go to state 37
    matrix                         shift and go to state 39
    number                         shift and go to state 46

state 26

    (17) assignment -> assign_id MUL_ASSIGN . expression ;
    (23) expression -> . expression_binop
    (24) expression -> . expression_relop
    (25) expression -> . expression_unary
    (26) expression -> . matrix_funcs
    (27) expression -> . constant
    (28) expression -> . ID
    (29) expression -> . matrix
    (30) expression -> . ( expression )
    (31) expression_binop -> . expression + expression
    (32) expression_binop -> . expression - expression
    (33) expression_binop -> . expression * expression
    (34) expression_binop -> . expression / expression
    (35) expression_binop -> . expression MATRIX_PLUS expression
    (36) expression_binop -> . expression MATRIX_SUB expression
    (37) expression_binop -> . expression MATRIX_MUL expression
    (38) expression_binop -> . expression MATRIX_DIV expression
    (39) expression_relop -> . expression RELOP_EQ expression
    (40) expression_relop -> . expression RELOP_GT expression
    (41) expression_relop -> . expression RELOP_LT expression
    (42) expression_relop -> . expression RELOP_GE expression
    (43) expression_relop -> . expression RELOP_LE expression
    (44) expression_relop -> . expression RELOP_NE expression
    (45) expression_unary -> . - expression
    (46) expression_unary -> . expression '
    (47) matrix_funcs -> . ZEROS ( expression_list )
    (48) matrix_funcs -> . ONES ( expression_list )
    (49) matrix_funcs -> . EYE ( expression_list )
    (50) constant -> . DT_STRING
    (51) constant -> . number
    (52) matrix -> . [ vectors ]
    (59) number -> . DT_INTEGER
    (60) number -> . DT_FLOAT

    ID              shift and go to state 38
    (               shift and go to state 40
    -               shift and go to state 41
    ZEROS           shift and go to state 42
    ONES            shift and go to state 43
    EYE             shift and go to state 44
    DT_STRING       shift and go to state 45
    [               shift and go to state 47
    DT_INTEGER      shift and go to state 48
    DT_FLOAT        shift and go to state 49

    expression                     shift and go to state 60
    expression_binop               shift and go to state 33
    expression_relop               shift and go to state 34
    expression_unary               shift and go to state 35
    matrix_funcs                   shift and go to state 36
    constant                       shift and go to state 37
    matrix                         shift and go to state 39
    number                         shift and go to state 46

state 27

    (18) assignment -> assign_id DIV_ASSIGN . expression ;
    (23) expression -> . expression_binop
    (24) expression -> . expression_relop
    (25) expression -> . expression_unary
    (26) expression -> . matrix_funcs
    (27) expression -> . constant
    (28) expression -> . ID
    (29) expression -> . matrix
    (30) expression -> . ( expression )
    (31) expression_binop -> . expression + expression
    (32) expression_binop -> . expression - expression
    (33) expression_binop -> . expression * expression
    (34) expression_binop -> . expression / expression
    (35) expression_binop -> . expression MATRIX_PLUS expression
    (36) expression_binop -> . expression MATRIX_SUB expression
    (37) expression_binop -> . expression MATRIX_MUL expression
    (38) expression_binop -> . expression MATRIX_DIV expression
    (39) expression_relop -> . expression RELOP_EQ expression
    (40) expression_relop -> . expression RELOP_GT expression
    (41) expression_relop -> . expression RELOP_LT expression
    (42) expression_relop -> . expression RELOP_GE expression
    (43) expression_relop -> . expression RELOP_LE expression
    (44) expression_relop -> . expression RELOP_NE expression
    (45) expression_unary -> . - expression
    (46) expression_unary -> . expression '
    (47) matrix_funcs -> . ZEROS ( expression_list )
    (48) matrix_funcs -> . ONES ( expression_list )
    (49) matrix_funcs -> . EYE ( expression_list )
    (50) constant -> . DT_STRING
    (51) constant -> . number
    (52) matrix -> . [ vectors ]
    (59) number -> . DT_INTEGER
    (60) number -> . DT_FLOAT

    ID              shift and go to state 38
    (               shift and go to state 40
    -               shift and go to state 41
    ZEROS           shift and go to state 42
    ONES            shift and go to state 43
    EYE             shift and go to state 44
    DT_STRING       shift and go to state 45
    [               shift and go to state 47
    DT_INTEGER      shift and go to state 48
    DT_FLOAT        shift and go to state 49

    expression                     shift and go to state 61
    expression_binop               shift and go to state 33
    expression_relop               shift and go to state 34
    expression_unary               shift and go to state 35
    matrix_funcs                   shift and go to state 36
    constant                       shift and go to state 37
    matrix                         shift and go to state 39
    number                         shift and go to state 46

state 28

    (19) assignment -> assign_id PLUS_ASSIGN . expression ;
    (23) expression -> . expression_binop
    (24) expression -> . expression_relop
    (25) expression -> . expression_unary
    (26) expression -> . matrix_funcs
    (27) expression -> . constant
    (28) expression -> . ID
    (29) expression -> . matrix
    (30) expression -> . ( expression )
    (31) expression_binop -> . expression + expression
    (32) expression_binop -> . expression - expression
    (33) expression_binop -> . expression * expression
    (34) expression_binop -> . expression / expression
    (35) expression_binop -> . expression MATRIX_PLUS expression
    (36) expression_binop -> . expression MATRIX_SUB expression
    (37) expression_binop -> . expression MATRIX_MUL expression
    (38) expression_binop -> . expression MATRIX_DIV expression
    (39) expression_relop -> . expression RELOP_EQ expression
    (40) expression_relop -> . expression RELOP_GT expression
    (41) expression_relop -> . expression RELOP_LT expression
    (42) expression_relop -> . expression RELOP_GE expression
    (43) expression_relop -> . expression RELOP_LE expression
    (44) expression_relop -> . expression RELOP_NE expression
    (45) expression_unary -> . - expression
    (46) expression_unary -> . expression '
    (47) matrix_funcs -> . ZEROS ( expression_list )
    (48) matrix_funcs -> . ONES ( expression_list )
    (49) matrix_funcs -> . EYE ( expression_list )
    (50) constant -> . DT_STRING
    (51) constant -> . number
    (52) matrix -> . [ vectors ]
    (59) number -> . DT_INTEGER
    (60) number -> . DT_FLOAT

    ID              shift and go to state 38
    (               shift and go to state 40
    -               shift and go to state 41
    ZEROS           shift and go to state 42
    ONES            shift and go to state 43
    EYE             shift and go to state 44
    DT_STRING       shift and go to state 45
    [               shift and go to state 47
    DT_INTEGER      shift and go to state 48
    DT_FLOAT        shift and go to state 49

    expression                     shift and go to state 62
    expression_binop               shift and go to state 33
    expression_relop               shift and go to state 34
    expression_unary               shift and go to state 35
    matrix_funcs                   shift and go to state 36
    constant                       shift and go to state 37
    matrix                         shift and go to state 39
    number                         shift and go to state 46

state 29

    (20) assignment -> assign_id SUB_ASSIGN . expression ;
    (23) expression -> . expression_binop
    (24) expression -> . expression_relop
    (25) expression -> . expression_unary
    (26) expression -> . matrix_funcs
    (27) expression -> . constant
    (28) expression -> . ID
    (29) expression -> . matrix
    (30) expression -> . ( expression )
    (31) expression_binop -> . expression + expression
    (32) expression_binop -> . expression - expression
    (33) expression_binop -> . expression * expression
    (34) expression_binop -> . expression / expression
    (35) expression_binop -> . expression MATRIX_PLUS expression
    (36) expression_binop -> . expression MATRIX_SUB expression
    (37) expression_binop -> . expression MATRIX_MUL expression
    (38) expression_binop -> . expression MATRIX_DIV expression
    (39) expression_relop -> . expression RELOP_EQ expression
    (40) expression_relop -> . expression RELOP_GT expression
    (41) expression_relop -> . expression RELOP_LT expression
    (42) expression_relop -> . expression RELOP_GE expression
    (43) expression_relop -> . expression RELOP_LE expression
    (44) expression_relop -> . expression RELOP_NE expression
    (45) expression_unary -> . - expression
    (46) expression_unary -> . expression '
    (47) matrix_funcs -> . ZEROS ( expression_list )
    (48) matrix_funcs -> . ONES ( expression_list )
    (49) matrix_funcs -> . EYE ( expression_list )
    (50) constant -> . DT_STRING
    (51) constant -> . number
    (52) matrix -> . [ vectors ]
    (59) number -> . DT_INTEGER
    (60) number -> . DT_FLOAT

    ID              shift and go to state 38
    (               shift and go to state 40
    -               shift and go to state 41
    ZEROS           shift and go to state 42
    ONES            shift and go to state 43
    EYE             shift and go to state 44
    DT_STRING       shift and go to state 45
    [               shift and go to state 47
    DT_INTEGER      shift and go to state 48
    DT_FLOAT        shift and go to state 49

    expression                     shift and go to state 63
    expression_binop               shift and go to state 33
    expression_relop               shift and go to state 34
    expression_unary               shift and go to state 35
    matrix_funcs                   shift and go to state 36
    constant                       shift and go to state 37
    matrix                         shift and go to state 39
    number                         shift and go to state 46

state 30

    (61) conditional_statement -> IF ( . expression ) instruction
    (62) conditional_statement -> IF ( . expression ) instruction ELSE instruction
    (23) expression -> . expression_binop
    (24) expression -> . expression_relop
    (25) expression -> . expression_unary
    (26) expression -> . matrix_funcs
    (27) expression -> . constant
    (28) expression -> . ID
    (29) expression -> . matrix
    (30) expression -> . ( expression )
    (31) expression_binop -> . expression + expression
    (32) expression_binop -> . expression - expression
    (33) expression_binop -> . expression * expression
    (34) expression_binop -> . expression / expression
    (35) expression_binop -> . expression MATRIX_PLUS expression
    (36) expression_binop -> . expression MATRIX_SUB expression
    (37) expression_binop -> . expression MATRIX_MUL expression
    (38) expression_binop -> . expression MATRIX_DIV expression
    (39) expression_relop -> . expression RELOP_EQ expression
    (40) expression_relop -> . expression RELOP_GT expression
    (41) expression_relop -> . expression RELOP_LT expression
    (42) expression_relop -> . expression RELOP_GE expression
    (43) expression_relop -> . expression RELOP_LE expression
    (44) expression_relop -> . expression RELOP_NE expression
    (45) expression_unary -> . - expression
    (46) expression_unary -> . expression '
    (47) matrix_funcs -> . ZEROS ( expression_list )
    (48) matrix_funcs -> . ONES ( expression_list )
    (49) matrix_funcs -> . EYE ( expression_list )
    (50) constant -> . DT_STRING
    (51) constant -> . number
    (52) matrix -> . [ vectors ]
    (59) number -> . DT_INTEGER
    (60) number -> . DT_FLOAT

    ID              shift and go to state 38
    (               shift and go to state 40
    -               shift and go to state 41
    ZEROS           shift and go to state 42
    ONES            shift and go to state 43
    EYE             shift and go to state 44
    DT_STRING       shift and go to state 45
    [               shift and go to state 47
    DT_INTEGER      shift and go to state 48
    DT_FLOAT        shift and go to state 49

    expression                     shift and go to state 64
    expression_binop               shift and go to state 33
    expression_relop               shift and go to state 34
    expression_unary               shift and go to state 35
    matrix_funcs                   shift and go to state 36
    constant                       shift and go to state 37
    matrix                         shift and go to state 39
    number                         shift and go to state 46

state 31

    (67) print_statement -> PRINT expression_list . ;
    (68) expression_list -> expression_list . , expression

    ;               shift and go to state 65
    ,               shift and go to state 66


state 32

    (69) expression_list -> expression .
    (31) expression_binop -> expression . + expression
    (32) expression_binop -> expression . - expression
    (33) expression_binop -> expression . * expression
    (34) expression_binop -> expression . / expression
    (35) expression_binop -> expression . MATRIX_PLUS expression
    (36) expression_binop -> expression . MATRIX_SUB expression
    (37) expression_binop -> expression . MATRIX_MUL expression
    (38) expression_binop -> expression . MATRIX_DIV expression
    (39) expression_relop -> expression . RELOP_EQ expression
    (40) expression_relop -> expression . RELOP_GT expression
    (41) expression_relop -> expression . RELOP_LT expression
    (42) expression_relop -> expression . RELOP_GE expression
    (43) expression_relop -> expression . RELOP_LE expression
    (44) expression_relop -> expression . RELOP_NE expression
    (46) expression_unary -> expression . '

    ;               reduce using rule 69 (expression_list -> expression .)
    ,               reduce using rule 69 (expression_list -> expression .)
    )               reduce using rule 69 (expression_list -> expression .)
    +               shift and go to state 67
    -               shift and go to state 68
    *               shift and go to state 69
    /               shift and go to state 70
    MATRIX_PLUS     shift and go to state 71
    MATRIX_SUB      shift and go to state 72
    MATRIX_MUL      shift and go to state 73
    MATRIX_DIV      shift and go to state 74
    RELOP_EQ        shift and go to state 75
    RELOP_GT        shift and go to state 76
    RELOP_LT        shift and go to state 77
    RELOP_GE        shift and go to state 78
    RELOP_LE        shift and go to state 79
    RELOP_NE        shift and go to state 80
    '               shift and go to state 81


state 33

    (23) expression -> expression_binop .

    +               reduce using rule 23 (expression -> expression_binop .)
    -               reduce using rule 23 (expression -> expression_binop .)
    *               reduce using rule 23 (expression -> expression_binop .)
    /               reduce using rule 23 (expression -> expression_binop .)
    MATRIX_PLUS     reduce using rule 23 (expression -> expression_binop .)
    MATRIX_SUB      reduce using rule 23 (expression -> expression_binop .)
    MATRIX_MUL      reduce using rule 23 (expression -> expression_binop .)
    MATRIX_DIV      reduce using rule 23 (expression -> expression_binop .)
    RELOP_EQ        reduce using rule 23 (expression -> expression_binop .)
    RELOP_GT        reduce using rule 23 (expression -> expression_binop .)
    RELOP_LT        reduce using rule 23 (expression -> expression_binop .)
    RELOP_GE        reduce using rule 23 (expression -> expression_binop .)
    RELOP_LE        reduce using rule 23 (expression -> expression_binop .)
    RELOP_NE        reduce using rule 23 (expression -> expression_binop .)
    '               reduce using rule 23 (expression -> expression_binop .)
    ;               reduce using rule 23 (expression -> expression_binop .)
    ,               reduce using rule 23 (expression -> expression_binop .)
    )               reduce using rule 23 (expression -> expression_binop .)


state 34

    (24) expression -> expression_relop .

    +               reduce using rule 24 (expression -> expression_relop .)
    -               reduce using rule 24 (expression -> expression_relop .)
    *               reduce using rule 24 (expression -> expression_relop .)
    /               reduce using rule 24 (expression -> expression_relop .)
    MATRIX_PLUS     reduce using rule 24 (expression -> expression_relop .)
    MATRIX_SUB      reduce using rule 24 (expression -> expression_relop .)
    MATRIX_MUL      reduce using rule 24 (expression -> expression_relop .)
    MATRIX_DIV      reduce using rule 24 (expression -> expression_relop .)
    RELOP_EQ        reduce using rule 24 (expression -> expression_relop .)
    RELOP_GT        reduce using rule 24 (expression -> expression_relop .)
    RELOP_LT        reduce using rule 24 (expression -> expression_relop .)
    RELOP_GE        reduce using rule 24 (expression -> expression_relop .)
    RELOP_LE        reduce using rule 24 (expression -> expression_relop .)
    RELOP_NE        reduce using rule 24 (expression -> expression_relop .)
    '               reduce using rule 24 (expression -> expression_relop .)
    ;               reduce using rule 24 (expression -> expression_relop .)
    ,               reduce using rule 24 (expression -> expression_relop .)
    )               reduce using rule 24 (expression -> expression_relop .)


state 35

    (25) expression -> expression_unary .

    +               reduce using rule 25 (expression -> expression_unary .)
    -               reduce using rule 25 (expression -> expression_unary .)
    *               reduce using rule 25 (expression -> expression_unary .)
    /               reduce using rule 25 (expression -> expression_unary .)
    MATRIX_PLUS     reduce using rule 25 (expression -> expression_unary .)
    MATRIX_SUB      reduce using rule 25 (expression -> expression_unary .)
    MATRIX_MUL      reduce using rule 25 (expression -> expression_unary .)
    MATRIX_DIV      reduce using rule 25 (expression -> expression_unary .)
    RELOP_EQ        reduce using rule 25 (expression -> expression_unary .)
    RELOP_GT        reduce using rule 25 (expression -> expression_unary .)
    RELOP_LT        reduce using rule 25 (expression -> expression_unary .)
    RELOP_GE        reduce using rule 25 (expression -> expression_unary .)
    RELOP_LE        reduce using rule 25 (expression -> expression_unary .)
    RELOP_NE        reduce using rule 25 (expression -> expression_unary .)
    '               reduce using rule 25 (expression -> expression_unary .)
    ;               reduce using rule 25 (expression -> expression_unary .)
    ,               reduce using rule 25 (expression -> expression_unary .)
    )               reduce using rule 25 (expression -> expression_unary .)


state 36

    (26) expression -> matrix_funcs .

    +               reduce using rule 26 (expression -> matrix_funcs .)
    -               reduce using rule 26 (expression -> matrix_funcs .)
    *               reduce using rule 26 (expression -> matrix_funcs .)
    /               reduce using rule 26 (expression -> matrix_funcs .)
    MATRIX_PLUS     reduce using rule 26 (expression -> matrix_funcs .)
    MATRIX_SUB      reduce using rule 26 (expression -> matrix_funcs .)
    MATRIX_MUL      reduce using rule 26 (expression -> matrix_funcs .)
    MATRIX_DIV      reduce using rule 26 (expression -> matrix_funcs .)
    RELOP_EQ        reduce using rule 26 (expression -> matrix_funcs .)
    RELOP_GT        reduce using rule 26 (expression -> matrix_funcs .)
    RELOP_LT        reduce using rule 26 (expression -> matrix_funcs .)
    RELOP_GE        reduce using rule 26 (expression -> matrix_funcs .)
    RELOP_LE        reduce using rule 26 (expression -> matrix_funcs .)
    RELOP_NE        reduce using rule 26 (expression -> matrix_funcs .)
    '               reduce using rule 26 (expression -> matrix_funcs .)
    ;               reduce using rule 26 (expression -> matrix_funcs .)
    ,               reduce using rule 26 (expression -> matrix_funcs .)
    )               reduce using rule 26 (expression -> matrix_funcs .)


state 37

    (27) expression -> constant .

    +               reduce using rule 27 (expression -> constant .)
    -               reduce using rule 27 (expression -> constant .)
    *               reduce using rule 27 (expression -> constant .)
    /               reduce using rule 27 (expression -> constant .)
    MATRIX_PLUS     reduce using rule 27 (expression -> constant .)
    MATRIX_SUB      reduce using rule 27 (expression -> constant .)
    MATRIX_MUL      reduce using rule 27 (expression -> constant .)
    MATRIX_DIV      reduce using rule 27 (expression -> constant .)
    RELOP_EQ        reduce using rule 27 (expression -> constant .)
    RELOP_GT        reduce using rule 27 (expression -> constant .)
    RELOP_LT        reduce using rule 27 (expression -> constant .)
    RELOP_GE        reduce using rule 27 (expression -> constant .)
    RELOP_LE        reduce using rule 27 (expression -> constant .)
    RELOP_NE        reduce using rule 27 (expression -> constant .)
    '               reduce using rule 27 (expression -> constant .)
    ;               reduce using rule 27 (expression -> constant .)
    ,               reduce using rule 27 (expression -> constant .)
    )               reduce using rule 27 (expression -> constant .)


state 38

    (28) expression -> ID .

    +               reduce using rule 28 (expression -> ID .)
    -               reduce using rule 28 (expression -> ID .)
    *               reduce using rule 28 (expression -> ID .)
    /               reduce using rule 28 (expression -> ID .)
    MATRIX_PLUS     reduce using rule 28 (expression -> ID .)
    MATRIX_SUB      reduce using rule 28 (expression -> ID .)
    MATRIX_MUL      reduce using rule 28 (expression -> ID .)
    MATRIX_DIV      reduce using rule 28 (expression -> ID .)
    RELOP_EQ        reduce using rule 28 (expression -> ID .)
    RELOP_GT        reduce using rule 28 (expression -> ID .)
    RELOP_LT        reduce using rule 28 (expression -> ID .)
    RELOP_GE        reduce using rule 28 (expression -> ID .)
    RELOP_LE        reduce using rule 28 (expression -> ID .)
    RELOP_NE        reduce using rule 28 (expression -> ID .)
    '               reduce using rule 28 (expression -> ID .)
    ;               reduce using rule 28 (expression -> ID .)
    ,               reduce using rule 28 (expression -> ID .)
    )               reduce using rule 28 (expression -> ID .)


state 39

    (29) expression -> matrix .

    +               reduce using rule 29 (expression -> matrix .)
    -               reduce using rule 29 (expression -> matrix .)
    *               reduce using rule 29 (expression -> matrix .)
    /               reduce using rule 29 (expression -> matrix .)
    MATRIX_PLUS     reduce using rule 29 (expression -> matrix .)
    MATRIX_SUB      reduce using rule 29 (expression -> matrix .)
    MATRIX_MUL      reduce using rule 29 (expression -> matrix .)
    MATRIX_DIV      reduce using rule 29 (expression -> matrix .)
    RELOP_EQ        reduce using rule 29 (expression -> matrix .)
    RELOP_GT        reduce using rule 29 (expression -> matrix .)
    RELOP_LT        reduce using rule 29 (expression -> matrix .)
    RELOP_GE        reduce using rule 29 (expression -> matrix .)
    RELOP_LE        reduce using rule 29 (expression -> matrix .)
    RELOP_NE        reduce using rule 29 (expression -> matrix .)
    '               reduce using rule 29 (expression -> matrix .)
    ;               reduce using rule 29 (expression -> matrix .)
    ,               reduce using rule 29 (expression -> matrix .)
    )               reduce using rule 29 (expression -> matrix .)


state 40

    (30) expression -> ( . expression )
    (23) expression -> . expression_binop
    (24) expression -> . expression_relop
    (25) expression -> . expression_unary
    (26) expression -> . matrix_funcs
    (27) expression -> . constant
    (28) expression -> . ID
    (29) expression -> . matrix
    (30) expression -> . ( expression )
    (31) expression_binop -> . expression + expression
    (32) expression_binop -> . expression - expression
    (33) expression_binop -> . expression * expression
    (34) expression_binop -> . expression / expression
    (35) expression_binop -> . expression MATRIX_PLUS expression
    (36) expression_binop -> . expression MATRIX_SUB expression
    (37) expression_binop -> . expression MATRIX_MUL expression
    (38) expression_binop -> . expression MATRIX_DIV expression
    (39) expression_relop -> . expression RELOP_EQ expression
    (40) expression_relop -> . expression RELOP_GT expression
    (41) expression_relop -> . expression RELOP_LT expression
    (42) expression_relop -> . expression RELOP_GE expression
    (43) expression_relop -> . expression RELOP_LE expression
    (44) expression_relop -> . expression RELOP_NE expression
    (45) expression_unary -> . - expression
    (46) expression_unary -> . expression '
    (47) matrix_funcs -> . ZEROS ( expression_list )
    (48) matrix_funcs -> . ONES ( expression_list )
    (49) matrix_funcs -> . EYE ( expression_list )
    (50) constant -> . DT_STRING
    (51) constant -> . number
    (52) matrix -> . [ vectors ]
    (59) number -> . DT_INTEGER
    (60) number -> . DT_FLOAT

    ID              shift and go to state 38
    (               shift and go to state 40
    -               shift and go to state 41
    ZEROS           shift and go to state 42
    ONES            shift and go to state 43
    EYE             shift and go to state 44
    DT_STRING       shift and go to state 45
    [               shift and go to state 47
    DT_INTEGER      shift and go to state 48
    DT_FLOAT        shift and go to state 49

    expression                     shift and go to state 82
    expression_binop               shift and go to state 33
    expression_relop               shift and go to state 34
    expression_unary               shift and go to state 35
    matrix_funcs                   shift and go to state 36
    constant                       shift and go to state 37
    matrix                         shift and go to state 39
    number                         shift and go to state 46

state 41

    (45) expression_unary -> - . expression
    (23) expression -> . expression_binop
    (24) expression -> . expression_relop
    (25) expression -> . expression_unary
    (26) expression -> . matrix_funcs
    (27) expression -> . constant
    (28) expression -> . ID
    (29) expression -> . matrix
    (30) expression -> . ( expression )
    (31) expression_binop -> . expression + expression
    (32) expression_binop -> . expression - expression
    (33) expression_binop -> . expression * expression
    (34) expression_binop -> . expression / expression
    (35) expression_binop -> . expression MATRIX_PLUS expression
    (36) expression_binop -> . expression MATRIX_SUB expression
    (37) expression_binop -> . expression MATRIX_MUL expression
    (38) expression_binop -> . expression MATRIX_DIV expression
    (39) expression_relop -> . expression RELOP_EQ expression
    (40) expression_relop -> . expression RELOP_GT expression
    (41) expression_relop -> . expression RELOP_LT expression
    (42) expression_relop -> . expression RELOP_GE expression
    (43) expression_relop -> . expression RELOP_LE expression
    (44) expression_relop -> . expression RELOP_NE expression
    (45) expression_unary -> . - expression
    (46) expression_unary -> . expression '
    (47) matrix_funcs -> . ZEROS ( expression_list )
    (48) matrix_funcs -> . ONES ( expression_list )
    (49) matrix_funcs -> . EYE ( expression_list )
    (50) constant -> . DT_STRING
    (51) constant -> . number
    (52) matrix -> . [ vectors ]
    (59) number -> . DT_INTEGER
    (60) number -> . DT_FLOAT

    ID              shift and go to state 38
    (               shift and go to state 40
    -               shift and go to state 41
    ZEROS           shift and go to state 42
    ONES            shift and go to state 43
    EYE             shift and go to state 44
    DT_STRING       shift and go to state 45
    [               shift and go to state 47
    DT_INTEGER      shift and go to state 48
    DT_FLOAT        shift and go to state 49

    expression                     shift and go to state 83
    expression_binop               shift and go to state 33
    expression_relop               shift and go to state 34
    expression_unary               shift and go to state 35
    matrix_funcs                   shift and go to state 36
    constant                       shift and go to state 37
    matrix                         shift and go to state 39
    number                         shift and go to state 46

state 42

    (47) matrix_funcs -> ZEROS . ( expression_list )

    (               shift and go to state 84


state 43

    (48) matrix_funcs -> ONES . ( expression_list )

    (               shift and go to state 85


state 44

    (49) matrix_funcs -> EYE . ( expression_list )

    (               shift and go to state 86


state 45

    (50) constant -> DT_STRING .

    +               reduce using rule 50 (constant -> DT_STRING .)
    -               reduce using rule 50 (constant -> DT_STRING .)
    *               reduce using rule 50 (constant -> DT_STRING .)
    /               reduce using rule 50 (constant -> DT_STRING .)
    MATRIX_PLUS     reduce using rule 50 (constant -> DT_STRING .)
    MATRIX_SUB      reduce using rule 50 (constant -> DT_STRING .)
    MATRIX_MUL      reduce using rule 50 (constant -> DT_STRING .)
    MATRIX_DIV      reduce using rule 50 (constant -> DT_STRING .)
    RELOP_EQ        reduce using rule 50 (constant -> DT_STRING .)
    RELOP_GT        reduce using rule 50 (constant -> DT_STRING .)
    RELOP_LT        reduce using rule 50 (constant -> DT_STRING .)
    RELOP_GE        reduce using rule 50 (constant -> DT_STRING .)
    RELOP_LE        reduce using rule 50 (constant -> DT_STRING .)
    RELOP_NE        reduce using rule 50 (constant -> DT_STRING .)
    '               reduce using rule 50 (constant -> DT_STRING .)
    ;               reduce using rule 50 (constant -> DT_STRING .)
    ,               reduce using rule 50 (constant -> DT_STRING .)
    )               reduce using rule 50 (constant -> DT_STRING .)


state 46

    (51) constant -> number .

    +               reduce using rule 51 (constant -> number .)
    -               reduce using rule 51 (constant -> number .)
    *               reduce using rule 51 (constant -> number .)
    /               reduce using rule 51 (constant -> number .)
    MATRIX_PLUS     reduce using rule 51 (constant -> number .)
    MATRIX_SUB      reduce using rule 51 (constant -> number .)
    MATRIX_MUL      reduce using rule 51 (constant -> number .)
    MATRIX_DIV      reduce using rule 51 (constant -> number .)
    RELOP_EQ        reduce using rule 51 (constant -> number .)
    RELOP_GT        reduce using rule 51 (constant -> number .)
    RELOP_LT        reduce using rule 51 (constant -> number .)
    RELOP_GE        reduce using rule 51 (constant -> number .)
    RELOP_LE        reduce using rule 51 (constant -> number .)
    RELOP_NE        reduce using rule 51 (constant -> number .)
    '               reduce using rule 51 (constant -> number .)
    ;               reduce using rule 51 (constant -> number .)
    ,               reduce using rule 51 (constant -> number .)
    )               reduce using rule 51 (constant -> number .)


state 47

    (52) matrix -> [ . vectors ]
    (53) vectors -> . vector
    (54) vectors -> . vectors , vector
    (55) vector -> . [ numbers ]
    (56) vector -> . [ ]

    [               shift and go to state 57

    vectors                        shift and go to state 87
    vector                         shift and go to state 88

state 48

    (59) number -> DT_INTEGER .

    +               reduce using rule 59 (number -> DT_INTEGER .)
    -               reduce using rule 59 (number -> DT_INTEGER .)
    *               reduce using rule 59 (number -> DT_INTEGER .)
    /               reduce using rule 59 (number -> DT_INTEGER .)
    MATRIX_PLUS     reduce using rule 59 (number -> DT_INTEGER .)
    MATRIX_SUB      reduce using rule 59 (number -> DT_INTEGER .)
    MATRIX_MUL      reduce using rule 59 (number -> DT_INTEGER .)
    MATRIX_DIV      reduce using rule 59 (number -> DT_INTEGER .)
    RELOP_EQ        reduce using rule 59 (number -> DT_INTEGER .)
    RELOP_GT        reduce using rule 59 (number -> DT_INTEGER .)
    RELOP_LT        reduce using rule 59 (number -> DT_INTEGER .)
    RELOP_GE        reduce using rule 59 (number -> DT_INTEGER .)
    RELOP_LE        reduce using rule 59 (number -> DT_INTEGER .)
    RELOP_NE        reduce using rule 59 (number -> DT_INTEGER .)
    '               reduce using rule 59 (number -> DT_INTEGER .)
    ;               reduce using rule 59 (number -> DT_INTEGER .)
    ,               reduce using rule 59 (number -> DT_INTEGER .)
    )               reduce using rule 59 (number -> DT_INTEGER .)
    ]               reduce using rule 59 (number -> DT_INTEGER .)


state 49

    (60) number -> DT_FLOAT .

    +               reduce using rule 60 (number -> DT_FLOAT .)
    -               reduce using rule 60 (number -> DT_FLOAT .)
    *               reduce using rule 60 (number -> DT_FLOAT .)
    /               reduce using rule 60 (number -> DT_FLOAT .)
    MATRIX_PLUS     reduce using rule 60 (number -> DT_FLOAT .)
    MATRIX_SUB      reduce using rule 60 (number -> DT_FLOAT .)
    MATRIX_MUL      reduce using rule 60 (number -> DT_FLOAT .)
    MATRIX_DIV      reduce using rule 60 (number -> DT_FLOAT .)
    RELOP_EQ        reduce using rule 60 (number -> DT_FLOAT .)
    RELOP_GT        reduce using rule 60 (number -> DT_FLOAT .)
    RELOP_LT        reduce using rule 60 (number -> DT_FLOAT .)
    RELOP_GE        reduce using rule 60 (number -> DT_FLOAT .)
    RELOP_LE        reduce using rule 60 (number -> DT_FLOAT .)
    RELOP_NE        reduce using rule 60 (number -> DT_FLOAT .)
    '               reduce using rule 60 (number -> DT_FLOAT .)
    ;               reduce using rule 60 (number -> DT_FLOAT .)
    ,               reduce using rule 60 (number -> DT_FLOAT .)
    )               reduce using rule 60 (number -> DT_FLOAT .)
    ]               reduce using rule 60 (number -> DT_FLOAT .)


state 50

    (63) jump_statement -> BREAK ; .

    IF              reduce using rule 63 (jump_statement -> BREAK ; .)
    PRINT           reduce using rule 63 (jump_statement -> BREAK ; .)
    BREAK           reduce using rule 63 (jump_statement -> BREAK ; .)
    CONTINUE        reduce using rule 63 (jump_statement -> BREAK ; .)
    RETURN          reduce using rule 63 (jump_statement -> BREAK ; .)
    WHILE           reduce using rule 63 (jump_statement -> BREAK ; .)
    FOR             reduce using rule 63 (jump_statement -> BREAK ; .)
    {               reduce using rule 63 (jump_statement -> BREAK ; .)
    ID              reduce using rule 63 (jump_statement -> BREAK ; .)
    $end            reduce using rule 63 (jump_statement -> BREAK ; .)
    }               reduce using rule 63 (jump_statement -> BREAK ; .)
    ELSE            reduce using rule 63 (jump_statement -> BREAK ; .)


state 51

    (64) jump_statement -> CONTINUE ; .

    IF              reduce using rule 64 (jump_statement -> CONTINUE ; .)
    PRINT           reduce using rule 64 (jump_statement -> CONTINUE ; .)
    BREAK           reduce using rule 64 (jump_statement -> CONTINUE ; .)
    CONTINUE        reduce using rule 64 (jump_statement -> CONTINUE ; .)
    RETURN          reduce using rule 64 (jump_statement -> CONTINUE ; .)
    WHILE           reduce using rule 64 (jump_statement -> CONTINUE ; .)
    FOR             reduce using rule 64 (jump_statement -> CONTINUE ; .)
    {               reduce using rule 64 (jump_statement -> CONTINUE ; .)
    ID              reduce using rule 64 (jump_statement -> CONTINUE ; .)
    $end            reduce using rule 64 (jump_statement -> CONTINUE ; .)
    }               reduce using rule 64 (jump_statement -> CONTINUE ; .)
    ELSE            reduce using rule 64 (jump_statement -> CONTINUE ; .)


state 52

    (65) return_statement -> RETURN ; .

    IF              reduce using rule 65 (return_statement -> RETURN ; .)
    PRINT           reduce using rule 65 (return_statement -> RETURN ; .)
    BREAK           reduce using rule 65 (return_statement -> RETURN ; .)
    CONTINUE        reduce using rule 65 (return_statement -> RETURN ; .)
    RETURN          reduce using rule 65 (return_statement -> RETURN ; .)
    WHILE           reduce using rule 65 (return_statement -> RETURN ; .)
    FOR             reduce using rule 65 (return_statement -> RETURN ; .)
    {               reduce using rule 65 (return_statement -> RETURN ; .)
    ID              reduce using rule 65 (return_statement -> RETURN ; .)
    $end            reduce using rule 65 (return_statement -> RETURN ; .)
    }               reduce using rule 65 (return_statement -> RETURN ; .)
    ELSE            reduce using rule 65 (return_statement -> RETURN ; .)


state 53

    (66) return_statement -> RETURN expression . ;
    (31) expression_binop -> expression . + expression
    (32) expression_binop -> expression . - expression
    (33) expression_binop -> expression . * expression
    (34) expression_binop -> expression . / expression
    (35) expression_binop -> expression . MATRIX_PLUS expression
    (36) expression_binop -> expression . MATRIX_SUB expression
    (37) expression_binop -> expression . MATRIX_MUL expression
    (38) expression_binop -> expression . MATRIX_DIV expression
    (39) expression_relop -> expression . RELOP_EQ expression
    (40) expression_relop -> expression . RELOP_GT expression
    (41) expression_relop -> expression . RELOP_LT expression
    (42) expression_relop -> expression . RELOP_GE expression
    (43) expression_relop -> expression . RELOP_LE expression
    (44) expression_relop -> expression . RELOP_NE expression
    (46) expression_unary -> expression . '

    ;               shift and go to state 89
    +               shift and go to state 67
    -               shift and go to state 68
    *               shift and go to state 69
    /               shift and go to state 70
    MATRIX_PLUS     shift and go to state 71
    MATRIX_SUB      shift and go to state 72
    MATRIX_MUL      shift and go to state 73
    MATRIX_DIV      shift and go to state 74
    RELOP_EQ        shift and go to state 75
    RELOP_GT        shift and go to state 76
    RELOP_LT        shift and go to state 77
    RELOP_GE        shift and go to state 78
    RELOP_LE        shift and go to state 79
    RELOP_NE        shift and go to state 80
    '               shift and go to state 81


state 54

    (70) while_loop -> WHILE ( . expression ) instruction
    (23) expression -> . expression_binop
    (24) expression -> . expression_relop
    (25) expression -> . expression_unary
    (26) expression -> . matrix_funcs
    (27) expression -> . constant
    (28) expression -> . ID
    (29) expression -> . matrix
    (30) expression -> . ( expression )
    (31) expression_binop -> . expression + expression
    (32) expression_binop -> . expression - expression
    (33) expression_binop -> . expression * expression
    (34) expression_binop -> . expression / expression
    (35) expression_binop -> . expression MATRIX_PLUS expression
    (36) expression_binop -> . expression MATRIX_SUB expression
    (37) expression_binop -> . expression MATRIX_MUL expression
    (38) expression_binop -> . expression MATRIX_DIV expression
    (39) expression_relop -> . expression RELOP_EQ expression
    (40) expression_relop -> . expression RELOP_GT expression
    (41) expression_relop -> . expression RELOP_LT expression
    (42) expression_relop -> . expression RELOP_GE expression
    (43) expression_relop -> . expression RELOP_LE expression
    (44) expression_relop -> . expression RELOP_NE expression
    (45) expression_unary -> . - expression
    (46) expression_unary -> . expression '
    (47) matrix_funcs -> . ZEROS ( expression_list )
    (48) matrix_funcs -> . ONES ( expression_list )
    (49) matrix_funcs -> . EYE ( expression_list )
    (50) constant -> . DT_STRING
    (51) constant -> . number
    (52) matrix -> . [ vectors ]
    (59) number -> . DT_INTEGER
    (60) number -> . DT_FLOAT

    ID              shift and go to state 38
    (               shift and go to state 40
    -               shift and go to state 41
    ZEROS           shift and go to state 42
    ONES            shift and go to state 43
    EYE             shift and go to state 44
    DT_STRING       shift and go to state 45
    [               shift and go to state 47
    DT_INTEGER      shift and go to state 48
    DT_FLOAT        shift and go to state 49

    expression                     shift and go to state 90
    expression_binop               shift and go to state 33
    expression_relop               shift and go to state 34
    expression_unary               shift and go to state 35
    matrix_funcs                   shift and go to state 36
    constant                       shift and go to state 37
    matrix                         shift and go to state 39
    number                         shift and go to state 46

state 55

    (71) for_loop -> FOR ID . = range_value : range_value instruction

    =               shift and go to state 91


state 56

    (22) assign_id -> ID vector .

    =               reduce using rule 22 (assign_id -> ID vector .)
    MUL_ASSIGN      reduce using rule 22 (assign_id -> ID vector .)
    DIV_ASSIGN      reduce using rule 22 (assign_id -> ID vector .)
    PLUS_ASSIGN     reduce using rule 22 (assign_id -> ID vector .)
    SUB_ASSIGN      reduce using rule 22 (assign_id -> ID vector .)


state 57

    (55) vector -> [ . numbers ]
    (56) vector -> [ . ]
    (57) numbers -> . numbers , number
    (58) numbers -> . number
    (59) number -> . DT_INTEGER
    (60) number -> . DT_FLOAT

    ]               shift and go to state 93
    DT_INTEGER      shift and go to state 48
    DT_FLOAT        shift and go to state 49

    numbers                        shift and go to state 92
    number                         shift and go to state 94

state 58

    (15) instruction_block -> { instructions . }
    (5) instructions -> instructions . instruction
    (7) instruction -> . assignment
    (8) instruction -> . conditional_statement
    (9) instruction -> . print_statement
    (10) instruction -> . jump_statement
    (11) instruction -> . return_statement
    (12) instruction -> . while_loop
    (13) instruction -> . for_loop
    (14) instruction -> . instruction_block
    (16) assignment -> . assign_id = expression ;
    (17) assignment -> . assign_id MUL_ASSIGN expression ;
    (18) assignment -> . assign_id DIV_ASSIGN expression ;
    (19) assignment -> . assign_id PLUS_ASSIGN expression ;
    (20) assignment -> . assign_id SUB_ASSIGN expression ;
    (61) conditional_statement -> . IF ( expression ) instruction
    (62) conditional_statement -> . IF ( expression ) instruction ELSE instruction
    (67) print_statement -> . PRINT expression_list ;
    (63) jump_statement -> . BREAK ;
    (64) jump_statement -> . CONTINUE ;
    (65) return_statement -> . RETURN ;
    (66) return_statement -> . RETURN expression ;
    (70) while_loop -> . WHILE ( expression ) instruction
    (71) for_loop -> . FOR ID = range_value : range_value instruction
    (15) instruction_block -> . { instructions }
    (21) assign_id -> . ID
    (22) assign_id -> . ID vector

    }               shift and go to state 95
    IF              shift and go to state 15
    PRINT           shift and go to state 16
    BREAK           shift and go to state 17
    CONTINUE        shift and go to state 18
    RETURN          shift and go to state 19
    WHILE           shift and go to state 20
    FOR             shift and go to state 21
    {               shift and go to state 23
    ID              shift and go to state 22

    instruction                    shift and go to state 24
    assignment                     shift and go to state 6
    conditional_statement          shift and go to state 7
    print_statement                shift and go to state 8
    jump_statement                 shift and go to state 9
    return_statement               shift and go to state 10
    while_loop                     shift and go to state 11
    for_loop                       shift and go to state 12
    instruction_block              shift and go to state 13
    assign_id                      shift and go to state 14

state 59

    (16) assignment -> assign_id = expression . ;
    (31) expression_binop -> expression . + expression
    (32) expression_binop -> expression . - expression
    (33) expression_binop -> expression . * expression
    (34) expression_binop -> expression . / expression
    (35) expression_binop -> expression . MATRIX_PLUS expression
    (36) expression_binop -> expression . MATRIX_SUB expression
    (37) expression_binop -> expression . MATRIX_MUL expression
    (38) expression_binop -> expression . MATRIX_DIV expression
    (39) expression_relop -> expression . RELOP_EQ expression
    (40) expression_relop -> expression . RELOP_GT expression
    (41) expression_relop -> expression . RELOP_LT expression
    (42) expression_relop -> expression . RELOP_GE expression
    (43) expression_relop -> expression . RELOP_LE expression
    (44) expression_relop -> expression . RELOP_NE expression
    (46) expression_unary -> expression . '

    ;               shift and go to state 96
    +               shift and go to state 67
    -               shift and go to state 68
    *               shift and go to state 69
    /               shift and go to state 70
    MATRIX_PLUS     shift and go to state 71
    MATRIX_SUB      shift and go to state 72
    MATRIX_MUL      shift and go to state 73
    MATRIX_DIV      shift and go to state 74
    RELOP_EQ        shift and go to state 75
    RELOP_GT        shift and go to state 76
    RELOP_LT        shift and go to state 77
    RELOP_GE        shift and go to state 78
    RELOP_LE        shift and go to state 79
    RELOP_NE        shift and go to state 80
    '               shift and go to state 81


state 60

    (17) assignment -> assign_id MUL_ASSIGN expression . ;
    (31) expression_binop -> expression . + expression
    (32) expression_binop -> expression . - expression
    (33) expression_binop -> expression . * expression
    (34) expression_binop -> expression . / expression
    (35) expression_binop -> expression . MATRIX_PLUS expression
    (36) expression_binop -> expression . MATRIX_SUB expression
    (37) expression_binop -> expression . MATRIX_MUL expression
    (38) expression_binop -> expression . MATRIX_DIV expression
    (39) expression_relop -> expression . RELOP_EQ expression
    (40) expression_relop -> expression . RELOP_GT expression
    (41) expression_relop -> expression . RELOP_LT expression
    (42) expression_relop -> expression . RELOP_GE expression
    (43) expression_relop -> expression . RELOP_LE expression
    (44) expression_relop -> expression . RELOP_NE expression
    (46) expression_unary -> expression . '

    ;               shift and go to state 97
    +               shift and go to state 67
    -               shift and go to state 68
    *               shift and go to state 69
    /               shift and go to state 70
    MATRIX_PLUS     shift and go to state 71
    MATRIX_SUB      shift and go to state 72
    MATRIX_MUL      shift and go to state 73
    MATRIX_DIV      shift and go to state 74
    RELOP_EQ        shift and go to state 75
    RELOP_GT        shift and go to state 76
    RELOP_LT        shift and go to state 77
    RELOP_GE        shift and go to state 78
    RELOP_LE        shift and go to state 79
    RELOP_NE        shift and go to state 80
    '               shift and go to state 81


state 61

    (18) assignment -> assign_id DIV_ASSIGN expression . ;
    (31) expression_binop -> expression . + expression
    (32) expression_binop -> expression . - expression
    (33) expression_binop -> expression . * expression
    (34) expression_binop -> expression . / expression
    (35) expression_binop -> expression . MATRIX_PLUS expression
    (36) expression_binop -> expression . MATRIX_SUB expression
    (37) expression_binop -> expression . MATRIX_MUL expression
    (38) expression_binop -> expression . MATRIX_DIV expression
    (39) expression_relop -> expression . RELOP_EQ expression
    (40) expression_relop -> expression . RELOP_GT expression
    (41) expression_relop -> expression . RELOP_LT expression
    (42) expression_relop -> expression . RELOP_GE expression
    (43) expression_relop -> expression . RELOP_LE expression
    (44) expression_relop -> expression . RELOP_NE expression
    (46) expression_unary -> expression . '

    ;               shift and go to state 98
    +               shift and go to state 67
    -               shift and go to state 68
    *               shift and go to state 69
    /               shift and go to state 70
    MATRIX_PLUS     shift and go to state 71
    MATRIX_SUB      shift and go to state 72
    MATRIX_MUL      shift and go to state 73
    MATRIX_DIV      shift and go to state 74
    RELOP_EQ        shift and go to state 75
    RELOP_GT        shift and go to state 76
    RELOP_LT        shift and go to state 77
    RELOP_GE        shift and go to state 78
    RELOP_LE        shift and go to state 79
    RELOP_NE        shift and go to state 80
    '               shift and go to state 81


state 62

    (19) assignment -> assign_id PLUS_ASSIGN expression . ;
    (31) expression_binop -> expression . + expression
    (32) expression_binop -> expression . - expression
    (33) expression_binop -> expression . * expression
    (34) expression_binop -> expression . / expression
    (35) expression_binop -> expression . MATRIX_PLUS expression
    (36) expression_binop -> expression . MATRIX_SUB expression
    (37) expression_binop -> expression . MATRIX_MUL expression
    (38) expression_binop -> expression . MATRIX_DIV expression
    (39) expression_relop -> expression . RELOP_EQ expression
    (40) expression_relop -> expression . RELOP_GT expression
    (41) expression_relop -> expression . RELOP_LT expression
    (42) expression_relop -> expression . RELOP_GE expression
    (43) expression_relop -> expression . RELOP_LE expression
    (44) expression_relop -> expression . RELOP_NE expression
    (46) expression_unary -> expression . '

    ;               shift and go to state 99
    +               shift and go to state 67
    -               shift and go to state 68
    *               shift and go to state 69
    /               shift and go to state 70
    MATRIX_PLUS     shift and go to state 71
    MATRIX_SUB      shift and go to state 72
    MATRIX_MUL      shift and go to state 73
    MATRIX_DIV      shift and go to state 74
    RELOP_EQ        shift and go to state 75
    RELOP_GT        shift and go to state 76
    RELOP_LT        shift and go to state 77
    RELOP_GE        shift and go to state 78
    RELOP_LE        shift and go to state 79
    RELOP_NE        shift and go to state 80
    '               shift and go to state 81


state 63

    (20) assignment -> assign_id SUB_ASSIGN expression . ;
    (31) expression_binop -> expression . + expression
    (32) expression_binop -> expression . - expression
    (33) expression_binop -> expression . * expression
    (34) expression_binop -> expression . / expression
    (35) expression_binop -> expression . MATRIX_PLUS expression
    (36) expression_binop -> expression . MATRIX_SUB expression
    (37) expression_binop -> expression . MATRIX_MUL expression
    (38) expression_binop -> expression . MATRIX_DIV expression
    (39) expression_relop -> expression . RELOP_EQ expression
    (40) expression_relop -> expression . RELOP_GT expression
    (41) expression_relop -> expression . RELOP_LT expression
    (42) expression_relop -> expression . RELOP_GE expression
    (43) expression_relop -> expression . RELOP_LE expression
    (44) expression_relop -> expression . RELOP_NE expression
    (46) expression_unary -> expression . '

    ;               shift and go to state 100
    +               shift and go to state 67
    -               shift and go to state 68
    *               shift and go to state 69
    /               shift and go to state 70
    MATRIX_PLUS     shift and go to state 71
    MATRIX_SUB      shift and go to state 72
    MATRIX_MUL      shift and go to state 73
    MATRIX_DIV      shift and go to state 74
    RELOP_EQ        shift and go to state 75
    RELOP_GT        shift and go to state 76
    RELOP_LT        shift and go to state 77
    RELOP_GE        shift and go to state 78
    RELOP_LE        shift and go to state 79
    RELOP_NE        shift and go to state 80
    '               shift and go to state 81


state 64

    (61) conditional_statement -> IF ( expression . ) instruction
    (62) conditional_statement -> IF ( expression . ) instruction ELSE instruction
    (31) expression_binop -> expression . + expression
    (32) expression_binop -> expression . - expression
    (33) expression_binop -> expression . * expression
    (34) expression_binop -> expression . / expression
    (35) expression_binop -> expression . MATRIX_PLUS expression
    (36) expression_binop -> expression . MATRIX_SUB expression
    (37) expression_binop -> expression . MATRIX_MUL expression
    (38) expression_binop -> expression . MATRIX_DIV expression
    (39) expression_relop -> expression . RELOP_EQ expression
    (40) expression_relop -> expression . RELOP_GT expression
    (41) expression_relop -> expression . RELOP_LT expression
    (42) expression_relop -> expression . RELOP_GE expression
    (43) expression_relop -> expression . RELOP_LE expression
    (44) expression_relop -> expression . RELOP_NE expression
    (46) expression_unary -> expression . '

    )               shift and go to state 101
    +               shift and go to state 67
    -               shift and go to state 68
    *               shift and go to state 69
    /               shift and go to state 70
    MATRIX_PLUS     shift and go to state 71
    MATRIX_SUB      shift and go to state 72
    MATRIX_MUL      shift and go to state 73
    MATRIX_DIV      shift and go to state 74
    RELOP_EQ        shift and go to state 75
    RELOP_GT        shift and go to state 76
    RELOP_LT        shift and go to state 77
    RELOP_GE        shift and go to state 78
    RELOP_LE        shift and go to state 79
    RELOP_NE        shift and go to state 80
    '               shift and go to state 81


state 65

    (67) print_statement -> PRINT expression_list ; .

    IF              reduce using rule 67 (print_statement -> PRINT expression_list ; .)
    PRINT           reduce using rule 67 (print_statement -> PRINT expression_list ; .)
    BREAK           reduce using rule 67 (print_statement -> PRINT expression_list ; .)
    CONTINUE        reduce using rule 67 (print_statement -> PRINT expression_list ; .)
    RETURN          reduce using rule 67 (print_statement -> PRINT expression_list ; .)
    WHILE           reduce using rule 67 (print_statement -> PRINT expression_list ; .)
    FOR             reduce using rule 67 (print_statement -> PRINT expression_list ; .)
    {               reduce using rule 67 (print_statement -> PRINT expression_list ; .)
    ID              reduce using rule 67 (print_statement -> PRINT expression_list ; .)
    $end            reduce using rule 67 (print_statement -> PRINT expression_list ; .)
    }               reduce using rule 67 (print_statement -> PRINT expression_list ; .)
    ELSE            reduce using rule 67 (print_statement -> PRINT expression_list ; .)


state 66

    (68) expression_list -> expression_list , . expression
    (23) expression -> . expression_binop
    (24) expression -> . expression_relop
    (25) expression -> . expression_unary
    (26) expression -> . matrix_funcs
    (27) expression -> . constant
    (28) expression -> . ID
    (29) expression -> . matrix
    (30) expression -> . ( expression )
    (31) expression_binop -> . expression + expression
    (32) expression_binop -> . expression - expression
    (33) expression_binop -> . expression * expression
    (34) expression_binop -> . expression / expression
    (35) expression_binop -> . expression MATRIX_PLUS expression
    (36) expression_binop -> . expression MATRIX_SUB expression
    (37) expression_binop -> . expression MATRIX_MUL expression
    (38) expression_binop -> . expression MATRIX_DIV expression
    (39) expression_relop -> . expression RELOP_EQ expression
    (40) expression_relop -> . expression RELOP_GT expression
    (41) expression_relop -> . expression RELOP_LT expression
    (42) expression_relop -> . expression RELOP_GE expression
    (43) expression_relop -> . expression RELOP_LE expression
    (44) expression_relop -> . expression RELOP_NE expression
    (45) expression_unary -> . - expression
    (46) expression_unary -> . expression '
    (47) matrix_funcs -> . ZEROS ( expression_list )
    (48) matrix_funcs -> . ONES ( expression_list )
    (49) matrix_funcs -> . EYE ( expression_list )
    (50) constant -> . DT_STRING
    (51) constant -> . number
    (52) matrix -> . [ vectors ]
    (59) number -> . DT_INTEGER
    (60) number -> . DT_FLOAT

    ID              shift and go to state 38
    (               shift and go to state 40
    -               shift and go to state 41
    ZEROS           shift and go to state 42
    ONES            shift and go to state 43
    EYE             shift and go to state 44
    DT_STRING       shift and go to state 45
    [               shift and go to state 47
    DT_INTEGER      shift and go to state 48
    DT_FLOAT        shift and go to state 49

    expression                     shift and go to state 102
    expression_binop               shift and go to state 33
    expression_relop               shift and go to state 34
    expression_unary               shift and go to state 35
    matrix_funcs                   shift and go to state 36
    constant                       shift and go to state 37
    matrix                         shift and go to state 39
    number                         shift and go to state 46

state 67

    (31) expression_binop -> expression + . expression
    (23) expression -> . expression_binop
    (24) expression -> . expression_relop
    (25) expression -> . expression_unary
    (26) expression -> . matrix_funcs
    (27) expression -> . constant
    (28) expression -> . ID
    (29) expression -> . matrix
    (30) expression -> . ( expression )
    (31) expression_binop -> . expression + expression
    (32) expression_binop -> . expression - expression
    (33) expression_binop -> . expression * expression
    (34) expression_binop -> . expression / expression
    (35) expression_binop -> . expression MATRIX_PLUS expression
    (36) expression_binop -> . expression MATRIX_SUB expression
    (37) expression_binop -> . expression MATRIX_MUL expression
    (38) expression_binop -> . expression MATRIX_DIV expression
    (39) expression_relop -> . expression RELOP_EQ expression
    (40) expression_relop -> . expression RELOP_GT expression
    (41) expression_relop -> . expression RELOP_LT expression
    (42) expression_relop -> . expression RELOP_GE expression
    (43) expression_relop -> . expression RELOP_LE expression
    (44) expression_relop -> . expression RELOP_NE expression
    (45) expression_unary -> . - expression
    (46) expression_unary -> . expression '
    (47) matrix_funcs -> . ZEROS ( expression_list )
    (48) matrix_funcs -> . ONES ( expression_list )
    (49) matrix_funcs -> . EYE ( expression_list )
    (50) constant -> . DT_STRING
    (51) constant -> . number
    (52) matrix -> . [ vectors ]
    (59) number -> . DT_INTEGER
    (60) number -> . DT_FLOAT

    ID              shift and go to state 38
    (               shift and go to state 40
    -               shift and go to state 41
    ZEROS           shift and go to state 42
    ONES            shift and go to state 43
    EYE             shift and go to state 44
    DT_STRING       shift and go to state 45
    [               shift and go to state 47
    DT_INTEGER      shift and go to state 48
    DT_FLOAT        shift and go to state 49

    expression                     shift and go to state 103
    expression_binop               shift and go to state 33
    expression_relop               shift and go to state 34
    expression_unary               shift and go to state 35
    matrix_funcs                   shift and go to state 36
    constant                       shift and go to state 37
    matrix                         shift and go to state 39
    number                         shift and go to state 46

state 68

    (32) expression_binop -> expression - . expression
    (23) expression -> . expression_binop
    (24) expression -> . expression_relop
    (25) expression -> . expression_unary
    (26) expression -> . matrix_funcs
    (27) expression -> . constant
    (28) expression -> . ID
    (29) expression -> . matrix
    (30) expression -> . ( expression )
    (31) expression_binop -> . expression + expression
    (32) expression_binop -> . expression - expression
    (33) expression_binop -> . expression * expression
    (34) expression_binop -> . expression / expression
    (35) expression_binop -> . expression MATRIX_PLUS expression
    (36) expression_binop -> . expression MATRIX_SUB expression
    (37) expression_binop -> . expression MATRIX_MUL expression
    (38) expression_binop -> . expression MATRIX_DIV expression
    (39) expression_relop -> . expression RELOP_EQ expression
    (40) expression_relop -> . expression RELOP_GT expression
    (41) expression_relop -> . expression RELOP_LT expression
    (42) expression_relop -> . expression RELOP_GE expression
    (43) expression_relop -> . expression RELOP_LE expression
    (44) expression_relop -> . expression RELOP_NE expression
    (45) expression_unary -> . - expression
    (46) expression_unary -> . expression '
    (47) matrix_funcs -> . ZEROS ( expression_list )
    (48) matrix_funcs -> . ONES ( expression_list )
    (49) matrix_funcs -> . EYE ( expression_list )
    (50) constant -> . DT_STRING
    (51) constant -> . number
    (52) matrix -> . [ vectors ]
    (59) number -> . DT_INTEGER
    (60) number -> . DT_FLOAT

    ID              shift and go to state 38
    (               shift and go to state 40
    -               shift and go to state 41
    ZEROS           shift and go to state 42
    ONES            shift and go to state 43
    EYE             shift and go to state 44
    DT_STRING       shift and go to state 45
    [               shift and go to state 47
    DT_INTEGER      shift and go to state 48
    DT_FLOAT        shift and go to state 49

    expression                     shift and go to state 104
    expression_binop               shift and go to state 33
    expression_relop               shift and go to state 34
    expression_unary               shift and go to state 35
    matrix_funcs                   shift and go to state 36
    constant                       shift and go to state 37
    matrix                         shift and go to state 39
    number                         shift and go to state 46

state 69

    (33) expression_binop -> expression * . expression
    (23) expression -> . expression_binop
    (24) expression -> . expression_relop
    (25) expression -> . expression_unary
    (26) expression -> . matrix_funcs
    (27) expression -> . constant
    (28) expression -> . ID
    (29) expression -> . matrix
    (30) expression -> . ( expression )
    (31) expression_binop -> . expression + expression
    (32) expression_binop -> . expression - expression
    (33) expression_binop -> . expression * expression
    (34) expression_binop -> . expression / expression
    (35) expression_binop -> . expression MATRIX_PLUS expression
    (36) expression_binop -> . expression MATRIX_SUB expression
    (37) expression_binop -> . expression MATRIX_MUL expression
    (38) expression_binop -> . expression MATRIX_DIV expression
    (39) expression_relop -> . expression RELOP_EQ expression
    (40) expression_relop -> . expression RELOP_GT expression
    (41) expression_relop -> . expression RELOP_LT expression
    (42) expression_relop -> . expression RELOP_GE expression
    (43) expression_relop -> . expression RELOP_LE expression
    (44) expression_relop -> . expression RELOP_NE expression
    (45) expression_unary -> . - expression
    (46) expression_unary -> . expression '
    (47) matrix_funcs -> . ZEROS ( expression_list )
    (48) matrix_funcs -> . ONES ( expression_list )
    (49) matrix_funcs -> . EYE ( expression_list )
    (50) constant -> . DT_STRING
    (51) constant -> . number
    (52) matrix -> . [ vectors ]
    (59) number -> . DT_INTEGER
    (60) number -> . DT_FLOAT

    ID              shift and go to state 38
    (               shift and go to state 40
    -               shift and go to state 41
    ZEROS           shift and go to state 42
    ONES            shift and go to state 43
    EYE             shift and go to state 44
    DT_STRING       shift and go to state 45
    [               shift and go to state 47
    DT_INTEGER      shift and go to state 48
    DT_FLOAT        shift and go to state 49

    expression                     shift and go to state 105
    expression_binop               shift and go to state 33
    expression_relop               shift and go to state 34
    expression_unary               shift and go to state 35
    matrix_funcs                   shift and go to state 36
    constant                       shift and go to state 37
    matrix                         shift and go to state 39
    number                         shift and go to state 46

state 70

    (34) expression_binop -> expression / . expression
    (23) expression -> . expression_binop
    (24) expression -> . expression_relop
    (25) expression -> . expression_unary
    (26) expression -> . matrix_funcs
    (27) expression -> . constant
    (28) expression -> . ID
    (29) expression -> . matrix
    (30) expression -> . ( expression )
    (31) expression_binop -> . expression + expression
    (32) expression_binop -> . expression - expression
    (33) expression_binop -> . expression * expression
    (34) expression_binop -> . expression / expression
    (35) expression_binop -> . expression MATRIX_PLUS expression
    (36) expression_binop -> . expression MATRIX_SUB expression
    (37) expression_binop -> . expression MATRIX_MUL expression
    (38) expression_binop -> . expression MATRIX_DIV expression
    (39) expression_relop -> . expression RELOP_EQ expression
    (40) expression_relop -> . expression RELOP_GT expression
    (41) expression_relop -> . expression RELOP_LT expression
    (42) expression_relop -> . expression RELOP_GE expression
    (43) expression_relop -> . expression RELOP_LE expression
    (44) expression_relop -> . expression RELOP_NE expression
    (45) expression_unary -> . - expression
    (46) expression_unary -> . expression '
    (47) matrix_funcs -> . ZEROS ( expression_list )
    (48) matrix_funcs -> . ONES ( expression_list )
    (49) matrix_funcs -> . EYE ( expression_list )
    (50) constant -> . DT_STRING
    (51) constant -> . number
    (52) matrix -> . [ vectors ]
    (59) number -> . DT_INTEGER
    (60) number -> . DT_FLOAT

    ID              shift and go to state 38
    (               shift and go to state 40
    -               shift and go to state 41
    ZEROS           shift and go to state 42
    ONES            shift and go to state 43
    EYE             shift and go to state 44
    DT_STRING       shift and go to state 45
    [               shift and go to state 47
    DT_INTEGER      shift and go to state 48
    DT_FLOAT        shift and go to state 49

    expression                     shift and go to state 106
    expression_binop               shift and go to state 33
    expression_relop               shift and go to state 34
    expression_unary               shift and go to state 35
    matrix_funcs                   shift and go to state 36
    constant                       shift and go to state 37
    matrix                         shift and go to state 39
    number                         shift and go to state 46

state 71

    (35) expression_binop -> expression MATRIX_PLUS . expression
    (23) expression -> . expression_binop
    (24) expression -> . expression_relop
    (25) expression -> . expression_unary
    (26) expression -> . matrix_funcs
    (27) expression -> . constant
    (28) expression -> . ID
    (29) expression -> . matrix
    (30) expression -> . ( expression )
    (31) expression_binop -> . expression + expression
    (32) expression_binop -> . expression - expression
    (33) expression_binop -> . expression * expression
    (34) expression_binop -> . expression / expression
    (35) expression_binop -> . expression MATRIX_PLUS expression
    (36) expression_binop -> . expression MATRIX_SUB expression
    (37) expression_binop -> . expression MATRIX_MUL expression
    (38) expression_binop -> . expression MATRIX_DIV expression
    (39) expression_relop -> . expression RELOP_EQ expression
    (40) expression_relop -> . expression RELOP_GT expression
    (41) expression_relop -> . expression RELOP_LT expression
    (42) expression_relop -> . expression RELOP_GE expression
    (43) expression_relop -> . expression RELOP_LE expression
    (44) expression_relop -> . expression RELOP_NE expression
    (45) expression_unary -> . - expression
    (46) expression_unary -> . expression '
    (47) matrix_funcs -> . ZEROS ( expression_list )
    (48) matrix_funcs -> . ONES ( expression_list )
    (49) matrix_funcs -> . EYE ( expression_list )
    (50) constant -> . DT_STRING
    (51) constant -> . number
    (52) matrix -> . [ vectors ]
    (59) number -> . DT_INTEGER
    (60) number -> . DT_FLOAT

    ID              shift and go to state 38
    (               shift and go to state 40
    -               shift and go to state 41
    ZEROS           shift and go to state 42
    ONES            shift and go to state 43
    EYE             shift and go to state 44
    DT_STRING       shift and go to state 45
    [               shift and go to state 47
    DT_INTEGER      shift and go to state 48
    DT_FLOAT        shift and go to state 49

    expression                     shift and go to state 107
    expression_binop               shift and go to state 33
    expression_relop               shift and go to state 34
    expression_unary               shift and go to state 35
    matrix_funcs                   shift and go to state 36
    constant                       shift and go to state 37
    matrix                         shift and go to state 39
    number                         shift and go to state 46

state 72

    (36) expression_binop -> expression MATRIX_SUB . expression
    (23) expression -> . expression_binop
    (24) expression -> . expression_relop
    (25) expression -> . expression_unary
    (26) expression -> . matrix_funcs
    (27) expression -> . constant
    (28) expression -> . ID
    (29) expression -> . matrix
    (30) expression -> . ( expression )
    (31) expression_binop -> . expression + expression
    (32) expression_binop -> . expression - expression
    (33) expression_binop -> . expression * expression
    (34) expression_binop -> . expression / expression
    (35) expression_binop -> . expression MATRIX_PLUS expression
    (36) expression_binop -> . expression MATRIX_SUB expression
    (37) expression_binop -> . expression MATRIX_MUL expression
    (38) expression_binop -> . expression MATRIX_DIV expression
    (39) expression_relop -> . expression RELOP_EQ expression
    (40) expression_relop -> . expression RELOP_GT expression
    (41) expression_relop -> . expression RELOP_LT expression
    (42) expression_relop -> . expression RELOP_GE expression
    (43) expression_relop -> . expression RELOP_LE expression
    (44) expression_relop -> . expression RELOP_NE expression
    (45) expression_unary -> . - expression
    (46) expression_unary -> . expression '
    (47) matrix_funcs -> . ZEROS ( expression_list )
    (48) matrix_funcs -> . ONES ( expression_list )
    (49) matrix_funcs -> . EYE ( expression_list )
    (50) constant -> . DT_STRING
    (51) constant -> . number
    (52) matrix -> . [ vectors ]
    (59) number -> . DT_INTEGER
    (60) number -> . DT_FLOAT

    ID              shift and go to state 38
    (               shift and go to state 40
    -               shift and go to state 41
    ZEROS           shift and go to state 42
    ONES            shift and go to state 43
    EYE             shift and go to state 44
    DT_STRING       shift and go to state 45
    [               shift and go to state 47
    DT_INTEGER      shift and go to state 48
    DT_FLOAT        shift and go to state 49

    expression                     shift and go to state 108
    expression_binop               shift and go to state 33
    expression_relop               shift and go to state 34
    expression_unary               shift and go to state 35
    matrix_funcs                   shift and go to state 36
    constant                       shift and go to state 37
    matrix                         shift and go to state 39
    number                         shift and go to state 46

state 73

    (37) expression_binop -> expression MATRIX_MUL . expression
    (23) expression -> . expression_binop
    (24) expression -> . expression_relop
    (25) expression -> . expression_unary
    (26) expression -> . matrix_funcs
    (27) expression -> . constant
    (28) expression -> . ID
    (29) expression -> . matrix
    (30) expression -> . ( expression )
    (31) expression_binop -> . expression + expression
    (32) expression_binop -> . expression - expression
    (33) expression_binop -> . expression * expression
    (34) expression_binop -> . expression / expression
    (35) expression_binop -> . expression MATRIX_PLUS expression
    (36) expression_binop -> . expression MATRIX_SUB expression
    (37) expression_binop -> . expression MATRIX_MUL expression
    (38) expression_binop -> . expression MATRIX_DIV expression
    (39) expression_relop -> . expression RELOP_EQ expression
    (40) expression_relop -> . expression RELOP_GT expression
    (41) expression_relop -> . expression RELOP_LT expression
    (42) expression_relop -> . expression RELOP_GE expression
    (43) expression_relop -> . expression RELOP_LE expression
    (44) expression_relop -> . expression RELOP_NE expression
    (45) expression_unary -> . - expression
    (46) expression_unary -> . expression '
    (47) matrix_funcs -> . ZEROS ( expression_list )
    (48) matrix_funcs -> . ONES ( expression_list )
    (49) matrix_funcs -> . EYE ( expression_list )
    (50) constant -> . DT_STRING
    (51) constant -> . number
    (52) matrix -> . [ vectors ]
    (59) number -> . DT_INTEGER
    (60) number -> . DT_FLOAT

    ID              shift and go to state 38
    (               shift and go to state 40
    -               shift and go to state 41
    ZEROS           shift and go to state 42
    ONES            shift and go to state 43
    EYE             shift and go to state 44
    DT_STRING       shift and go to state 45
    [               shift and go to state 47
    DT_INTEGER      shift and go to state 48
    DT_FLOAT        shift and go to state 49

    expression                     shift and go to state 109
    expression_binop               shift and go to state 33
    expression_relop               shift and go to state 34
    expression_unary               shift and go to state 35
    matrix_funcs                   shift and go to state 36
    constant                       shift and go to state 37
    matrix                         shift and go to state 39
    number                         shift and go to state 46

state 74

    (38) expression_binop -> expression MATRIX_DIV . expression
    (23) expression -> . expression_binop
    (24) expression -> . expression_relop
    (25) expression -> . expression_unary
    (26) expression -> . matrix_funcs
    (27) expression -> . constant
    (28) expression -> . ID
    (29) expression -> . matrix
    (30) expression -> . ( expression )
    (31) expression_binop -> . expression + expression
    (32) expression_binop -> . expression - expression
    (33) expression_binop -> . expression * expression
    (34) expression_binop -> . expression / expression
    (35) expression_binop -> . expression MATRIX_PLUS expression
    (36) expression_binop -> . expression MATRIX_SUB expression
    (37) expression_binop -> . expression MATRIX_MUL expression
    (38) expression_binop -> . expression MATRIX_DIV expression
    (39) expression_relop -> . expression RELOP_EQ expression
    (40) expression_relop -> . expression RELOP_GT expression
    (41) expression_relop -> . expression RELOP_LT expression
    (42) expression_relop -> . expression RELOP_GE expression
    (43) expression_relop -> . expression RELOP_LE expression
    (44) expression_relop -> . expression RELOP_NE expression
    (45) expression_unary -> . - expression
    (46) expression_unary -> . expression '
    (47) matrix_funcs -> . ZEROS ( expression_list )
    (48) matrix_funcs -> . ONES ( expression_list )
    (49) matrix_funcs -> . EYE ( expression_list )
    (50) constant -> . DT_STRING
    (51) constant -> . number
    (52) matrix -> . [ vectors ]
    (59) number -> . DT_INTEGER
    (60) number -> . DT_FLOAT

    ID              shift and go to state 38
    (               shift and go to state 40
    -               shift and go to state 41
    ZEROS           shift and go to state 42
    ONES            shift and go to state 43
    EYE             shift and go to state 44
    DT_STRING       shift and go to state 45
    [               shift and go to state 47
    DT_INTEGER      shift and go to state 48
    DT_FLOAT        shift and go to state 49

    expression                     shift and go to state 110
    expression_binop               shift and go to state 33
    expression_relop               shift and go to state 34
    expression_unary               shift and go to state 35
    matrix_funcs                   shift and go to state 36
    constant                       shift and go to state 37
    matrix                         shift and go to state 39
    number                         shift and go to state 46

state 75

    (39) expression_relop -> expression RELOP_EQ . expression
    (23) expression -> . expression_binop
    (24) expression -> . expression_relop
    (25) expression -> . expression_unary
    (26) expression -> . matrix_funcs
    (27) expression -> . constant
    (28) expression -> . ID
    (29) expression -> . matrix
    (30) expression -> . ( expression )
    (31) expression_binop -> . expression + expression
    (32) expression_binop -> . expression - expression
    (33) expression_binop -> . expression * expression
    (34) expression_binop -> . expression / expression
    (35) expression_binop -> . expression MATRIX_PLUS expression
    (36) expression_binop -> . expression MATRIX_SUB expression
    (37) expression_binop -> . expression MATRIX_MUL expression
    (38) expression_binop -> . expression MATRIX_DIV expression
    (39) expression_relop -> . expression RELOP_EQ expression
    (40) expression_relop -> . expression RELOP_GT expression
    (41) expression_relop -> . expression RELOP_LT expression
    (42) expression_relop -> . expression RELOP_GE expression
    (43) expression_relop -> . expression RELOP_LE expression
    (44) expression_relop -> . expression RELOP_NE expression
    (45) expression_unary -> . - expression
    (46) expression_unary -> . expression '
    (47) matrix_funcs -> . ZEROS ( expression_list )
    (48) matrix_funcs -> . ONES ( expression_list )
    (49) matrix_funcs -> . EYE ( expression_list )
    (50) constant -> . DT_STRING
    (51) constant -> . number
    (52) matrix -> . [ vectors ]
    (59) number -> . DT_INTEGER
    (60) number -> . DT_FLOAT

    ID              shift and go to state 38
    (               shift and go to state 40
    -               shift and go to state 41
    ZEROS           shift and go to state 42
    ONES            shift and go to state 43
    EYE             shift and go to state 44
    DT_STRING       shift and go to state 45
    [               shift and go to state 47
    DT_INTEGER      shift and go to state 48
    DT_FLOAT        shift and go to state 49

    expression                     shift and go to state 111
    expression_binop               shift and go to state 33
    expression_relop               shift and go to state 34
    expression_unary               shift and go to state 35
    matrix_funcs                   shift and go to state 36
    constant                       shift and go to state 37
    matrix                         shift and go to state 39
    number                         shift and go to state 46

state 76

    (40) expression_relop -> expression RELOP_GT . expression
    (23) expression -> . expression_binop
    (24) expression -> . expression_relop
    (25) expression -> . expression_unary
    (26) expression -> . matrix_funcs
    (27) expression -> . constant
    (28) expression -> . ID
    (29) expression -> . matrix
    (30) expression -> . ( expression )
    (31) expression_binop -> . expression + expression
    (32) expression_binop -> . expression - expression
    (33) expression_binop -> . expression * expression
    (34) expression_binop -> . expression / expression
    (35) expression_binop -> . expression MATRIX_PLUS expression
    (36) expression_binop -> . expression MATRIX_SUB expression
    (37) expression_binop -> . expression MATRIX_MUL expression
    (38) expression_binop -> . expression MATRIX_DIV expression
    (39) expression_relop -> . expression RELOP_EQ expression
    (40) expression_relop -> . expression RELOP_GT expression
    (41) expression_relop -> . expression RELOP_LT expression
    (42) expression_relop -> . expression RELOP_GE expression
    (43) expression_relop -> . expression RELOP_LE expression
    (44) expression_relop -> . expression RELOP_NE expression
    (45) expression_unary -> . - expression
    (46) expression_unary -> . expression '
    (47) matrix_funcs -> . ZEROS ( expression_list )
    (48) matrix_funcs -> . ONES ( expression_list )
    (49) matrix_funcs -> . EYE ( expression_list )
    (50) constant -> . DT_STRING
    (51) constant -> . number
    (52) matrix -> . [ vectors ]
    (59) number -> . DT_INTEGER
    (60) number -> . DT_FLOAT

    ID              shift and go to state 38
    (               shift and go to state 40
    -               shift and go to state 41
    ZEROS           shift and go to state 42
    ONES            shift and go to state 43
    EYE             shift and go to state 44
    DT_STRING       shift and go to state 45
    [               shift and go to state 47
    DT_INTEGER      shift and go to state 48
    DT_FLOAT        shift and go to state 49

    expression                     shift and go to state 112
    expression_binop               shift and go to state 33
    expression_relop               shift and go to state 34
    expression_unary               shift and go to state 35
    matrix_funcs                   shift and go to state 36
    constant                       shift and go to state 37
    matrix                         shift and go to state 39
    number                         shift and go to state 46

state 77

    (41) expression_relop -> expression RELOP_LT . expression
    (23) expression -> . expression_binop
    (24) expression -> . expression_relop
    (25) expression -> . expression_unary
    (26) expression -> . matrix_funcs
    (27) expression -> . constant
    (28) expression -> . ID
    (29) expression -> . matrix
    (30) expression -> . ( expression )
    (31) expression_binop -> . expression + expression
    (32) expression_binop -> . expression - expression
    (33) expression_binop -> . expression * expression
    (34) expression_binop -> . expression / expression
    (35) expression_binop -> . expression MATRIX_PLUS expression
    (36) expression_binop -> . expression MATRIX_SUB expression
    (37) expression_binop -> . expression MATRIX_MUL expression
    (38) expression_binop -> . expression MATRIX_DIV expression
    (39) expression_relop -> . expression RELOP_EQ expression
    (40) expression_relop -> . expression RELOP_GT expression
    (41) expression_relop -> . expression RELOP_LT expression
    (42) expression_relop -> . expression RELOP_GE expression
    (43) expression_relop -> . expression RELOP_LE expression
    (44) expression_relop -> . expression RELOP_NE expression
    (45) expression_unary -> . - expression
    (46) expression_unary -> . expression '
    (47) matrix_funcs -> . ZEROS ( expression_list )
    (48) matrix_funcs -> . ONES ( expression_list )
    (49) matrix_funcs -> . EYE ( expression_list )
    (50) constant -> . DT_STRING
    (51) constant -> . number
    (52) matrix -> . [ vectors ]
    (59) number -> . DT_INTEGER
    (60) number -> . DT_FLOAT

    ID              shift and go to state 38
    (               shift and go to state 40
    -               shift and go to state 41
    ZEROS           shift and go to state 42
    ONES            shift and go to state 43
    EYE             shift and go to state 44
    DT_STRING       shift and go to state 45
    [               shift and go to state 47
    DT_INTEGER      shift and go to state 48
    DT_FLOAT        shift and go to state 49

    expression                     shift and go to state 113
    expression_binop               shift and go to state 33
    expression_relop               shift and go to state 34
    expression_unary               shift and go to state 35
    matrix_funcs                   shift and go to state 36
    constant                       shift and go to state 37
    matrix                         shift and go to state 39
    number                         shift and go to state 46

state 78

    (42) expression_relop -> expression RELOP_GE . expression
    (23) expression -> . expression_binop
    (24) expression -> . expression_relop
    (25) expression -> . expression_unary
    (26) expression -> . matrix_funcs
    (27) expression -> . constant
    (28) expression -> . ID
    (29) expression -> . matrix
    (30) expression -> . ( expression )
    (31) expression_binop -> . expression + expression
    (32) expression_binop -> . expression - expression
    (33) expression_binop -> . expression * expression
    (34) expression_binop -> . expression / expression
    (35) expression_binop -> . expression MATRIX_PLUS expression
    (36) expression_binop -> . expression MATRIX_SUB expression
    (37) expression_binop -> . expression MATRIX_MUL expression
    (38) expression_binop -> . expression MATRIX_DIV expression
    (39) expression_relop -> . expression RELOP_EQ expression
    (40) expression_relop -> . expression RELOP_GT expression
    (41) expression_relop -> . expression RELOP_LT expression
    (42) expression_relop -> . expression RELOP_GE expression
    (43) expression_relop -> . expression RELOP_LE expression
    (44) expression_relop -> . expression RELOP_NE expression
    (45) expression_unary -> . - expression
    (46) expression_unary -> . expression '
    (47) matrix_funcs -> . ZEROS ( expression_list )
    (48) matrix_funcs -> . ONES ( expression_list )
    (49) matrix_funcs -> . EYE ( expression_list )
    (50) constant -> . DT_STRING
    (51) constant -> . number
    (52) matrix -> . [ vectors ]
    (59) number -> . DT_INTEGER
    (60) number -> . DT_FLOAT

    ID              shift and go to state 38
    (               shift and go to state 40
    -               shift and go to state 41
    ZEROS           shift and go to state 42
    ONES            shift and go to state 43
    EYE             shift and go to state 44
    DT_STRING       shift and go to state 45
    [               shift and go to state 47
    DT_INTEGER      shift and go to state 48
    DT_FLOAT        shift and go to state 49

    expression                     shift and go to state 114
    expression_binop               shift and go to state 33
    expression_relop               shift and go to state 34
    expression_unary               shift and go to state 35
    matrix_funcs                   shift and go to state 36
    constant                       shift and go to state 37
    matrix                         shift and go to state 39
    number                         shift and go to state 46

state 79

    (43) expression_relop -> expression RELOP_LE . expression
    (23) expression -> . expression_binop
    (24) expression -> . expression_relop
    (25) expression -> . expression_unary
    (26) expression -> . matrix_funcs
    (27) expression -> . constant
    (28) expression -> . ID
    (29) expression -> . matrix
    (30) expression -> . ( expression )
    (31) expression_binop -> . expression + expression
    (32) expression_binop -> . expression - expression
    (33) expression_binop -> . expression * expression
    (34) expression_binop -> . expression / expression
    (35) expression_binop -> . expression MATRIX_PLUS expression
    (36) expression_binop -> . expression MATRIX_SUB expression
    (37) expression_binop -> . expression MATRIX_MUL expression
    (38) expression_binop -> . expression MATRIX_DIV expression
    (39) expression_relop -> . expression RELOP_EQ expression
    (40) expression_relop -> . expression RELOP_GT expression
    (41) expression_relop -> . expression RELOP_LT expression
    (42) expression_relop -> . expression RELOP_GE expression
    (43) expression_relop -> . expression RELOP_LE expression
    (44) expression_relop -> . expression RELOP_NE expression
    (45) expression_unary -> . - expression
    (46) expression_unary -> . expression '
    (47) matrix_funcs -> . ZEROS ( expression_list )
    (48) matrix_funcs -> . ONES ( expression_list )
    (49) matrix_funcs -> . EYE ( expression_list )
    (50) constant -> . DT_STRING
    (51) constant -> . number
    (52) matrix -> . [ vectors ]
    (59) number -> . DT_INTEGER
    (60) number -> . DT_FLOAT

    ID              shift and go to state 38
    (               shift and go to state 40
    -               shift and go to state 41
    ZEROS           shift and go to state 42
    ONES            shift and go to state 43
    EYE             shift and go to state 44
    DT_STRING       shift and go to state 45
    [               shift and go to state 47
    DT_INTEGER      shift and go to state 48
    DT_FLOAT        shift and go to state 49

    expression                     shift and go to state 115
    expression_binop               shift and go to state 33
    expression_relop               shift and go to state 34
    expression_unary               shift and go to state 35
    matrix_funcs                   shift and go to state 36
    constant                       shift and go to state 37
    matrix                         shift and go to state 39
    number                         shift and go to state 46

state 80

    (44) expression_relop -> expression RELOP_NE . expression
    (23) expression -> . expression_binop
    (24) expression -> . expression_relop
    (25) expression -> . expression_unary
    (26) expression -> . matrix_funcs
    (27) expression -> . constant
    (28) expression -> . ID
    (29) expression -> . matrix
    (30) expression -> . ( expression )
    (31) expression_binop -> . expression + expression
    (32) expression_binop -> . expression - expression
    (33) expression_binop -> . expression * expression
    (34) expression_binop -> . expression / expression
    (35) expression_binop -> . expression MATRIX_PLUS expression
    (36) expression_binop -> . expression MATRIX_SUB expression
    (37) expression_binop -> . expression MATRIX_MUL expression
    (38) expression_binop -> . expression MATRIX_DIV expression
    (39) expression_relop -> . expression RELOP_EQ expression
    (40) expression_relop -> . expression RELOP_GT expression
    (41) expression_relop -> . expression RELOP_LT expression
    (42) expression_relop -> . expression RELOP_GE expression
    (43) expression_relop -> . expression RELOP_LE expression
    (44) expression_relop -> . expression RELOP_NE expression
    (45) expression_unary -> . - expression
    (46) expression_unary -> . expression '
    (47) matrix_funcs -> . ZEROS ( expression_list )
    (48) matrix_funcs -> . ONES ( expression_list )
    (49) matrix_funcs -> . EYE ( expression_list )
    (50) constant -> . DT_STRING
    (51) constant -> . number
    (52) matrix -> . [ vectors ]
    (59) number -> . DT_INTEGER
    (60) number -> . DT_FLOAT

    ID              shift and go to state 38
    (               shift and go to state 40
    -               shift and go to state 41
    ZEROS           shift and go to state 42
    ONES            shift and go to state 43
    EYE             shift and go to state 44
    DT_STRING       shift and go to state 45
    [               shift and go to state 47
    DT_INTEGER      shift and go to state 48
    DT_FLOAT        shift and go to state 49

    expression                     shift and go to state 116
    expression_binop               shift and go to state 33
    expression_relop               shift and go to state 34
    expression_unary               shift and go to state 35
    matrix_funcs                   shift and go to state 36
    constant                       shift and go to state 37
    matrix                         shift and go to state 39
    number                         shift and go to state 46

state 81

    (46) expression_unary -> expression ' .

    +               reduce using rule 46 (expression_unary -> expression ' .)
    -               reduce using rule 46 (expression_unary -> expression ' .)
    *               reduce using rule 46 (expression_unary -> expression ' .)
    /               reduce using rule 46 (expression_unary -> expression ' .)
    MATRIX_PLUS     reduce using rule 46 (expression_unary -> expression ' .)
    MATRIX_SUB      reduce using rule 46 (expression_unary -> expression ' .)
    MATRIX_MUL      reduce using rule 46 (expression_unary -> expression ' .)
    MATRIX_DIV      reduce using rule 46 (expression_unary -> expression ' .)
    RELOP_EQ        reduce using rule 46 (expression_unary -> expression ' .)
    RELOP_GT        reduce using rule 46 (expression_unary -> expression ' .)
    RELOP_LT        reduce using rule 46 (expression_unary -> expression ' .)
    RELOP_GE        reduce using rule 46 (expression_unary -> expression ' .)
    RELOP_LE        reduce using rule 46 (expression_unary -> expression ' .)
    RELOP_NE        reduce using rule 46 (expression_unary -> expression ' .)
    '               reduce using rule 46 (expression_unary -> expression ' .)
    ;               reduce using rule 46 (expression_unary -> expression ' .)
    ,               reduce using rule 46 (expression_unary -> expression ' .)
    )               reduce using rule 46 (expression_unary -> expression ' .)


state 82

    (30) expression -> ( expression . )
    (31) expression_binop -> expression . + expression
    (32) expression_binop -> expression . - expression
    (33) expression_binop -> expression . * expression
    (34) expression_binop -> expression . / expression
    (35) expression_binop -> expression . MATRIX_PLUS expression
    (36) expression_binop -> expression . MATRIX_SUB expression
    (37) expression_binop -> expression . MATRIX_MUL expression
    (38) expression_binop -> expression . MATRIX_DIV expression
    (39) expression_relop -> expression . RELOP_EQ expression
    (40) expression_relop -> expression . RELOP_GT expression
    (41) expression_relop -> expression . RELOP_LT expression
    (42) expression_relop -> expression . RELOP_GE expression
    (43) expression_relop -> expression . RELOP_LE expression
    (44) expression_relop -> expression . RELOP_NE expression
    (46) expression_unary -> expression . '

    )               shift and go to state 117
    +               shift and go to state 67
    -               shift and go to state 68
    *               shift and go to state 69
    /               shift and go to state 70
    MATRIX_PLUS     shift and go to state 71
    MATRIX_SUB      shift and go to state 72
    MATRIX_MUL      shift and go to state 73
    MATRIX_DIV      shift and go to state 74
    RELOP_EQ        shift and go to state 75
    RELOP_GT        shift and go to state 76
    RELOP_LT        shift and go to state 77
    RELOP_GE        shift and go to state 78
    RELOP_LE        shift and go to state 79
    RELOP_NE        shift and go to state 80
    '               shift and go to state 81


state 83

    (45) expression_unary -> - expression .
    (31) expression_binop -> expression . + expression
    (32) expression_binop -> expression . - expression
    (33) expression_binop -> expression . * expression
    (34) expression_binop -> expression . / expression
    (35) expression_binop -> expression . MATRIX_PLUS expression
    (36) expression_binop -> expression . MATRIX_SUB expression
    (37) expression_binop -> expression . MATRIX_MUL expression
    (38) expression_binop -> expression . MATRIX_DIV expression
    (39) expression_relop -> expression . RELOP_EQ expression
    (40) expression_relop -> expression . RELOP_GT expression
    (41) expression_relop -> expression . RELOP_LT expression
    (42) expression_relop -> expression . RELOP_GE expression
    (43) expression_relop -> expression . RELOP_LE expression
    (44) expression_relop -> expression . RELOP_NE expression
    (46) expression_unary -> expression . '

    +               reduce using rule 45 (expression_unary -> - expression .)
    -               reduce using rule 45 (expression_unary -> - expression .)
    *               reduce using rule 45 (expression_unary -> - expression .)
    /               reduce using rule 45 (expression_unary -> - expression .)
    MATRIX_PLUS     reduce using rule 45 (expression_unary -> - expression .)
    MATRIX_SUB      reduce using rule 45 (expression_unary -> - expression .)
    MATRIX_MUL      reduce using rule 45 (expression_unary -> - expression .)
    MATRIX_DIV      reduce using rule 45 (expression_unary -> - expression .)
    RELOP_EQ        reduce using rule 45 (expression_unary -> - expression .)
    RELOP_GT        reduce using rule 45 (expression_unary -> - expression .)
    RELOP_LT        reduce using rule 45 (expression_unary -> - expression .)
    RELOP_GE        reduce using rule 45 (expression_unary -> - expression .)
    RELOP_LE        reduce using rule 45 (expression_unary -> - expression .)
    RELOP_NE        reduce using rule 45 (expression_unary -> - expression .)
    ;               reduce using rule 45 (expression_unary -> - expression .)
    ,               reduce using rule 45 (expression_unary -> - expression .)
    )               reduce using rule 45 (expression_unary -> - expression .)
    '               shift and go to state 81

  ! '               [ reduce using rule 45 (expression_unary -> - expression .) ]
  ! +               [ shift and go to state 67 ]
  ! -               [ shift and go to state 68 ]
  ! *               [ shift and go to state 69 ]
  ! /               [ shift and go to state 70 ]
  ! MATRIX_PLUS     [ shift and go to state 71 ]
  ! MATRIX_SUB      [ shift and go to state 72 ]
  ! MATRIX_MUL      [ shift and go to state 73 ]
  ! MATRIX_DIV      [ shift and go to state 74 ]
  ! RELOP_EQ        [ shift and go to state 75 ]
  ! RELOP_GT        [ shift and go to state 76 ]
  ! RELOP_LT        [ shift and go to state 77 ]
  ! RELOP_GE        [ shift and go to state 78 ]
  ! RELOP_LE        [ shift and go to state 79 ]
  ! RELOP_NE        [ shift and go to state 80 ]


state 84

    (47) matrix_funcs -> ZEROS ( . expression_list )
    (68) expression_list -> . expression_list , expression
    (69) expression_list -> . expression
    (23) expression -> . expression_binop
    (24) expression -> . expression_relop
    (25) expression -> . expression_unary
    (26) expression -> . matrix_funcs
    (27) expression -> . constant
    (28) expression -> . ID
    (29) expression -> . matrix
    (30) expression -> . ( expression )
    (31) expression_binop -> . expression + expression
    (32) expression_binop -> . expression - expression
    (33) expression_binop -> . expression * expression
    (34) expression_binop -> . expression / expression
    (35) expression_binop -> . expression MATRIX_PLUS expression
    (36) expression_binop -> . expression MATRIX_SUB expression
    (37) expression_binop -> . expression MATRIX_MUL expression
    (38) expression_binop -> . expression MATRIX_DIV expression
    (39) expression_relop -> . expression RELOP_EQ expression
    (40) expression_relop -> . expression RELOP_GT expression
    (41) expression_relop -> . expression RELOP_LT expression
    (42) expression_relop -> . expression RELOP_GE expression
    (43) expression_relop -> . expression RELOP_LE expression
    (44) expression_relop -> . expression RELOP_NE expression
    (45) expression_unary -> . - expression
    (46) expression_unary -> . expression '
    (47) matrix_funcs -> . ZEROS ( expression_list )
    (48) matrix_funcs -> . ONES ( expression_list )
    (49) matrix_funcs -> . EYE ( expression_list )
    (50) constant -> . DT_STRING
    (51) constant -> . number
    (52) matrix -> . [ vectors ]
    (59) number -> . DT_INTEGER
    (60) number -> . DT_FLOAT

    ID              shift and go to state 38
    (               shift and go to state 40
    -               shift and go to state 41
    ZEROS           shift and go to state 42
    ONES            shift and go to state 43
    EYE             shift and go to state 44
    DT_STRING       shift and go to state 45
    [               shift and go to state 47
    DT_INTEGER      shift and go to state 48
    DT_FLOAT        shift and go to state 49

    expression_list                shift and go to state 118
    expression                     shift and go to state 32
    expression_binop               shift and go to state 33
    expression_relop               shift and go to state 34
    expression_unary               shift and go to state 35
    matrix_funcs                   shift and go to state 36
    constant                       shift and go to state 37
    matrix                         shift and go to state 39
    number                         shift and go to state 46

state 85

    (48) matrix_funcs -> ONES ( . expression_list )
    (68) expression_list -> . expression_list , expression
    (69) expression_list -> . expression
    (23) expression -> . expression_binop
    (24) expression -> . expression_relop
    (25) expression -> . expression_unary
    (26) expression -> . matrix_funcs
    (27) expression -> . constant
    (28) expression -> . ID
    (29) expression -> . matrix
    (30) expression -> . ( expression )
    (31) expression_binop -> . expression + expression
    (32) expression_binop -> . expression - expression
    (33) expression_binop -> . expression * expression
    (34) expression_binop -> . expression / expression
    (35) expression_binop -> . expression MATRIX_PLUS expression
    (36) expression_binop -> . expression MATRIX_SUB expression
    (37) expression_binop -> . expression MATRIX_MUL expression
    (38) expression_binop -> . expression MATRIX_DIV expression
    (39) expression_relop -> . expression RELOP_EQ expression
    (40) expression_relop -> . expression RELOP_GT expression
    (41) expression_relop -> . expression RELOP_LT expression
    (42) expression_relop -> . expression RELOP_GE expression
    (43) expression_relop -> . expression RELOP_LE expression
    (44) expression_relop -> . expression RELOP_NE expression
    (45) expression_unary -> . - expression
    (46) expression_unary -> . expression '
    (47) matrix_funcs -> . ZEROS ( expression_list )
    (48) matrix_funcs -> . ONES ( expression_list )
    (49) matrix_funcs -> . EYE ( expression_list )
    (50) constant -> . DT_STRING
    (51) constant -> . number
    (52) matrix -> . [ vectors ]
    (59) number -> . DT_INTEGER
    (60) number -> . DT_FLOAT

    ID              shift and go to state 38
    (               shift and go to state 40
    -               shift and go to state 41
    ZEROS           shift and go to state 42
    ONES            shift and go to state 43
    EYE             shift and go to state 44
    DT_STRING       shift and go to state 45
    [               shift and go to state 47
    DT_INTEGER      shift and go to state 48
    DT_FLOAT        shift and go to state 49

    expression_list                shift and go to state 119
    expression                     shift and go to state 32
    expression_binop               shift and go to state 33
    expression_relop               shift and go to state 34
    expression_unary               shift and go to state 35
    matrix_funcs                   shift and go to state 36
    constant                       shift and go to state 37
    matrix                         shift and go to state 39
    number                         shift and go to state 46

state 86

    (49) matrix_funcs -> EYE ( . expression_list )
    (68) expression_list -> . expression_list , expression
    (69) expression_list -> . expression
    (23) expression -> . expression_binop
    (24) expression -> . expression_relop
    (25) expression -> . expression_unary
    (26) expression -> . matrix_funcs
    (27) expression -> . constant
    (28) expression -> . ID
    (29) expression -> . matrix
    (30) expression -> . ( expression )
    (31) expression_binop -> . expression + expression
    (32) expression_binop -> . expression - expression
    (33) expression_binop -> . expression * expression
    (34) expression_binop -> . expression / expression
    (35) expression_binop -> . expression MATRIX_PLUS expression
    (36) expression_binop -> . expression MATRIX_SUB expression
    (37) expression_binop -> . expression MATRIX_MUL expression
    (38) expression_binop -> . expression MATRIX_DIV expression
    (39) expression_relop -> . expression RELOP_EQ expression
    (40) expression_relop -> . expression RELOP_GT expression
    (41) expression_relop -> . expression RELOP_LT expression
    (42) expression_relop -> . expression RELOP_GE expression
    (43) expression_relop -> . expression RELOP_LE expression
    (44) expression_relop -> . expression RELOP_NE expression
    (45) expression_unary -> . - expression
    (46) expression_unary -> . expression '
    (47) matrix_funcs -> . ZEROS ( expression_list )
    (48) matrix_funcs -> . ONES ( expression_list )
    (49) matrix_funcs -> . EYE ( expression_list )
    (50) constant -> . DT_STRING
    (51) constant -> . number
    (52) matrix -> . [ vectors ]
    (59) number -> . DT_INTEGER
    (60) number -> . DT_FLOAT

    ID              shift and go to state 38
    (               shift and go to state 40
    -               shift and go to state 41
    ZEROS           shift and go to state 42
    ONES            shift and go to state 43
    EYE             shift and go to state 44
    DT_STRING       shift and go to state 45
    [               shift and go to state 47
    DT_INTEGER      shift and go to state 48
    DT_FLOAT        shift and go to state 49

    expression_list                shift and go to state 120
    expression                     shift and go to state 32
    expression_binop               shift and go to state 33
    expression_relop               shift and go to state 34
    expression_unary               shift and go to state 35
    matrix_funcs                   shift and go to state 36
    constant                       shift and go to state 37
    matrix                         shift and go to state 39
    number                         shift and go to state 46

state 87

    (52) matrix -> [ vectors . ]
    (54) vectors -> vectors . , vector

    ]               shift and go to state 121
    ,               shift and go to state 122


state 88

    (53) vectors -> vector .

    ]               reduce using rule 53 (vectors -> vector .)
    ,               reduce using rule 53 (vectors -> vector .)


state 89

    (66) return_statement -> RETURN expression ; .

    IF              reduce using rule 66 (return_statement -> RETURN expression ; .)
    PRINT           reduce using rule 66 (return_statement -> RETURN expression ; .)
    BREAK           reduce using rule 66 (return_statement -> RETURN expression ; .)
    CONTINUE        reduce using rule 66 (return_statement -> RETURN expression ; .)
    RETURN          reduce using rule 66 (return_statement -> RETURN expression ; .)
    WHILE           reduce using rule 66 (return_statement -> RETURN expression ; .)
    FOR             reduce using rule 66 (return_statement -> RETURN expression ; .)
    {               reduce using rule 66 (return_statement -> RETURN expression ; .)
    ID              reduce using rule 66 (return_statement -> RETURN expression ; .)
    $end            reduce using rule 66 (return_statement -> RETURN expression ; .)
    }               reduce using rule 66 (return_statement -> RETURN expression ; .)
    ELSE            reduce using rule 66 (return_statement -> RETURN expression ; .)


state 90

    (70) while_loop -> WHILE ( expression . ) instruction
    (31) expression_binop -> expression . + expression
    (32) expression_binop -> expression . - expression
    (33) expression_binop -> expression . * expression
    (34) expression_binop -> expression . / expression
    (35) expression_binop -> expression . MATRIX_PLUS expression
    (36) expression_binop -> expression . MATRIX_SUB expression
    (37) expression_binop -> expression . MATRIX_MUL expression
    (38) expression_binop -> expression . MATRIX_DIV expression
    (39) expression_relop -> expression . RELOP_EQ expression
    (40) expression_relop -> expression . RELOP_GT expression
    (41) expression_relop -> expression . RELOP_LT expression
    (42) expression_relop -> expression . RELOP_GE expression
    (43) expression_relop -> expression . RELOP_LE expression
    (44) expression_relop -> expression . RELOP_NE expression
    (46) expression_unary -> expression . '

    )               shift and go to state 123
    +               shift and go to state 67
    -               shift and go to state 68
    *               shift and go to state 69
    /               shift and go to state 70
    MATRIX_PLUS     shift and go to state 71
    MATRIX_SUB      shift and go to state 72
    MATRIX_MUL      shift and go to state 73
    MATRIX_DIV      shift and go to state 74
    RELOP_EQ        shift and go to state 75
    RELOP_GT        shift and go to state 76
    RELOP_LT        shift and go to state 77
    RELOP_GE        shift and go to state 78
    RELOP_LE        shift and go to state 79
    RELOP_NE        shift and go to state 80
    '               shift and go to state 81


state 91

    (71) for_loop -> FOR ID = . range_value : range_value instruction
    (72) range_value -> . DT_INTEGER
    (73) range_value -> . ID

    DT_INTEGER      shift and go to state 126
    ID              shift and go to state 124

    range_value                    shift and go to state 125

state 92

    (55) vector -> [ numbers . ]
    (57) numbers -> numbers . , number

    ]               shift and go to state 127
    ,               shift and go to state 128


state 93

    (56) vector -> [ ] .

    =               reduce using rule 56 (vector -> [ ] .)
    MUL_ASSIGN      reduce using rule 56 (vector -> [ ] .)
    DIV_ASSIGN      reduce using rule 56 (vector -> [ ] .)
    PLUS_ASSIGN     reduce using rule 56 (vector -> [ ] .)
    SUB_ASSIGN      reduce using rule 56 (vector -> [ ] .)
    ]               reduce using rule 56 (vector -> [ ] .)
    ,               reduce using rule 56 (vector -> [ ] .)


state 94

    (58) numbers -> number .

    ]               reduce using rule 58 (numbers -> number .)
    ,               reduce using rule 58 (numbers -> number .)


state 95

    (15) instruction_block -> { instructions } .

    IF              reduce using rule 15 (instruction_block -> { instructions } .)
    PRINT           reduce using rule 15 (instruction_block -> { instructions } .)
    BREAK           reduce using rule 15 (instruction_block -> { instructions } .)
    CONTINUE        reduce using rule 15 (instruction_block -> { instructions } .)
    RETURN          reduce using rule 15 (instruction_block -> { instructions } .)
    WHILE           reduce using rule 15 (instruction_block -> { instructions } .)
    FOR             reduce using rule 15 (instruction_block -> { instructions } .)
    {               reduce using rule 15 (instruction_block -> { instructions } .)
    ID              reduce using rule 15 (instruction_block -> { instructions } .)
    $end            reduce using rule 15 (instruction_block -> { instructions } .)
    }               reduce using rule 15 (instruction_block -> { instructions } .)
    ELSE            reduce using rule 15 (instruction_block -> { instructions } .)


state 96

    (16) assignment -> assign_id = expression ; .

    IF              reduce using rule 16 (assignment -> assign_id = expression ; .)
    PRINT           reduce using rule 16 (assignment -> assign_id = expression ; .)
    BREAK           reduce using rule 16 (assignment -> assign_id = expression ; .)
    CONTINUE        reduce using rule 16 (assignment -> assign_id = expression ; .)
    RETURN          reduce using rule 16 (assignment -> assign_id = expression ; .)
    WHILE           reduce using rule 16 (assignment -> assign_id = expression ; .)
    FOR             reduce using rule 16 (assignment -> assign_id = expression ; .)
    {               reduce using rule 16 (assignment -> assign_id = expression ; .)
    ID              reduce using rule 16 (assignment -> assign_id = expression ; .)
    $end            reduce using rule 16 (assignment -> assign_id = expression ; .)
    }               reduce using rule 16 (assignment -> assign_id = expression ; .)
    ELSE            reduce using rule 16 (assignment -> assign_id = expression ; .)


state 97

    (17) assignment -> assign_id MUL_ASSIGN expression ; .

    IF              reduce using rule 17 (assignment -> assign_id MUL_ASSIGN expression ; .)
    PRINT           reduce using rule 17 (assignment -> assign_id MUL_ASSIGN expression ; .)
    BREAK           reduce using rule 17 (assignment -> assign_id MUL_ASSIGN expression ; .)
    CONTINUE        reduce using rule 17 (assignment -> assign_id MUL_ASSIGN expression ; .)
    RETURN          reduce using rule 17 (assignment -> assign_id MUL_ASSIGN expression ; .)
    WHILE           reduce using rule 17 (assignment -> assign_id MUL_ASSIGN expression ; .)
    FOR             reduce using rule 17 (assignment -> assign_id MUL_ASSIGN expression ; .)
    {               reduce using rule 17 (assignment -> assign_id MUL_ASSIGN expression ; .)
    ID              reduce using rule 17 (assignment -> assign_id MUL_ASSIGN expression ; .)
    $end            reduce using rule 17 (assignment -> assign_id MUL_ASSIGN expression ; .)
    }               reduce using rule 17 (assignment -> assign_id MUL_ASSIGN expression ; .)
    ELSE            reduce using rule 17 (assignment -> assign_id MUL_ASSIGN expression ; .)


state 98

    (18) assignment -> assign_id DIV_ASSIGN expression ; .

    IF              reduce using rule 18 (assignment -> assign_id DIV_ASSIGN expression ; .)
    PRINT           reduce using rule 18 (assignment -> assign_id DIV_ASSIGN expression ; .)
    BREAK           reduce using rule 18 (assignment -> assign_id DIV_ASSIGN expression ; .)
    CONTINUE        reduce using rule 18 (assignment -> assign_id DIV_ASSIGN expression ; .)
    RETURN          reduce using rule 18 (assignment -> assign_id DIV_ASSIGN expression ; .)
    WHILE           reduce using rule 18 (assignment -> assign_id DIV_ASSIGN expression ; .)
    FOR             reduce using rule 18 (assignment -> assign_id DIV_ASSIGN expression ; .)
    {               reduce using rule 18 (assignment -> assign_id DIV_ASSIGN expression ; .)
    ID              reduce using rule 18 (assignment -> assign_id DIV_ASSIGN expression ; .)
    $end            reduce using rule 18 (assignment -> assign_id DIV_ASSIGN expression ; .)
    }               reduce using rule 18 (assignment -> assign_id DIV_ASSIGN expression ; .)
    ELSE            reduce using rule 18 (assignment -> assign_id DIV_ASSIGN expression ; .)


state 99

    (19) assignment -> assign_id PLUS_ASSIGN expression ; .

    IF              reduce using rule 19 (assignment -> assign_id PLUS_ASSIGN expression ; .)
    PRINT           reduce using rule 19 (assignment -> assign_id PLUS_ASSIGN expression ; .)
    BREAK           reduce using rule 19 (assignment -> assign_id PLUS_ASSIGN expression ; .)
    CONTINUE        reduce using rule 19 (assignment -> assign_id PLUS_ASSIGN expression ; .)
    RETURN          reduce using rule 19 (assignment -> assign_id PLUS_ASSIGN expression ; .)
    WHILE           reduce using rule 19 (assignment -> assign_id PLUS_ASSIGN expression ; .)
    FOR             reduce using rule 19 (assignment -> assign_id PLUS_ASSIGN expression ; .)
    {               reduce using rule 19 (assignment -> assign_id PLUS_ASSIGN expression ; .)
    ID              reduce using rule 19 (assignment -> assign_id PLUS_ASSIGN expression ; .)
    $end            reduce using rule 19 (assignment -> assign_id PLUS_ASSIGN expression ; .)
    }               reduce using rule 19 (assignment -> assign_id PLUS_ASSIGN expression ; .)
    ELSE            reduce using rule 19 (assignment -> assign_id PLUS_ASSIGN expression ; .)


state 100

    (20) assignment -> assign_id SUB_ASSIGN expression ; .

    IF              reduce using rule 20 (assignment -> assign_id SUB_ASSIGN expression ; .)
    PRINT           reduce using rule 20 (assignment -> assign_id SUB_ASSIGN expression ; .)
    BREAK           reduce using rule 20 (assignment -> assign_id SUB_ASSIGN expression ; .)
    CONTINUE        reduce using rule 20 (assignment -> assign_id SUB_ASSIGN expression ; .)
    RETURN          reduce using rule 20 (assignment -> assign_id SUB_ASSIGN expression ; .)
    WHILE           reduce using rule 20 (assignment -> assign_id SUB_ASSIGN expression ; .)
    FOR             reduce using rule 20 (assignment -> assign_id SUB_ASSIGN expression ; .)
    {               reduce using rule 20 (assignment -> assign_id SUB_ASSIGN expression ; .)
    ID              reduce using rule 20 (assignment -> assign_id SUB_ASSIGN expression ; .)
    $end            reduce using rule 20 (assignment -> assign_id SUB_ASSIGN expression ; .)
    }               reduce using rule 20 (assignment -> assign_id SUB_ASSIGN expression ; .)
    ELSE            reduce using rule 20 (assignment -> assign_id SUB_ASSIGN expression ; .)


state 101

    (61) conditional_statement -> IF ( expression ) . instruction
    (62) conditional_statement -> IF ( expression ) . instruction ELSE instruction
    (7) instruction -> . assignment
    (8) instruction -> . conditional_statement
    (9) instruction -> . print_statement
    (10) instruction -> . jump_statement
    (11) instruction -> . return_statement
    (12) instruction -> . while_loop
    (13) instruction -> . for_loop
    (14) instruction -> . instruction_block
    (16) assignment -> . assign_id = expression ;
    (17) assignment -> . assign_id MUL_ASSIGN expression ;
    (18) assignment -> . assign_id DIV_ASSIGN expression ;
    (19) assignment -> . assign_id PLUS_ASSIGN expression ;
    (20) assignment -> . assign_id SUB_ASSIGN expression ;
    (61) conditional_statement -> . IF ( expression ) instruction
    (62) conditional_statement -> . IF ( expression ) instruction ELSE instruction
    (67) print_statement -> . PRINT expression_list ;
    (63) jump_statement -> . BREAK ;
    (64) jump_statement -> . CONTINUE ;
    (65) return_statement -> . RETURN ;
    (66) return_statement -> . RETURN expression ;
    (70) while_loop -> . WHILE ( expression ) instruction
    (71) for_loop -> . FOR ID = range_value : range_value instruction
    (15) instruction_block -> . { instructions }
    (21) assign_id -> . ID
    (22) assign_id -> . ID vector

    IF              shift and go to state 15
    PRINT           shift and go to state 16
    BREAK           shift and go to state 17
    CONTINUE        shift and go to state 18
    RETURN          shift and go to state 19
    WHILE           shift and go to state 20
    FOR             shift and go to state 21
    {               shift and go to state 23
    ID              shift and go to state 22

    instruction                    shift and go to state 129
    assignment                     shift and go to state 6
    conditional_statement          shift and go to state 7
    print_statement                shift and go to state 8
    jump_statement                 shift and go to state 9
    return_statement               shift and go to state 10
    while_loop                     shift and go to state 11
    for_loop                       shift and go to state 12
    instruction_block              shift and go to state 13
    assign_id                      shift and go to state 14

state 102

    (68) expression_list -> expression_list , expression .
    (31) expression_binop -> expression . + expression
    (32) expression_binop -> expression . - expression
    (33) expression_binop -> expression . * expression
    (34) expression_binop -> expression . / expression
    (35) expression_binop -> expression . MATRIX_PLUS expression
    (36) expression_binop -> expression . MATRIX_SUB expression
    (37) expression_binop -> expression . MATRIX_MUL expression
    (38) expression_binop -> expression . MATRIX_DIV expression
    (39) expression_relop -> expression . RELOP_EQ expression
    (40) expression_relop -> expression . RELOP_GT expression
    (41) expression_relop -> expression . RELOP_LT expression
    (42) expression_relop -> expression . RELOP_GE expression
    (43) expression_relop -> expression . RELOP_LE expression
    (44) expression_relop -> expression . RELOP_NE expression
    (46) expression_unary -> expression . '

    ;               reduce using rule 68 (expression_list -> expression_list , expression .)
    ,               reduce using rule 68 (expression_list -> expression_list , expression .)
    )               reduce using rule 68 (expression_list -> expression_list , expression .)
    +               shift and go to state 67
    -               shift and go to state 68
    *               shift and go to state 69
    /               shift and go to state 70
    MATRIX_PLUS     shift and go to state 71
    MATRIX_SUB      shift and go to state 72
    MATRIX_MUL      shift and go to state 73
    MATRIX_DIV      shift and go to state 74
    RELOP_EQ        shift and go to state 75
    RELOP_GT        shift and go to state 76
    RELOP_LT        shift and go to state 77
    RELOP_GE        shift and go to state 78
    RELOP_LE        shift and go to state 79
    RELOP_NE        shift and go to state 80
    '               shift and go to state 81


state 103

    (31) expression_binop -> expression + expression .
    (31) expression_binop -> expression . + expression
    (32) expression_binop -> expression . - expression
    (33) expression_binop -> expression . * expression
    (34) expression_binop -> expression . / expression
    (35) expression_binop -> expression . MATRIX_PLUS expression
    (36) expression_binop -> expression . MATRIX_SUB expression
    (37) expression_binop -> expression . MATRIX_MUL expression
    (38) expression_binop -> expression . MATRIX_DIV expression
    (39) expression_relop -> expression . RELOP_EQ expression
    (40) expression_relop -> expression . RELOP_GT expression
    (41) expression_relop -> expression . RELOP_LT expression
    (42) expression_relop -> expression . RELOP_GE expression
    (43) expression_relop -> expression . RELOP_LE expression
    (44) expression_relop -> expression . RELOP_NE expression
    (46) expression_unary -> expression . '

    +               reduce using rule 31 (expression_binop -> expression + expression .)
    -               reduce using rule 31 (expression_binop -> expression + expression .)
    RELOP_EQ        reduce using rule 31 (expression_binop -> expression + expression .)
    RELOP_GT        reduce using rule 31 (expression_binop -> expression + expression .)
    RELOP_LT        reduce using rule 31 (expression_binop -> expression + expression .)
    RELOP_GE        reduce using rule 31 (expression_binop -> expression + expression .)
    RELOP_LE        reduce using rule 31 (expression_binop -> expression + expression .)
    RELOP_NE        reduce using rule 31 (expression_binop -> expression + expression .)
    ;               reduce using rule 31 (expression_binop -> expression + expression .)
    ,               reduce using rule 31 (expression_binop -> expression + expression .)
    )               reduce using rule 31 (expression_binop -> expression + expression .)
    *               shift and go to state 69
    /               shift and go to state 70
    MATRIX_PLUS     shift and go to state 71
    MATRIX_SUB      shift and go to state 72
    MATRIX_MUL      shift and go to state 73
    MATRIX_DIV      shift and go to state 74
    '               shift and go to state 81

  ! *               [ reduce using rule 31 (expression_binop -> expression + expression .) ]
  ! /               [ reduce using rule 31 (expression_binop -> expression + expression .) ]
  ! MATRIX_PLUS     [ reduce using rule 31 (expression_binop -> expression + expression .) ]
  ! MATRIX_SUB      [ reduce using rule 31 (expression_binop -> expression + expression .) ]
  ! MATRIX_MUL      [ reduce using rule 31 (expression_binop -> expression + expression .) ]
  ! MATRIX_DIV      [ reduce using rule 31 (expression_binop -> expression + expression .) ]
  ! '               [ reduce using rule 31 (expression_binop -> expression + expression .) ]
  ! +               [ shift and go to state 67 ]
  ! -               [ shift and go to state 68 ]
  ! RELOP_EQ        [ shift and go to state 75 ]
  ! RELOP_GT        [ shift and go to state 76 ]
  ! RELOP_LT        [ shift and go to state 77 ]
  ! RELOP_GE        [ shift and go to state 78 ]
  ! RELOP_LE        [ shift and go to state 79 ]
  ! RELOP_NE        [ shift and go to state 80 ]


state 104

    (32) expression_binop -> expression - expression .
    (31) expression_binop -> expression . + expression
    (32) expression_binop -> expression . - expression
    (33) expression_binop -> expression . * expression
    (34) expression_binop -> expression . / expression
    (35) expression_binop -> expression . MATRIX_PLUS expression
    (36) expression_binop -> expression . MATRIX_SUB expression
    (37) expression_binop -> expression . MATRIX_MUL expression
    (38) expression_binop -> expression . MATRIX_DIV expression
    (39) expression_relop -> expression . RELOP_EQ expression
    (40) expression_relop -> expression . RELOP_GT expression
    (41) expression_relop -> expression . RELOP_LT expression
    (42) expression_relop -> expression . RELOP_GE expression
    (43) expression_relop -> expression . RELOP_LE expression
    (44) expression_relop -> expression . RELOP_NE expression
    (46) expression_unary -> expression . '

    +               reduce using rule 32 (expression_binop -> expression - expression .)
    -               reduce using rule 32 (expression_binop -> expression - expression .)
    RELOP_EQ        reduce using rule 32 (expression_binop -> expression - expression .)
    RELOP_GT        reduce using rule 32 (expression_binop -> expression - expression .)
    RELOP_LT        reduce using rule 32 (expression_binop -> expression - expression .)
    RELOP_GE        reduce using rule 32 (expression_binop -> expression - expression .)
    RELOP_LE        reduce using rule 32 (expression_binop -> expression - expression .)
    RELOP_NE        reduce using rule 32 (expression_binop -> expression - expression .)
    ;               reduce using rule 32 (expression_binop -> expression - expression .)
    ,               reduce using rule 32 (expression_binop -> expression - expression .)
    )               reduce using rule 32 (expression_binop -> expression - expression .)
    *               shift and go to state 69
    /               shift and go to state 70
    MATRIX_PLUS     shift and go to state 71
    MATRIX_SUB      shift and go to state 72
    MATRIX_MUL      shift and go to state 73
    MATRIX_DIV      shift and go to state 74
    '               shift and go to state 81

  ! *               [ reduce using rule 32 (expression_binop -> expression - expression .) ]
  ! /               [ reduce using rule 32 (expression_binop -> expression - expression .) ]
  ! MATRIX_PLUS     [ reduce using rule 32 (expression_binop -> expression - expression .) ]
  ! MATRIX_SUB      [ reduce using rule 32 (expression_binop -> expression - expression .) ]
  ! MATRIX_MUL      [ reduce using rule 32 (expression_binop -> expression - expression .) ]
  ! MATRIX_DIV      [ reduce using rule 32 (expression_binop -> expression - expression .) ]
  ! '               [ reduce using rule 32 (expression_binop -> expression - expression .) ]
  ! +               [ shift and go to state 67 ]
  ! -               [ shift and go to state 68 ]
  ! RELOP_EQ        [ shift and go to state 75 ]
  ! RELOP_GT        [ shift and go to state 76 ]
  ! RELOP_LT        [ shift and go to state 77 ]
  ! RELOP_GE        [ shift and go to state 78 ]
  ! RELOP_LE        [ shift and go to state 79 ]
  ! RELOP_NE        [ shift and go to state 80 ]


state 105

    (33) expression_binop -> expression * expression .
    (31) expression_binop -> expression . + expression
    (32) expression_binop -> expression . - expression
    (33) expression_binop -> expression . * expression
    (34) expression_binop -> expression . / expression
    (35) expression_binop -> expression . MATRIX_PLUS expression
    (36) expression_binop -> expression . MATRIX_SUB expression
    (37) expression_binop -> expression . MATRIX_MUL expression
    (38) expression_binop -> expression . MATRIX_DIV expression
    (39) expression_relop -> expression . RELOP_EQ expression
    (40) expression_relop -> expression . RELOP_GT expression
    (41) expression_relop -> expression . RELOP_LT expression
    (42) expression_relop -> expression . RELOP_GE expression
    (43) expression_relop -> expression . RELOP_LE expression
    (44) expression_relop -> expression . RELOP_NE expression
    (46) expression_unary -> expression . '

    +               reduce using rule 33 (expression_binop -> expression * expression .)
    -               reduce using rule 33 (expression_binop -> expression * expression .)
    *               reduce using rule 33 (expression_binop -> expression * expression .)
    /               reduce using rule 33 (expression_binop -> expression * expression .)
    MATRIX_PLUS     reduce using rule 33 (expression_binop -> expression * expression .)
    MATRIX_SUB      reduce using rule 33 (expression_binop -> expression * expression .)
    RELOP_EQ        reduce using rule 33 (expression_binop -> expression * expression .)
    RELOP_GT        reduce using rule 33 (expression_binop -> expression * expression .)
    RELOP_LT        reduce using rule 33 (expression_binop -> expression * expression .)
    RELOP_GE        reduce using rule 33 (expression_binop -> expression * expression .)
    RELOP_LE        reduce using rule 33 (expression_binop -> expression * expression .)
    RELOP_NE        reduce using rule 33 (expression_binop -> expression * expression .)
    ;               reduce using rule 33 (expression_binop -> expression * expression .)
    ,               reduce using rule 33 (expression_binop -> expression * expression .)
    )               reduce using rule 33 (expression_binop -> expression * expression .)
    MATRIX_MUL      shift and go to state 73
    MATRIX_DIV      shift and go to state 74
    '               shift and go to state 81

  ! MATRIX_MUL      [ reduce using rule 33 (expression_binop -> expression * expression .) ]
  ! MATRIX_DIV      [ reduce using rule 33 (expression_binop -> expression * expression .) ]
  ! '               [ reduce using rule 33 (expression_binop -> expression * expression .) ]
  ! +               [ shift and go to state 67 ]
  ! -               [ shift and go to state 68 ]
  ! *               [ shift and go to state 69 ]
  ! /               [ shift and go to state 70 ]
  ! MATRIX_PLUS     [ shift and go to state 71 ]
  ! MATRIX_SUB      [ shift and go to state 72 ]
  ! RELOP_EQ        [ shift and go to state 75 ]
  ! RELOP_GT        [ shift and go to state 76 ]
  ! RELOP_LT        [ shift and go to state 77 ]
  ! RELOP_GE        [ shift and go to state 78 ]
  ! RELOP_LE        [ shift and go to state 79 ]
  ! RELOP_NE        [ shift and go to state 80 ]


state 106

    (34) expression_binop -> expression / expression .
    (31) expression_binop -> expression . + expression
    (32) expression_binop -> expression . - expression
    (33) expression_binop -> expression . * expression
    (34) expression_binop -> expression . / expression
    (35) expression_binop -> expression . MATRIX_PLUS expression
    (36) expression_binop -> expression . MATRIX_SUB expression
    (37) expression_binop -> expression . MATRIX_MUL expression
    (38) expression_binop -> expression . MATRIX_DIV expression
    (39) expression_relop -> expression . RELOP_EQ expression
    (40) expression_relop -> expression . RELOP_GT expression
    (41) expression_relop -> expression . RELOP_LT expression
    (42) expression_relop -> expression . RELOP_GE expression
    (43) expression_relop -> expression . RELOP_LE expression
    (44) expression_relop -> expression . RELOP_NE expression
    (46) expression_unary -> expression . '

    +               reduce using rule 34 (expression_binop -> expression / expression .)
    -               reduce using rule 34 (expression_binop -> expression / expression .)
    *               reduce using rule 34 (expression_binop -> expression / expression .)
    /               reduce using rule 34 (expression_binop -> expression / expression .)
    MATRIX_PLUS     reduce using rule 34 (expression_binop -> expression / expression .)
    MATRIX_SUB      reduce using rule 34 (expression_binop -> expression / expression .)
    RELOP_EQ        reduce using rule 34 (expression_binop -> expression / expression .)
    RELOP_GT        reduce using rule 34 (expression_binop -> expression / expression .)
    RELOP_LT        reduce using rule 34 (expression_binop -> expression / expression .)
    RELOP_GE        reduce using rule 34 (expression_binop -> expression / expression .)
    RELOP_LE        reduce using rule 34 (expression_binop -> expression / expression .)
    RELOP_NE        reduce using rule 34 (expression_binop -> expression / expression .)
    ;               reduce using rule 34 (expression_binop -> expression / expression .)
    ,               reduce using rule 34 (expression_binop -> expression / expression .)
    )               reduce using rule 34 (expression_binop -> expression / expression .)
    MATRIX_MUL      shift and go to state 73
    MATRIX_DIV      shift and go to state 74
    '               shift and go to state 81

  ! MATRIX_MUL      [ reduce using rule 34 (expression_binop -> expression / expression .) ]
  ! MATRIX_DIV      [ reduce using rule 34 (expression_binop -> expression / expression .) ]
  ! '               [ reduce using rule 34 (expression_binop -> expression / expression .) ]
  ! +               [ shift and go to state 67 ]
  ! -               [ shift and go to state 68 ]
  ! *               [ shift and go to state 69 ]
  ! /               [ shift and go to state 70 ]
  ! MATRIX_PLUS     [ shift and go to state 71 ]
  ! MATRIX_SUB      [ shift and go to state 72 ]
  ! RELOP_EQ        [ shift and go to state 75 ]
  ! RELOP_GT        [ shift and go to state 76 ]
  ! RELOP_LT        [ shift and go to state 77 ]
  ! RELOP_GE        [ shift and go to state 78 ]
  ! RELOP_LE        [ shift and go to state 79 ]
  ! RELOP_NE        [ shift and go to state 80 ]


state 107

    (35) expression_binop -> expression MATRIX_PLUS expression .
    (31) expression_binop -> expression . + expression
    (32) expression_binop -> expression . - expression
    (33) expression_binop -> expression . * expression
    (34) expression_binop -> expression . / expression
    (35) expression_binop -> expression . MATRIX_PLUS expression
    (36) expression_binop -> expression . MATRIX_SUB expression
    (37) expression_binop -> expression . MATRIX_MUL expression
    (38) expression_binop -> expression . MATRIX_DIV expression
    (39) expression_relop -> expression . RELOP_EQ expression
    (40) expression_relop -> expression . RELOP_GT expression
    (41) expression_relop -> expression . RELOP_LT expression
    (42) expression_relop -> expression . RELOP_GE expression
    (43) expression_relop -> expression . RELOP_LE expression
    (44) expression_relop -> expression . RELOP_NE expression
    (46) expression_unary -> expression . '

    +               reduce using rule 35 (expression_binop -> expression MATRIX_PLUS expression .)
    -               reduce using rule 35 (expression_binop -> expression MATRIX_PLUS expression .)
    MATRIX_PLUS     reduce using rule 35 (expression_binop -> expression MATRIX_PLUS expression .)
    MATRIX_SUB      reduce using rule 35 (expression_binop -> expression MATRIX_PLUS expression .)
    RELOP_EQ        reduce using rule 35 (expression_binop -> expression MATRIX_PLUS expression .)
    RELOP_GT        reduce using rule 35 (expression_binop -> expression MATRIX_PLUS expression .)
    RELOP_LT        reduce using rule 35 (expression_binop -> expression MATRIX_PLUS expression .)
    RELOP_GE        reduce using rule 35 (expression_binop -> expression MATRIX_PLUS expression .)
    RELOP_LE        reduce using rule 35 (expression_binop -> expression MATRIX_PLUS expression .)
    RELOP_NE        reduce using rule 35 (expression_binop -> expression MATRIX_PLUS expression .)
    ;               reduce using rule 35 (expression_binop -> expression MATRIX_PLUS expression .)
    ,               reduce using rule 35 (expression_binop -> expression MATRIX_PLUS expression .)
    )               reduce using rule 35 (expression_binop -> expression MATRIX_PLUS expression .)
    *               shift and go to state 69
    /               shift and go to state 70
    MATRIX_MUL      shift and go to state 73
    MATRIX_DIV      shift and go to state 74
    '               shift and go to state 81

  ! *               [ reduce using rule 35 (expression_binop -> expression MATRIX_PLUS expression .) ]
  ! /               [ reduce using rule 35 (expression_binop -> expression MATRIX_PLUS expression .) ]
  ! MATRIX_MUL      [ reduce using rule 35 (expression_binop -> expression MATRIX_PLUS expression .) ]
  ! MATRIX_DIV      [ reduce using rule 35 (expression_binop -> expression MATRIX_PLUS expression .) ]
  ! '               [ reduce using rule 35 (expression_binop -> expression MATRIX_PLUS expression .) ]
  ! +               [ shift and go to state 67 ]
  ! -               [ shift and go to state 68 ]
  ! MATRIX_PLUS     [ shift and go to state 71 ]
  ! MATRIX_SUB      [ shift and go to state 72 ]
  ! RELOP_EQ        [ shift and go to state 75 ]
  ! RELOP_GT        [ shift and go to state 76 ]
  ! RELOP_LT        [ shift and go to state 77 ]
  ! RELOP_GE        [ shift and go to state 78 ]
  ! RELOP_LE        [ shift and go to state 79 ]
  ! RELOP_NE        [ shift and go to state 80 ]


state 108

    (36) expression_binop -> expression MATRIX_SUB expression .
    (31) expression_binop -> expression . + expression
    (32) expression_binop -> expression . - expression
    (33) expression_binop -> expression . * expression
    (34) expression_binop -> expression . / expression
    (35) expression_binop -> expression . MATRIX_PLUS expression
    (36) expression_binop -> expression . MATRIX_SUB expression
    (37) expression_binop -> expression . MATRIX_MUL expression
    (38) expression_binop -> expression . MATRIX_DIV expression
    (39) expression_relop -> expression . RELOP_EQ expression
    (40) expression_relop -> expression . RELOP_GT expression
    (41) expression_relop -> expression . RELOP_LT expression
    (42) expression_relop -> expression . RELOP_GE expression
    (43) expression_relop -> expression . RELOP_LE expression
    (44) expression_relop -> expression . RELOP_NE expression
    (46) expression_unary -> expression . '

    +               reduce using rule 36 (expression_binop -> expression MATRIX_SUB expression .)
    -               reduce using rule 36 (expression_binop -> expression MATRIX_SUB expression .)
    MATRIX_PLUS     reduce using rule 36 (expression_binop -> expression MATRIX_SUB expression .)
    MATRIX_SUB      reduce using rule 36 (expression_binop -> expression MATRIX_SUB expression .)
    RELOP_EQ        reduce using rule 36 (expression_binop -> expression MATRIX_SUB expression .)
    RELOP_GT        reduce using rule 36 (expression_binop -> expression MATRIX_SUB expression .)
    RELOP_LT        reduce using rule 36 (expression_binop -> expression MATRIX_SUB expression .)
    RELOP_GE        reduce using rule 36 (expression_binop -> expression MATRIX_SUB expression .)
    RELOP_LE        reduce using rule 36 (expression_binop -> expression MATRIX_SUB expression .)
    RELOP_NE        reduce using rule 36 (expression_binop -> expression MATRIX_SUB expression .)
    ;               reduce using rule 36 (expression_binop -> expression MATRIX_SUB expression .)
    ,               reduce using rule 36 (expression_binop -> expression MATRIX_SUB expression .)
    )               reduce using rule 36 (expression_binop -> expression MATRIX_SUB expression .)
    *               shift and go to state 69
    /               shift and go to state 70
    MATRIX_MUL      shift and go to state 73
    MATRIX_DIV      shift and go to state 74
    '               shift and go to state 81

  ! *               [ reduce using rule 36 (expression_binop -> expression MATRIX_SUB expression .) ]
  ! /               [ reduce using rule 36 (expression_binop -> expression MATRIX_SUB expression .) ]
  ! MATRIX_MUL      [ reduce using rule 36 (expression_binop -> expression MATRIX_SUB expression .) ]
  ! MATRIX_DIV      [ reduce using rule 36 (expression_binop -> expression MATRIX_SUB expression .) ]
  ! '               [ reduce using rule 36 (expression_binop -> expression MATRIX_SUB expression .) ]
  ! +               [ shift and go to state 67 ]
  ! -               [ shift and go to state 68 ]
  ! MATRIX_PLUS     [ shift and go to state 71 ]
  ! MATRIX_SUB      [ shift and go to state 72 ]
  ! RELOP_EQ        [ shift and go to state 75 ]
  ! RELOP_GT        [ shift and go to state 76 ]
  ! RELOP_LT        [ shift and go to state 77 ]
  ! RELOP_GE        [ shift and go to state 78 ]
  ! RELOP_LE        [ shift and go to state 79 ]
  ! RELOP_NE        [ shift and go to state 80 ]


state 109

    (37) expression_binop -> expression MATRIX_MUL expression .
    (31) expression_binop -> expression . + expression
    (32) expression_binop -> expression . - expression
    (33) expression_binop -> expression . * expression
    (34) expression_binop -> expression . / expression
    (35) expression_binop -> expression . MATRIX_PLUS expression
    (36) expression_binop -> expression . MATRIX_SUB expression
    (37) expression_binop -> expression . MATRIX_MUL expression
    (38) expression_binop -> expression . MATRIX_DIV expression
    (39) expression_relop -> expression . RELOP_EQ expression
    (40) expression_relop -> expression . RELOP_GT expression
    (41) expression_relop -> expression . RELOP_LT expression
    (42) expression_relop -> expression . RELOP_GE expression
    (43) expression_relop -> expression . RELOP_LE expression
    (44) expression_relop -> expression . RELOP_NE expression
    (46) expression_unary -> expression . '

    +               reduce using rule 37 (expression_binop -> expression MATRIX_MUL expression .)
    -               reduce using rule 37 (expression_binop -> expression MATRIX_MUL expression .)
    *               reduce using rule 37 (expression_binop -> expression MATRIX_MUL expression .)
    /               reduce using rule 37 (expression_binop -> expression MATRIX_MUL expression .)
    MATRIX_PLUS     reduce using rule 37 (expression_binop -> expression MATRIX_MUL expression .)
    MATRIX_SUB      reduce using rule 37 (expression_binop -> expression MATRIX_MUL expression .)
    MATRIX_MUL      reduce using rule 37 (expression_binop -> expression MATRIX_MUL expression .)
    MATRIX_DIV      reduce using rule 37 (expression_binop -> expression MATRIX_MUL expression .)
    RELOP_EQ        reduce using rule 37 (expression_binop -> expression MATRIX_MUL expression .)
    RELOP_GT        reduce using rule 37 (expression_binop -> expression MATRIX_MUL expression .)
    RELOP_LT        reduce using rule 37 (expression_binop -> expression MATRIX_MUL expression .)
    RELOP_GE        reduce using rule 37 (expression_binop -> expression MATRIX_MUL expression .)
    RELOP_LE        reduce using rule 37 (expression_binop -> expression MATRIX_MUL expression .)
    RELOP_NE        reduce using rule 37 (expression_binop -> expression MATRIX_MUL expression .)
    ;               reduce using rule 37 (expression_binop -> expression MATRIX_MUL expression .)
    ,               reduce using rule 37 (expression_binop -> expression MATRIX_MUL expression .)
    )               reduce using rule 37 (expression_binop -> expression MATRIX_MUL expression .)
    '               shift and go to state 81

  ! '               [ reduce using rule 37 (expression_binop -> expression MATRIX_MUL expression .) ]
  ! +               [ shift and go to state 67 ]
  ! -               [ shift and go to state 68 ]
  ! *               [ shift and go to state 69 ]
  ! /               [ shift and go to state 70 ]
  ! MATRIX_PLUS     [ shift and go to state 71 ]
  ! MATRIX_SUB      [ shift and go to state 72 ]
  ! MATRIX_MUL      [ shift and go to state 73 ]
  ! MATRIX_DIV      [ shift and go to state 74 ]
  ! RELOP_EQ        [ shift and go to state 75 ]
  ! RELOP_GT        [ shift and go to state 76 ]
  ! RELOP_LT        [ shift and go to state 77 ]
  ! RELOP_GE        [ shift and go to state 78 ]
  ! RELOP_LE        [ shift and go to state 79 ]
  ! RELOP_NE        [ shift and go to state 80 ]


state 110

    (38) expression_binop -> expression MATRIX_DIV expression .
    (31) expression_binop -> expression . + expression
    (32) expression_binop -> expression . - expression
    (33) expression_binop -> expression . * expression
    (34) expression_binop -> expression . / expression
    (35) expression_binop -> expression . MATRIX_PLUS expression
    (36) expression_binop -> expression . MATRIX_SUB expression
    (37) expression_binop -> expression . MATRIX_MUL expression
    (38) expression_binop -> expression . MATRIX_DIV expression
    (39) expression_relop -> expression . RELOP_EQ expression
    (40) expression_relop -> expression . RELOP_GT expression
    (41) expression_relop -> expression . RELOP_LT expression
    (42) expression_relop -> expression . RELOP_GE expression
    (43) expression_relop -> expression . RELOP_LE expression
    (44) expression_relop -> expression . RELOP_NE expression
    (46) expression_unary -> expression . '

    +               reduce using rule 38 (expression_binop -> expression MATRIX_DIV expression .)
    -               reduce using rule 38 (expression_binop -> expression MATRIX_DIV expression .)
    *               reduce using rule 38 (expression_binop -> expression MATRIX_DIV expression .)
    /               reduce using rule 38 (expression_binop -> expression MATRIX_DIV expression .)
    MATRIX_PLUS     reduce using rule 38 (expression_binop -> expression MATRIX_DIV expression .)
    MATRIX_SUB      reduce using rule 38 (expression_binop -> expression MATRIX_DIV expression .)
    MATRIX_MUL      reduce using rule 38 (expression_binop -> expression MATRIX_DIV expression .)
    MATRIX_DIV      reduce using rule 38 (expression_binop -> expression MATRIX_DIV expression .)
    RELOP_EQ        reduce using rule 38 (expression_binop -> expression MATRIX_DIV expression .)
    RELOP_GT        reduce using rule 38 (expression_binop -> expression MATRIX_DIV expression .)
    RELOP_LT        reduce using rule 38 (expression_binop -> expression MATRIX_DIV expression .)
    RELOP_GE        reduce using rule 38 (expression_binop -> expression MATRIX_DIV expression .)
    RELOP_LE        reduce using rule 38 (expression_binop -> expression MATRIX_DIV expression .)
    RELOP_NE        reduce using rule 38 (expression_binop -> expression MATRIX_DIV expression .)
    ;               reduce using rule 38 (expression_binop -> expression MATRIX_DIV expression .)
    ,               reduce using rule 38 (expression_binop -> expression MATRIX_DIV expression .)
    )               reduce using rule 38 (expression_binop -> expression MATRIX_DIV expression .)
    '               shift and go to state 81

  ! '               [ reduce using rule 38 (expression_binop -> expression MATRIX_DIV expression .) ]
  ! +               [ shift and go to state 67 ]
  ! -               [ shift and go to state 68 ]
  ! *               [ shift and go to state 69 ]
  ! /               [ shift and go to state 70 ]
  ! MATRIX_PLUS     [ shift and go to state 71 ]
  ! MATRIX_SUB      [ shift and go to state 72 ]
  ! MATRIX_MUL      [ shift and go to state 73 ]
  ! MATRIX_DIV      [ shift and go to state 74 ]
  ! RELOP_EQ        [ shift and go to state 75 ]
  ! RELOP_GT        [ shift and go to state 76 ]
  ! RELOP_LT        [ shift and go to state 77 ]
  ! RELOP_GE        [ shift and go to state 78 ]
  ! RELOP_LE        [ shift and go to state 79 ]
  ! RELOP_NE        [ shift and go to state 80 ]


state 111

    (39) expression_relop -> expression RELOP_EQ expression .
    (31) expression_binop -> expression . + expression
    (32) expression_binop -> expression . - expression
    (33) expression_binop -> expression . * expression
    (34) expression_binop -> expression . / expression
    (35) expression_binop -> expression . MATRIX_PLUS expression
    (36) expression_binop -> expression . MATRIX_SUB expression
    (37) expression_binop -> expression . MATRIX_MUL expression
    (38) expression_binop -> expression . MATRIX_DIV expression
    (39) expression_relop -> expression . RELOP_EQ expression
    (40) expression_relop -> expression . RELOP_GT expression
    (41) expression_relop -> expression . RELOP_LT expression
    (42) expression_relop -> expression . RELOP_GE expression
    (43) expression_relop -> expression . RELOP_LE expression
    (44) expression_relop -> expression . RELOP_NE expression
    (46) expression_unary -> expression . '

    RELOP_EQ        reduce using rule 39 (expression_relop -> expression RELOP_EQ expression .)
    RELOP_GT        reduce using rule 39 (expression_relop -> expression RELOP_EQ expression .)
    RELOP_LT        reduce using rule 39 (expression_relop -> expression RELOP_EQ expression .)
    RELOP_GE        reduce using rule 39 (expression_relop -> expression RELOP_EQ expression .)
    RELOP_LE        reduce using rule 39 (expression_relop -> expression RELOP_EQ expression .)
    RELOP_NE        reduce using rule 39 (expression_relop -> expression RELOP_EQ expression .)
    ;               reduce using rule 39 (expression_relop -> expression RELOP_EQ expression .)
    ,               reduce using rule 39 (expression_relop -> expression RELOP_EQ expression .)
    )               reduce using rule 39 (expression_relop -> expression RELOP_EQ expression .)
    +               shift and go to state 67
    -               shift and go to state 68
    *               shift and go to state 69
    /               shift and go to state 70
    MATRIX_PLUS     shift and go to state 71
    MATRIX_SUB      shift and go to state 72
    MATRIX_MUL      shift and go to state 73
    MATRIX_DIV      shift and go to state 74
    '               shift and go to state 81

  ! +               [ reduce using rule 39 (expression_relop -> expression RELOP_EQ expression .) ]
  ! -               [ reduce using rule 39 (expression_relop -> expression RELOP_EQ expression .) ]
  ! *               [ reduce using rule 39 (expression_relop -> expression RELOP_EQ expression .) ]
  ! /               [ reduce using rule 39 (expression_relop -> expression RELOP_EQ expression .) ]
  ! MATRIX_PLUS     [ reduce using rule 39 (expression_relop -> expression RELOP_EQ expression .) ]
  ! MATRIX_SUB      [ reduce using rule 39 (expression_relop -> expression RELOP_EQ expression .) ]
  ! MATRIX_MUL      [ reduce using rule 39 (expression_relop -> expression RELOP_EQ expression .) ]
  ! MATRIX_DIV      [ reduce using rule 39 (expression_relop -> expression RELOP_EQ expression .) ]
  ! '               [ reduce using rule 39 (expression_relop -> expression RELOP_EQ expression .) ]
  ! RELOP_EQ        [ shift and go to state 75 ]
  ! RELOP_GT        [ shift and go to state 76 ]
  ! RELOP_LT        [ shift and go to state 77 ]
  ! RELOP_GE        [ shift and go to state 78 ]
  ! RELOP_LE        [ shift and go to state 79 ]
  ! RELOP_NE        [ shift and go to state 80 ]


state 112

    (40) expression_relop -> expression RELOP_GT expression .
    (31) expression_binop -> expression . + expression
    (32) expression_binop -> expression . - expression
    (33) expression_binop -> expression . * expression
    (34) expression_binop -> expression . / expression
    (35) expression_binop -> expression . MATRIX_PLUS expression
    (36) expression_binop -> expression . MATRIX_SUB expression
    (37) expression_binop -> expression . MATRIX_MUL expression
    (38) expression_binop -> expression . MATRIX_DIV expression
    (39) expression_relop -> expression . RELOP_EQ expression
    (40) expression_relop -> expression . RELOP_GT expression
    (41) expression_relop -> expression . RELOP_LT expression
    (42) expression_relop -> expression . RELOP_GE expression
    (43) expression_relop -> expression . RELOP_LE expression
    (44) expression_relop -> expression . RELOP_NE expression
    (46) expression_unary -> expression . '

    RELOP_EQ        reduce using rule 40 (expression_relop -> expression RELOP_GT expression .)
    RELOP_GT        reduce using rule 40 (expression_relop -> expression RELOP_GT expression .)
    RELOP_LT        reduce using rule 40 (expression_relop -> expression RELOP_GT expression .)
    RELOP_GE        reduce using rule 40 (expression_relop -> expression RELOP_GT expression .)
    RELOP_LE        reduce using rule 40 (expression_relop -> expression RELOP_GT expression .)
    RELOP_NE        reduce using rule 40 (expression_relop -> expression RELOP_GT expression .)
    ;               reduce using rule 40 (expression_relop -> expression RELOP_GT expression .)
    ,               reduce using rule 40 (expression_relop -> expression RELOP_GT expression .)
    )               reduce using rule 40 (expression_relop -> expression RELOP_GT expression .)
    +               shift and go to state 67
    -               shift and go to state 68
    *               shift and go to state 69
    /               shift and go to state 70
    MATRIX_PLUS     shift and go to state 71
    MATRIX_SUB      shift and go to state 72
    MATRIX_MUL      shift and go to state 73
    MATRIX_DIV      shift and go to state 74
    '               shift and go to state 81

  ! +               [ reduce using rule 40 (expression_relop -> expression RELOP_GT expression .) ]
  ! -               [ reduce using rule 40 (expression_relop -> expression RELOP_GT expression .) ]
  ! *               [ reduce using rule 40 (expression_relop -> expression RELOP_GT expression .) ]
  ! /               [ reduce using rule 40 (expression_relop -> expression RELOP_GT expression .) ]
  ! MATRIX_PLUS     [ reduce using rule 40 (expression_relop -> expression RELOP_GT expression .) ]
  ! MATRIX_SUB      [ reduce using rule 40 (expression_relop -> expression RELOP_GT expression .) ]
  ! MATRIX_MUL      [ reduce using rule 40 (expression_relop -> expression RELOP_GT expression .) ]
  ! MATRIX_DIV      [ reduce using rule 40 (expression_relop -> expression RELOP_GT expression .) ]
  ! '               [ reduce using rule 40 (expression_relop -> expression RELOP_GT expression .) ]
  ! RELOP_EQ        [ shift and go to state 75 ]
  ! RELOP_GT        [ shift and go to state 76 ]
  ! RELOP_LT        [ shift and go to state 77 ]
  ! RELOP_GE        [ shift and go to state 78 ]
  ! RELOP_LE        [ shift and go to state 79 ]
  ! RELOP_NE        [ shift and go to state 80 ]


state 113

    (41) expression_relop -> expression RELOP_LT expression .
    (31) expression_binop -> expression . + expression
    (32) expression_binop -> expression . - expression
    (33) expression_binop -> expression . * expression
    (34) expression_binop -> expression . / expression
    (35) expression_binop -> expression . MATRIX_PLUS expression
    (36) expression_binop -> expression . MATRIX_SUB expression
    (37) expression_binop -> expression . MATRIX_MUL expression
    (38) expression_binop -> expression . MATRIX_DIV expression
    (39) expression_relop -> expression . RELOP_EQ expression
    (40) expression_relop -> expression . RELOP_GT expression
    (41) expression_relop -> expression . RELOP_LT expression
    (42) expression_relop -> expression . RELOP_GE expression
    (43) expression_relop -> expression . RELOP_LE expression
    (44) expression_relop -> expression . RELOP_NE expression
    (46) expression_unary -> expression . '

    RELOP_EQ        reduce using rule 41 (expression_relop -> expression RELOP_LT expression .)
    RELOP_GT        reduce using rule 41 (expression_relop -> expression RELOP_LT expression .)
    RELOP_LT        reduce using rule 41 (expression_relop -> expression RELOP_LT expression .)
    RELOP_GE        reduce using rule 41 (expression_relop -> expression RELOP_LT expression .)
    RELOP_LE        reduce using rule 41 (expression_relop -> expression RELOP_LT expression .)
    RELOP_NE        reduce using rule 41 (expression_relop -> expression RELOP_LT expression .)
    ;               reduce using rule 41 (expression_relop -> expression RELOP_LT expression .)
    ,               reduce using rule 41 (expression_relop -> expression RELOP_LT expression .)
    )               reduce using rule 41 (expression_relop -> expression RELOP_LT expression .)
    +               shift and go to state 67
    -               shift and go to state 68
    *               shift and go to state 69
    /               shift and go to state 70
    MATRIX_PLUS     shift and go to state 71
    MATRIX_SUB      shift and go to state 72
    MATRIX_MUL      shift and go to state 73
    MATRIX_DIV      shift and go to state 74
    '               shift and go to state 81

  ! +               [ reduce using rule 41 (expression_relop -> expression RELOP_LT expression .) ]
  ! -               [ reduce using rule 41 (expression_relop -> expression RELOP_LT expression .) ]
  ! *               [ reduce using rule 41 (expression_relop -> expression RELOP_LT expression .) ]
  ! /               [ reduce using rule 41 (expression_relop -> expression RELOP_LT expression .) ]
  ! MATRIX_PLUS     [ reduce using rule 41 (expression_relop -> expression RELOP_LT expression .) ]
  ! MATRIX_SUB      [ reduce using rule 41 (expression_relop -> expression RELOP_LT expression .) ]
  ! MATRIX_MUL      [ reduce using rule 41 (expression_relop -> expression RELOP_LT expression .) ]
  ! MATRIX_DIV      [ reduce using rule 41 (expression_relop -> expression RELOP_LT expression .) ]
  ! '               [ reduce using rule 41 (expression_relop -> expression RELOP_LT expression .) ]
  ! RELOP_EQ        [ shift and go to state 75 ]
  ! RELOP_GT        [ shift and go to state 76 ]
  ! RELOP_LT        [ shift and go to state 77 ]
  ! RELOP_GE        [ shift and go to state 78 ]
  ! RELOP_LE        [ shift and go to state 79 ]
  ! RELOP_NE        [ shift and go to state 80 ]


state 114

    (42) expression_relop -> expression RELOP_GE expression .
    (31) expression_binop -> expression . + expression
    (32) expression_binop -> expression . - expression
    (33) expression_binop -> expression . * expression
    (34) expression_binop -> expression . / expression
    (35) expression_binop -> expression . MATRIX_PLUS expression
    (36) expression_binop -> expression . MATRIX_SUB expression
    (37) expression_binop -> expression . MATRIX_MUL expression
    (38) expression_binop -> expression . MATRIX_DIV expression
    (39) expression_relop -> expression . RELOP_EQ expression
    (40) expression_relop -> expression . RELOP_GT expression
    (41) expression_relop -> expression . RELOP_LT expression
    (42) expression_relop -> expression . RELOP_GE expression
    (43) expression_relop -> expression . RELOP_LE expression
    (44) expression_relop -> expression . RELOP_NE expression
    (46) expression_unary -> expression . '

    RELOP_EQ        reduce using rule 42 (expression_relop -> expression RELOP_GE expression .)
    RELOP_GT        reduce using rule 42 (expression_relop -> expression RELOP_GE expression .)
    RELOP_LT        reduce using rule 42 (expression_relop -> expression RELOP_GE expression .)
    RELOP_GE        reduce using rule 42 (expression_relop -> expression RELOP_GE expression .)
    RELOP_LE        reduce using rule 42 (expression_relop -> expression RELOP_GE expression .)
    RELOP_NE        reduce using rule 42 (expression_relop -> expression RELOP_GE expression .)
    ;               reduce using rule 42 (expression_relop -> expression RELOP_GE expression .)
    ,               reduce using rule 42 (expression_relop -> expression RELOP_GE expression .)
    )               reduce using rule 42 (expression_relop -> expression RELOP_GE expression .)
    +               shift and go to state 67
    -               shift and go to state 68
    *               shift and go to state 69
    /               shift and go to state 70
    MATRIX_PLUS     shift and go to state 71
    MATRIX_SUB      shift and go to state 72
    MATRIX_MUL      shift and go to state 73
    MATRIX_DIV      shift and go to state 74
    '               shift and go to state 81

  ! +               [ reduce using rule 42 (expression_relop -> expression RELOP_GE expression .) ]
  ! -               [ reduce using rule 42 (expression_relop -> expression RELOP_GE expression .) ]
  ! *               [ reduce using rule 42 (expression_relop -> expression RELOP_GE expression .) ]
  ! /               [ reduce using rule 42 (expression_relop -> expression RELOP_GE expression .) ]
  ! MATRIX_PLUS     [ reduce using rule 42 (expression_relop -> expression RELOP_GE expression .) ]
  ! MATRIX_SUB      [ reduce using rule 42 (expression_relop -> expression RELOP_GE expression .) ]
  ! MATRIX_MUL      [ reduce using rule 42 (expression_relop -> expression RELOP_GE expression .) ]
  ! MATRIX_DIV      [ reduce using rule 42 (expression_relop -> expression RELOP_GE expression .) ]
  ! '               [ reduce using rule 42 (expression_relop -> expression RELOP_GE expression .) ]
  ! RELOP_EQ        [ shift and go to state 75 ]
  ! RELOP_GT        [ shift and go to state 76 ]
  ! RELOP_LT        [ shift and go to state 77 ]
  ! RELOP_GE        [ shift and go to state 78 ]
  ! RELOP_LE        [ shift and go to state 79 ]
  ! RELOP_NE        [ shift and go to state 80 ]


state 115

    (43) expression_relop -> expression RELOP_LE expression .
    (31) expression_binop -> expression . + expression
    (32) expression_binop -> expression . - expression
    (33) expression_binop -> expression . * expression
    (34) expression_binop -> expression . / expression
    (35) expression_binop -> expression . MATRIX_PLUS expression
    (36) expression_binop -> expression . MATRIX_SUB expression
    (37) expression_binop -> expression . MATRIX_MUL expression
    (38) expression_binop -> expression . MATRIX_DIV expression
    (39) expression_relop -> expression . RELOP_EQ expression
    (40) expression_relop -> expression . RELOP_GT expression
    (41) expression_relop -> expression . RELOP_LT expression
    (42) expression_relop -> expression . RELOP_GE expression
    (43) expression_relop -> expression . RELOP_LE expression
    (44) expression_relop -> expression . RELOP_NE expression
    (46) expression_unary -> expression . '

    RELOP_EQ        reduce using rule 43 (expression_relop -> expression RELOP_LE expression .)
    RELOP_GT        reduce using rule 43 (expression_relop -> expression RELOP_LE expression .)
    RELOP_LT        reduce using rule 43 (expression_relop -> expression RELOP_LE expression .)
    RELOP_GE        reduce using rule 43 (expression_relop -> expression RELOP_LE expression .)
    RELOP_LE        reduce using rule 43 (expression_relop -> expression RELOP_LE expression .)
    RELOP_NE        reduce using rule 43 (expression_relop -> expression RELOP_LE expression .)
    ;               reduce using rule 43 (expression_relop -> expression RELOP_LE expression .)
    ,               reduce using rule 43 (expression_relop -> expression RELOP_LE expression .)
    )               reduce using rule 43 (expression_relop -> expression RELOP_LE expression .)
    +               shift and go to state 67
    -               shift and go to state 68
    *               shift and go to state 69
    /               shift and go to state 70
    MATRIX_PLUS     shift and go to state 71
    MATRIX_SUB      shift and go to state 72
    MATRIX_MUL      shift and go to state 73
    MATRIX_DIV      shift and go to state 74
    '               shift and go to state 81

  ! +               [ reduce using rule 43 (expression_relop -> expression RELOP_LE expression .) ]
  ! -               [ reduce using rule 43 (expression_relop -> expression RELOP_LE expression .) ]
  ! *               [ reduce using rule 43 (expression_relop -> expression RELOP_LE expression .) ]
  ! /               [ reduce using rule 43 (expression_relop -> expression RELOP_LE expression .) ]
  ! MATRIX_PLUS     [ reduce using rule 43 (expression_relop -> expression RELOP_LE expression .) ]
  ! MATRIX_SUB      [ reduce using rule 43 (expression_relop -> expression RELOP_LE expression .) ]
  ! MATRIX_MUL      [ reduce using rule 43 (expression_relop -> expression RELOP_LE expression .) ]
  ! MATRIX_DIV      [ reduce using rule 43 (expression_relop -> expression RELOP_LE expression .) ]
  ! '               [ reduce using rule 43 (expression_relop -> expression RELOP_LE expression .) ]
  ! RELOP_EQ        [ shift and go to state 75 ]
  ! RELOP_GT        [ shift and go to state 76 ]
  ! RELOP_LT        [ shift and go to state 77 ]
  ! RELOP_GE        [ shift and go to state 78 ]
  ! RELOP_LE        [ shift and go to state 79 ]
  ! RELOP_NE        [ shift and go to state 80 ]


state 116

    (44) expression_relop -> expression RELOP_NE expression .
    (31) expression_binop -> expression . + expression
    (32) expression_binop -> expression . - expression
    (33) expression_binop -> expression . * expression
    (34) expression_binop -> expression . / expression
    (35) expression_binop -> expression . MATRIX_PLUS expression
    (36) expression_binop -> expression . MATRIX_SUB expression
    (37) expression_binop -> expression . MATRIX_MUL expression
    (38) expression_binop -> expression . MATRIX_DIV expression
    (39) expression_relop -> expression . RELOP_EQ expression
    (40) expression_relop -> expression . RELOP_GT expression
    (41) expression_relop -> expression . RELOP_LT expression
    (42) expression_relop -> expression . RELOP_GE expression
    (43) expression_relop -> expression . RELOP_LE expression
    (44) expression_relop -> expression . RELOP_NE expression
    (46) expression_unary -> expression . '

    RELOP_EQ        reduce using rule 44 (expression_relop -> expression RELOP_NE expression .)
    RELOP_GT        reduce using rule 44 (expression_relop -> expression RELOP_NE expression .)
    RELOP_LT        reduce using rule 44 (expression_relop -> expression RELOP_NE expression .)
    RELOP_GE        reduce using rule 44 (expression_relop -> expression RELOP_NE expression .)
    RELOP_LE        reduce using rule 44 (expression_relop -> expression RELOP_NE expression .)
    RELOP_NE        reduce using rule 44 (expression_relop -> expression RELOP_NE expression .)
    ;               reduce using rule 44 (expression_relop -> expression RELOP_NE expression .)
    ,               reduce using rule 44 (expression_relop -> expression RELOP_NE expression .)
    )               reduce using rule 44 (expression_relop -> expression RELOP_NE expression .)
    +               shift and go to state 67
    -               shift and go to state 68
    *               shift and go to state 69
    /               shift and go to state 70
    MATRIX_PLUS     shift and go to state 71
    MATRIX_SUB      shift and go to state 72
    MATRIX_MUL      shift and go to state 73
    MATRIX_DIV      shift and go to state 74
    '               shift and go to state 81

  ! +               [ reduce using rule 44 (expression_relop -> expression RELOP_NE expression .) ]
  ! -               [ reduce using rule 44 (expression_relop -> expression RELOP_NE expression .) ]
  ! *               [ reduce using rule 44 (expression_relop -> expression RELOP_NE expression .) ]
  ! /               [ reduce using rule 44 (expression_relop -> expression RELOP_NE expression .) ]
  ! MATRIX_PLUS     [ reduce using rule 44 (expression_relop -> expression RELOP_NE expression .) ]
  ! MATRIX_SUB      [ reduce using rule 44 (expression_relop -> expression RELOP_NE expression .) ]
  ! MATRIX_MUL      [ reduce using rule 44 (expression_relop -> expression RELOP_NE expression .) ]
  ! MATRIX_DIV      [ reduce using rule 44 (expression_relop -> expression RELOP_NE expression .) ]
  ! '               [ reduce using rule 44 (expression_relop -> expression RELOP_NE expression .) ]
  ! RELOP_EQ        [ shift and go to state 75 ]
  ! RELOP_GT        [ shift and go to state 76 ]
  ! RELOP_LT        [ shift and go to state 77 ]
  ! RELOP_GE        [ shift and go to state 78 ]
  ! RELOP_LE        [ shift and go to state 79 ]
  ! RELOP_NE        [ shift and go to state 80 ]


state 117

    (30) expression -> ( expression ) .

    +               reduce using rule 30 (expression -> ( expression ) .)
    -               reduce using rule 30 (expression -> ( expression ) .)
    *               reduce using rule 30 (expression -> ( expression ) .)
    /               reduce using rule 30 (expression -> ( expression ) .)
    MATRIX_PLUS     reduce using rule 30 (expression -> ( expression ) .)
    MATRIX_SUB      reduce using rule 30 (expression -> ( expression ) .)
    MATRIX_MUL      reduce using rule 30 (expression -> ( expression ) .)
    MATRIX_DIV      reduce using rule 30 (expression -> ( expression ) .)
    RELOP_EQ        reduce using rule 30 (expression -> ( expression ) .)
    RELOP_GT        reduce using rule 30 (expression -> ( expression ) .)
    RELOP_LT        reduce using rule 30 (expression -> ( expression ) .)
    RELOP_GE        reduce using rule 30 (expression -> ( expression ) .)
    RELOP_LE        reduce using rule 30 (expression -> ( expression ) .)
    RELOP_NE        reduce using rule 30 (expression -> ( expression ) .)
    '               reduce using rule 30 (expression -> ( expression ) .)
    ;               reduce using rule 30 (expression -> ( expression ) .)
    ,               reduce using rule 30 (expression -> ( expression ) .)
    )               reduce using rule 30 (expression -> ( expression ) .)


state 118

    (47) matrix_funcs -> ZEROS ( expression_list . )
    (68) expression_list -> expression_list . , expression

    )               shift and go to state 130
    ,               shift and go to state 66


state 119

    (48) matrix_funcs -> ONES ( expression_list . )
    (68) expression_list -> expression_list . , expression

    )               shift and go to state 131
    ,               shift and go to state 66


state 120

    (49) matrix_funcs -> EYE ( expression_list . )
    (68) expression_list -> expression_list . , expression

    )               shift and go to state 132
    ,               shift and go to state 66


state 121

    (52) matrix -> [ vectors ] .

    +               reduce using rule 52 (matrix -> [ vectors ] .)
    -               reduce using rule 52 (matrix -> [ vectors ] .)
    *               reduce using rule 52 (matrix -> [ vectors ] .)
    /               reduce using rule 52 (matrix -> [ vectors ] .)
    MATRIX_PLUS     reduce using rule 52 (matrix -> [ vectors ] .)
    MATRIX_SUB      reduce using rule 52 (matrix -> [ vectors ] .)
    MATRIX_MUL      reduce using rule 52 (matrix -> [ vectors ] .)
    MATRIX_DIV      reduce using rule 52 (matrix -> [ vectors ] .)
    RELOP_EQ        reduce using rule 52 (matrix -> [ vectors ] .)
    RELOP_GT        reduce using rule 52 (matrix -> [ vectors ] .)
    RELOP_LT        reduce using rule 52 (matrix -> [ vectors ] .)
    RELOP_GE        reduce using rule 52 (matrix -> [ vectors ] .)
    RELOP_LE        reduce using rule 52 (matrix -> [ vectors ] .)
    RELOP_NE        reduce using rule 52 (matrix -> [ vectors ] .)
    '               reduce using rule 52 (matrix -> [ vectors ] .)
    ;               reduce using rule 52 (matrix -> [ vectors ] .)
    ,               reduce using rule 52 (matrix -> [ vectors ] .)
    )               reduce using rule 52 (matrix -> [ vectors ] .)


state 122

    (54) vectors -> vectors , . vector
    (55) vector -> . [ numbers ]
    (56) vector -> . [ ]

    [               shift and go to state 57

    vector                         shift and go to state 133

state 123

    (70) while_loop -> WHILE ( expression ) . instruction
    (7) instruction -> . assignment
    (8) instruction -> . conditional_statement
    (9) instruction -> . print_statement
    (10) instruction -> . jump_statement
    (11) instruction -> . return_statement
    (12) instruction -> . while_loop
    (13) instruction -> . for_loop
    (14) instruction -> . instruction_block
    (16) assignment -> . assign_id = expression ;
    (17) assignment -> . assign_id MUL_ASSIGN expression ;
    (18) assignment -> . assign_id DIV_ASSIGN expression ;
    (19) assignment -> . assign_id PLUS_ASSIGN expression ;
    (20) assignment -> . assign_id SUB_ASSIGN expression ;
    (61) conditional_statement -> . IF ( expression ) instruction
    (62) conditional_statement -> . IF ( expression ) instruction ELSE instruction
    (67) print_statement -> . PRINT expression_list ;
    (63) jump_statement -> . BREAK ;
    (64) jump_statement -> . CONTINUE ;
    (65) return_statement -> . RETURN ;
    (66) return_statement -> . RETURN expression ;
    (70) while_loop -> . WHILE ( expression ) instruction
    (71) for_loop -> . FOR ID = range_value : range_value instruction
    (15) instruction_block -> . { instructions }
    (21) assign_id -> . ID
    (22) assign_id -> . ID vector

    IF              shift and go to state 15
    PRINT           shift and go to state 16
    BREAK           shift and go to state 17
    CONTINUE        shift and go to state 18
    RETURN          shift and go to state 19
    WHILE           shift and go to state 20
    FOR             shift and go to state 21
    {               shift and go to state 23
    ID              shift and go to state 22

    instruction                    shift and go to state 134
    assignment                     shift and go to state 6
    conditional_statement          shift and go to state 7
    print_statement                shift and go to state 8
    jump_statement                 shift and go to state 9
    return_statement               shift and go to state 10
    while_loop                     shift and go to state 11
    for_loop                       shift and go to state 12
    instruction_block              shift and go to state 13
    assign_id                      shift and go to state 14

state 124

    (73) range_value -> ID .

    :               reduce using rule 73 (range_value -> ID .)
    IF              reduce using rule 73 (range_value -> ID .)
    PRINT           reduce using rule 73 (range_value -> ID .)
    BREAK           reduce using rule 73 (range_value -> ID .)
    CONTINUE        reduce using rule 73 (range_value -> ID .)
    RETURN          reduce using rule 73 (range_value -> ID .)
    WHILE           reduce using rule 73 (range_value -> ID .)
    FOR             reduce using rule 73 (range_value -> ID .)
    {               reduce using rule 73 (range_value -> ID .)
    ID              reduce using rule 73 (range_value -> ID .)


state 125

    (71) for_loop -> FOR ID = range_value . : range_value instruction

    :               shift and go to state 135


state 126

    (72) range_value -> DT_INTEGER .

    :               reduce using rule 72 (range_value -> DT_INTEGER .)
    IF              reduce using rule 72 (range_value -> DT_INTEGER .)
    PRINT           reduce using rule 72 (range_value -> DT_INTEGER .)
    BREAK           reduce using rule 72 (range_value -> DT_INTEGER .)
    CONTINUE        reduce using rule 72 (range_value -> DT_INTEGER .)
    RETURN          reduce using rule 72 (range_value -> DT_INTEGER .)
    WHILE           reduce using rule 72 (range_value -> DT_INTEGER .)
    FOR             reduce using rule 72 (range_value -> DT_INTEGER .)
    {               reduce using rule 72 (range_value -> DT_INTEGER .)
    ID              reduce using rule 72 (range_value -> DT_INTEGER .)


state 127

    (55) vector -> [ numbers ] .

    =               reduce using rule 55 (vector -> [ numbers ] .)
    MUL_ASSIGN      reduce using rule 55 (vector -> [ numbers ] .)
    DIV_ASSIGN      reduce using rule 55 (vector -> [ numbers ] .)
    PLUS_ASSIGN     reduce using rule 55 (vector -> [ numbers ] .)
    SUB_ASSIGN      reduce using rule 55 (vector -> [ numbers ] .)
    ]               reduce using rule 55 (vector -> [ numbers ] .)
    ,               reduce using rule 55 (vector -> [ numbers ] .)


state 128

    (57) numbers -> numbers , . number
    (59) number -> . DT_INTEGER
    (60) number -> . DT_FLOAT

    DT_INTEGER      shift and go to state 48
    DT_FLOAT        shift and go to state 49

    number                         shift and go to state 136

state 129

    (61) conditional_statement -> IF ( expression ) instruction .
    (62) conditional_statement -> IF ( expression ) instruction . ELSE instruction

    IF              reduce using rule 61 (conditional_statement -> IF ( expression ) instruction .)
    PRINT           reduce using rule 61 (conditional_statement -> IF ( expression ) instruction .)
    BREAK           reduce using rule 61 (conditional_statement -> IF ( expression ) instruction .)
    CONTINUE        reduce using rule 61 (conditional_statement -> IF ( expression ) instruction .)
    RETURN          reduce using rule 61 (conditional_statement -> IF ( expression ) instruction .)
    WHILE           reduce using rule 61 (conditional_statement -> IF ( expression ) instruction .)
    FOR             reduce using rule 61 (conditional_statement -> IF ( expression ) instruction .)
    {               reduce using rule 61 (conditional_statement -> IF ( expression ) instruction .)
    ID              reduce using rule 61 (conditional_statement -> IF ( expression ) instruction .)
    $end            reduce using rule 61 (conditional_statement -> IF ( expression ) instruction .)
    }               reduce using rule 61 (conditional_statement -> IF ( expression ) instruction .)
    ELSE            shift and go to state 137

  ! ELSE            [ reduce using rule 61 (conditional_statement -> IF ( expression ) instruction .) ]


state 130

    (47) matrix_funcs -> ZEROS ( expression_list ) .

    +               reduce using rule 47 (matrix_funcs -> ZEROS ( expression_list ) .)
    -               reduce using rule 47 (matrix_funcs -> ZEROS ( expression_list ) .)
    *               reduce using rule 47 (matrix_funcs -> ZEROS ( expression_list ) .)
    /               reduce using rule 47 (matrix_funcs -> ZEROS ( expression_list ) .)
    MATRIX_PLUS     reduce using rule 47 (matrix_funcs -> ZEROS ( expression_list ) .)
    MATRIX_SUB      reduce using rule 47 (matrix_funcs -> ZEROS ( expression_list ) .)
    MATRIX_MUL      reduce using rule 47 (matrix_funcs -> ZEROS ( expression_list ) .)
    MATRIX_DIV      reduce using rule 47 (matrix_funcs -> ZEROS ( expression_list ) .)
    RELOP_EQ        reduce using rule 47 (matrix_funcs -> ZEROS ( expression_list ) .)
    RELOP_GT        reduce using rule 47 (matrix_funcs -> ZEROS ( expression_list ) .)
    RELOP_LT        reduce using rule 47 (matrix_funcs -> ZEROS ( expression_list ) .)
    RELOP_GE        reduce using rule 47 (matrix_funcs -> ZEROS ( expression_list ) .)
    RELOP_LE        reduce using rule 47 (matrix_funcs -> ZEROS ( expression_list ) .)
    RELOP_NE        reduce using rule 47 (matrix_funcs -> ZEROS ( expression_list ) .)
    '               reduce using rule 47 (matrix_funcs -> ZEROS ( expression_list ) .)
    ;               reduce using rule 47 (matrix_funcs -> ZEROS ( expression_list ) .)
    ,               reduce using rule 47 (matrix_funcs -> ZEROS ( expression_list ) .)
    )               reduce using rule 47 (matrix_funcs -> ZEROS ( expression_list ) .)


state 131

    (48) matrix_funcs -> ONES ( expression_list ) .

    +               reduce using rule 48 (matrix_funcs -> ONES ( expression_list ) .)
    -               reduce using rule 48 (matrix_funcs -> ONES ( expression_list ) .)
    *               reduce using rule 48 (matrix_funcs -> ONES ( expression_list ) .)
    /               reduce using rule 48 (matrix_funcs -> ONES ( expression_list ) .)
    MATRIX_PLUS     reduce using rule 48 (matrix_funcs -> ONES ( expression_list ) .)
    MATRIX_SUB      reduce using rule 48 (matrix_funcs -> ONES ( expression_list ) .)
    MATRIX_MUL      reduce using rule 48 (matrix_funcs -> ONES ( expression_list ) .)
    MATRIX_DIV      reduce using rule 48 (matrix_funcs -> ONES ( expression_list ) .)
    RELOP_EQ        reduce using rule 48 (matrix_funcs -> ONES ( expression_list ) .)
    RELOP_GT        reduce using rule 48 (matrix_funcs -> ONES ( expression_list ) .)
    RELOP_LT        reduce using rule 48 (matrix_funcs -> ONES ( expression_list ) .)
    RELOP_GE        reduce using rule 48 (matrix_funcs -> ONES ( expression_list ) .)
    RELOP_LE        reduce using rule 48 (matrix_funcs -> ONES ( expression_list ) .)
    RELOP_NE        reduce using rule 48 (matrix_funcs -> ONES ( expression_list ) .)
    '               reduce using rule 48 (matrix_funcs -> ONES ( expression_list ) .)
    ;               reduce using rule 48 (matrix_funcs -> ONES ( expression_list ) .)
    ,               reduce using rule 48 (matrix_funcs -> ONES ( expression_list ) .)
    )               reduce using rule 48 (matrix_funcs -> ONES ( expression_list ) .)


state 132

    (49) matrix_funcs -> EYE ( expression_list ) .

    +               reduce using rule 49 (matrix_funcs -> EYE ( expression_list ) .)
    -               reduce using rule 49 (matrix_funcs -> EYE ( expression_list ) .)
    *               reduce using rule 49 (matrix_funcs -> EYE ( expression_list ) .)
    /               reduce using rule 49 (matrix_funcs -> EYE ( expression_list ) .)
    MATRIX_PLUS     reduce using rule 49 (matrix_funcs -> EYE ( expression_list ) .)
    MATRIX_SUB      reduce using rule 49 (matrix_funcs -> EYE ( expression_list ) .)
    MATRIX_MUL      reduce using rule 49 (matrix_funcs -> EYE ( expression_list ) .)
    MATRIX_DIV      reduce using rule 49 (matrix_funcs -> EYE ( expression_list ) .)
    RELOP_EQ        reduce using rule 49 (matrix_funcs -> EYE ( expression_list ) .)
    RELOP_GT        reduce using rule 49 (matrix_funcs -> EYE ( expression_list ) .)
    RELOP_LT        reduce using rule 49 (matrix_funcs -> EYE ( expression_list ) .)
    RELOP_GE        reduce using rule 49 (matrix_funcs -> EYE ( expression_list ) .)
    RELOP_LE        reduce using rule 49 (matrix_funcs -> EYE ( expression_list ) .)
    RELOP_NE        reduce using rule 49 (matrix_funcs -> EYE ( expression_list ) .)
    '               reduce using rule 49 (matrix_funcs -> EYE ( expression_list ) .)
    ;               reduce using rule 49 (matrix_funcs -> EYE ( expression_list ) .)
    ,               reduce using rule 49 (matrix_funcs -> EYE ( expression_list ) .)
    )               reduce using rule 49 (matrix_funcs -> EYE ( expression_list ) .)


state 133

    (54) vectors -> vectors , vector .

    ]               reduce using rule 54 (vectors -> vectors , vector .)
    ,               reduce using rule 54 (vectors -> vectors , vector .)


state 134

    (70) while_loop -> WHILE ( expression ) instruction .

    IF              reduce using rule 70 (while_loop -> WHILE ( expression ) instruction .)
    PRINT           reduce using rule 70 (while_loop -> WHILE ( expression ) instruction .)
    BREAK           reduce using rule 70 (while_loop -> WHILE ( expression ) instruction .)
    CONTINUE        reduce using rule 70 (while_loop -> WHILE ( expression ) instruction .)
    RETURN          reduce using rule 70 (while_loop -> WHILE ( expression ) instruction .)
    WHILE           reduce using rule 70 (while_loop -> WHILE ( expression ) instruction .)
    FOR             reduce using rule 70 (while_loop -> WHILE ( expression ) instruction .)
    {               reduce using rule 70 (while_loop -> WHILE ( expression ) instruction .)
    ID              reduce using rule 70 (while_loop -> WHILE ( expression ) instruction .)
    $end            reduce using rule 70 (while_loop -> WHILE ( expression ) instruction .)
    }               reduce using rule 70 (while_loop -> WHILE ( expression ) instruction .)
    ELSE            reduce using rule 70 (while_loop -> WHILE ( expression ) instruction .)


state 135

    (71) for_loop -> FOR ID = range_value : . range_value instruction
    (72) range_value -> . DT_INTEGER
    (73) range_value -> . ID

    DT_INTEGER      shift and go to state 126
    ID              shift and go to state 124

    range_value                    shift and go to state 138

state 136

    (57) numbers -> numbers , number .

    ]               reduce using rule 57 (numbers -> numbers , number .)
    ,               reduce using rule 57 (numbers -> numbers , number .)


state 137

    (62) conditional_statement -> IF ( expression ) instruction ELSE . instruction
    (7) instruction -> . assignment
    (8) instruction -> . conditional_statement
    (9) instruction -> . print_statement
    (10) instruction -> . jump_statement
    (11) instruction -> . return_statement
    (12) instruction -> . while_loop
    (13) instruction -> . for_loop
    (14) instruction -> . instruction_block
    (16) assignment -> . assign_id = expression ;
    (17) assignment -> . assign_id MUL_ASSIGN expression ;
    (18) assignment -> . assign_id DIV_ASSIGN expression ;
    (19) assignment -> . assign_id PLUS_ASSIGN expression ;
    (20) assignment -> . assign_id SUB_ASSIGN expression ;
    (61) conditional_statement -> . IF ( expression ) instruction
    (62) conditional_statement -> . IF ( expression ) instruction ELSE instruction
    (67) print_statement -> . PRINT expression_list ;
    (63) jump_statement -> . BREAK ;
    (64) jump_statement -> . CONTINUE ;
    (65) return_statement -> . RETURN ;
    (66) return_statement -> . RETURN expression ;
    (70) while_loop -> . WHILE ( expression ) instruction
    (71) for_loop -> . FOR ID = range_value : range_value instruction
    (15) instruction_block -> . { instructions }
    (21) assign_id -> . ID
    (22) assign_id -> . ID vector

    IF              shift and go to state 15
    PRINT           shift and go to state 16
    BREAK           shift and go to state 17
    CONTINUE        shift and go to state 18
    RETURN          shift and go to state 19
    WHILE           shift and go to state 20
    FOR             shift and go to state 21
    {               shift and go to state 23
    ID              shift and go to state 22

    instruction                    shift and go to state 139
    assignment                     shift and go to state 6
    conditional_statement          shift and go to state 7
    print_statement                shift and go to state 8
    jump_statement                 shift and go to state 9
    return_statement               shift and go to state 10
    while_loop                     shift and go to state 11
    for_loop                       shift and go to state 12
    instruction_block              shift and go to state 13
    assign_id                      shift and go to state 14

state 138

    (71) for_loop -> FOR ID = range_value : range_value . instruction
    (7) instruction -> . assignment
    (8) instruction -> . conditional_statement
    (9) instruction -> . print_statement
    (10) instruction -> . jump_statement
    (11) instruction -> . return_statement
    (12) instruction -> . while_loop
    (13) instruction -> . for_loop
    (14) instruction -> . instruction_block
    (16) assignment -> . assign_id = expression ;
    (17) assignment -> . assign_id MUL_ASSIGN expression ;
    (18) assignment -> . assign_id DIV_ASSIGN expression ;
    (19) assignment -> . assign_id PLUS_ASSIGN expression ;
    (20) assignment -> . assign_id SUB_ASSIGN expression ;
    (61) conditional_statement -> . IF ( expression ) instruction
    (62) conditional_statement -> . IF ( expression ) instruction ELSE instruction
    (67) print_statement -> . PRINT expression_list ;
    (63) jump_statement -> . BREAK ;
    (64) jump_statement -> . CONTINUE ;
    (65) return_statement -> . RETURN ;
    (66) return_statement -> . RETURN expression ;
    (70) while_loop -> . WHILE ( expression ) instruction
    (71) for_loop -> . FOR ID = range_value : range_value instruction
    (15) instruction_block -> . { instructions }
    (21) assign_id -> . ID
    (22) assign_id -> . ID vector

    IF              shift and go to state 15
    PRINT           shift and go to state 16
    BREAK           shift and go to state 17
    CONTINUE        shift and go to state 18
    RETURN          shift and go to state 19
    WHILE           shift and go to state 20
    FOR             shift and go to state 21
    {               shift and go to state 23
    ID              shift and go to state 22

    instruction                    shift and go to state 140
    assignment                     shift and go to state 6
    conditional_statement          shift and go to state 7
    print_statement                shift and go to state 8
    jump_statement                 shift and go to state 9
    return_statement               shift and go to state 10
    while_loop                     shift and go to state 11
    for_loop                       shift and go to state 12
    instruction_block              shift and go to state 13
    assign_id                      shift and go to state 14

state 139

    (62) conditional_statement -> IF ( expression ) instruction ELSE instruction .

    IF              reduce using rule 62 (conditional_statement -> IF ( expression ) instruction ELSE instruction .)
    PRINT           reduce using rule 62 (conditional_statement -> IF ( expression ) instruction ELSE instruction .)
    BREAK           reduce using rule 62 (conditional_statement -> IF ( expression ) instruction ELSE instruction .)
    CONTINUE        reduce using rule 62 (conditional_statement -> IF ( expression ) instruction ELSE instruction .)
    RETURN          reduce using rule 62 (conditional_statement -> IF ( expression ) instruction ELSE instruction .)
    WHILE           reduce using rule 62 (conditional_statement -> IF ( expression ) instruction ELSE instruction .)
    FOR             reduce using rule 62 (conditional_statement -> IF ( expression ) instruction ELSE instruction .)
    {               reduce using rule 62 (conditional_statement -> IF ( expression ) instruction ELSE instruction .)
    ID              reduce using rule 62 (conditional_statement -> IF ( expression ) instruction ELSE instruction .)
    $end            reduce using rule 62 (conditional_statement -> IF ( expression ) instruction ELSE instruction .)
    }               reduce using rule 62 (conditional_statement -> IF ( expression ) instruction ELSE instruction .)
    ELSE            reduce using rule 62 (conditional_statement -> IF ( expression ) instruction ELSE instruction .)


state 140

    (71) for_loop -> FOR ID = range_value : range_value instruction .

    IF              reduce using rule 71 (for_loop -> FOR ID = range_value : range_value instruction .)
    PRINT           reduce using rule 71 (for_loop -> FOR ID = range_value : range_value instruction .)
    BREAK           reduce using rule 71 (for_loop -> FOR ID = range_value : range_value instruction .)
    CONTINUE        reduce using rule 71 (for_loop -> FOR ID = range_value : range_value instruction .)
    RETURN          reduce using rule 71 (for_loop -> FOR ID = range_value : range_value instruction .)
    WHILE           reduce using rule 71 (for_loop -> FOR ID = range_value : range_value instruction .)
    FOR             reduce using rule 71 (for_loop -> FOR ID = range_value : range_value instruction .)
    {               reduce using rule 71 (for_loop -> FOR ID = range_value : range_value instruction .)
    ID              reduce using rule 71 (for_loop -> FOR ID = range_value : range_value instruction .)
    $end            reduce using rule 71 (for_loop -> FOR ID = range_value : range_value instruction .)
    }               reduce using rule 71 (for_loop -> FOR ID = range_value : range_value instruction .)
    ELSE            reduce using rule 71 (for_loop -> FOR ID = range_value : range_value instruction .)

