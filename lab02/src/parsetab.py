
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "nonassocIFnonassocELSEleft+-left*/leftMATRIX_PLUSMATRIX_SUBleftMATRIX_MULMATRIX_DIVBREAK COMMENT CONTINUE DIV_ASSIGN DT_FLOAT DT_INTEGER DT_STRING ELSE EYE FOR ID IF MATRIX_DIV MATRIX_MUL MATRIX_PLUS MATRIX_SUB MUL_ASSIGN ONES PLUS_ASSIGN PRINT RELOP_EQ RELOP_GE RELOP_GT RELOP_LE RELOP_LT RELOP_NE RETURN SUB_ASSIGN WHILE ZEROSprogram : instructions_optinstructions_opt : instructions instructions_opt : \n        instructions : instructions instruction\n                    | instruction\n    \n        instruction : assignment\n                    | conditional_statement\n                    | print_statement\n                    | jump_statement\n                    | return_statement\n                    | while_loop\n                    | for_loop\n                    | '{' instructions '}'\n    \n        assignment : assign_id '=' expression ';'\n                    | assign_id MUL_ASSIGN expression ';'\n                    | assign_id DIV_ASSIGN expression ';'\n                    | assign_id PLUS_ASSIGN expression ';'\n                    | assign_id SUB_ASSIGN expression ';'\n    \n        assign_id : ID\n                  | ID vector\n    expression : expression_binop\n                  | expression_relop\n                  | expression_unary\n                  | matrix_funcs\n                  | constant\n                  | ID\n                  | matrix\n                  | '(' expression ')'\n                  expression_binop : expression '+' expression\n                | expression '-' expression\n                | expression '*' expression\n                | expression '/' expression\n                | expression MATRIX_PLUS expression\n                | expression MATRIX_SUB expression\n                | expression MATRIX_MUL expression\n                | expression MATRIX_DIV expression\n    expression_relop : expression RELOP_EQ expression\n                | expression RELOP_GT expression\n                | expression RELOP_LT expression\n                | expression RELOP_GE expression\n                | expression RELOP_LE expression\n                | expression RELOP_NE expression\n    expression_unary : '-' expression\n                | expression '\\''\n    \n        matrix_funcs : ZEROS '(' DT_INTEGER ')'\n                    | ONES '(' DT_INTEGER ')'\n                    | EYE '(' DT_INTEGER ')'  \n\n    \n        constant : DT_STRING\n                | number\n    \n        matrix : '[' vectors ']'\n\n     vectors : vector \n                | vectors ',' vector\n    \n        vector : '[' numbers ']'\n    \n        numbers : numbers ',' number \n                | number\n                | \n    \n        number : DT_INTEGER \n               | DT_FLOAT\n    \n        conditional_statement : IF expression instructions\n                    | IF expression instructions ELSE instructions\n    \n        jump_statement : BREAK ';'\n                        | CONTINUE ';'\n    \n        return_statement : RETURN ';'\n                        | RETURN expression ';'\n    \n        print_statement : PRINT expression_list ';'\n    \n        expression_list : expression_list ',' expression\n                        | expression\n    \n        while_loop : WHILE '(' expression ')' instructions\n    \n        for_loop : FOR ID '=' range_value ':' range_value instructions\n    \n        range_value : DT_INTEGER \n                    | ID\n    "
    
_lr_action_items = {'$end':([0,1,2,3,4,5,6,7,8,9,10,11,22,49,50,51,57,63,86,88,93,94,95,96,97,126,131,135,],[-3,0,-1,-2,-5,-6,-7,-8,-9,-10,-11,-12,-4,-61,-62,-63,-13,-59,-65,-64,-14,-15,-16,-17,-18,-60,-68,-69,]),'{':([0,3,4,5,6,7,8,9,10,11,12,22,23,29,30,31,32,33,34,35,36,40,43,44,46,49,50,51,57,63,78,80,86,88,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,117,120,121,123,126,127,128,129,131,134,135,],[12,12,-5,-6,-7,-8,-9,-10,-11,-12,12,-4,12,12,-21,-22,-23,-24,-25,-26,-27,-57,-48,-49,-58,-61,-62,-63,-13,-59,-44,-43,-65,-64,-14,-15,-16,-17,-18,12,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-28,-50,12,-71,-70,-60,-45,-46,-47,12,12,12,]),'IF':([0,3,4,5,6,7,8,9,10,11,12,22,23,29,30,31,32,33,34,35,36,40,43,44,46,49,50,51,57,63,78,80,86,88,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,117,120,121,123,126,127,128,129,131,134,135,],[14,14,-5,-6,-7,-8,-9,-10,-11,-12,14,-4,14,14,-21,-22,-23,-24,-25,-26,-27,-57,-48,-49,-58,-61,-62,-63,-13,14,-44,-43,-65,-64,-14,-15,-16,-17,-18,14,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-28,-50,14,-71,-70,-60,-45,-46,-47,14,14,14,]),'PRINT':([0,3,4,5,6,7,8,9,10,11,12,22,23,29,30,31,32,33,34,35,36,40,43,44,46,49,50,51,57,63,78,80,86,88,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,117,120,121,123,126,127,128,129,131,134,135,],[15,15,-5,-6,-7,-8,-9,-10,-11,-12,15,-4,15,15,-21,-22,-23,-24,-25,-26,-27,-57,-48,-49,-58,-61,-62,-63,-13,-59,-44,-43,-65,-64,-14,-15,-16,-17,-18,15,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-28,-50,15,-71,-70,-60,-45,-46,-47,15,15,15,]),'BREAK':([0,3,4,5,6,7,8,9,10,11,12,22,23,29,30,31,32,33,34,35,36,40,43,44,46,49,50,51,57,63,78,80,86,88,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,117,120,121,123,126,127,128,129,131,134,135,],[16,16,-5,-6,-7,-8,-9,-10,-11,-12,16,-4,16,16,-21,-22,-23,-24,-25,-26,-27,-57,-48,-49,-58,-61,-62,-63,-13,-59,-44,-43,-65,-64,-14,-15,-16,-17,-18,16,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-28,-50,16,-71,-70,-60,-45,-46,-47,16,16,16,]),'CONTINUE':([0,3,4,5,6,7,8,9,10,11,12,22,23,29,30,31,32,33,34,35,36,40,43,44,46,49,50,51,57,63,78,80,86,88,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,117,120,121,123,126,127,128,129,131,134,135,],[17,17,-5,-6,-7,-8,-9,-10,-11,-12,17,-4,17,17,-21,-22,-23,-24,-25,-26,-27,-57,-48,-49,-58,-61,-62,-63,-13,-59,-44,-43,-65,-64,-14,-15,-16,-17,-18,17,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-28,-50,17,-71,-70,-60,-45,-46,-47,17,17,17,]),'RETURN':([0,3,4,5,6,7,8,9,10,11,12,22,23,29,30,31,32,33,34,35,36,40,43,44,46,49,50,51,57,63,78,80,86,88,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,117,120,121,123,126,127,128,129,131,134,135,],[18,18,-5,-6,-7,-8,-9,-10,-11,-12,18,-4,18,18,-21,-22,-23,-24,-25,-26,-27,-57,-48,-49,-58,-61,-62,-63,-13,-59,-44,-43,-65,-64,-14,-15,-16,-17,-18,18,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-28,-50,18,-71,-70,-60,-45,-46,-47,18,18,18,]),'WHILE':([0,3,4,5,6,7,8,9,10,11,12,22,23,29,30,31,32,33,34,35,36,40,43,44,46,49,50,51,57,63,78,80,86,88,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,117,120,121,123,126,127,128,129,131,134,135,],[19,19,-5,-6,-7,-8,-9,-10,-11,-12,19,-4,19,19,-21,-22,-23,-24,-25,-26,-27,-57,-48,-49,-58,-61,-62,-63,-13,-59,-44,-43,-65,-64,-14,-15,-16,-17,-18,19,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-28,-50,19,-71,-70,-60,-45,-46,-47,19,19,19,]),'FOR':([0,3,4,5,6,7,8,9,10,11,12,22,23,29,30,31,32,33,34,35,36,40,43,44,46,49,50,51,57,63,78,80,86,88,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,117,120,121,123,126,127,128,129,131,134,135,],[20,20,-5,-6,-7,-8,-9,-10,-11,-12,20,-4,20,20,-21,-22,-23,-24,-25,-26,-27,-57,-48,-49,-58,-61,-62,-63,-13,-59,-44,-43,-65,-64,-14,-15,-16,-17,-18,20,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-28,-50,20,-71,-70,-60,-45,-46,-47,20,20,20,]),'ID':([0,3,4,5,6,7,8,9,10,11,12,14,15,18,20,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,40,43,44,46,49,50,51,53,57,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,80,86,87,88,90,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,117,120,121,123,126,127,128,129,131,132,134,135,],[21,21,-5,-6,-7,-8,-9,-10,-11,-12,21,35,35,35,54,-4,21,35,35,35,35,35,21,-21,-22,-23,-24,-25,-26,-27,35,35,-57,-48,-49,-58,-61,-62,-63,35,-13,-59,35,35,35,35,35,35,35,35,35,35,35,35,35,35,-44,-43,-65,35,-64,121,-14,-15,-16,-17,-18,21,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-28,-50,21,-71,-70,-60,-45,-46,-47,21,121,21,21,]),'}':([4,5,6,7,8,9,10,11,22,23,49,50,51,57,63,86,88,93,94,95,96,97,126,131,135,],[-5,-6,-7,-8,-9,-10,-11,-12,-4,57,-61,-62,-63,-13,-59,-65,-64,-14,-15,-16,-17,-18,-60,-68,-69,]),'ELSE':([4,5,6,7,8,9,10,11,22,49,50,51,57,63,86,88,93,94,95,96,97,126,131,135,],[-5,-6,-7,-8,-9,-10,-11,-12,-4,-61,-62,-63,-13,98,-65,-64,-14,-15,-16,-17,-18,-60,-68,-69,]),'=':([13,21,54,55,124,],[24,-19,90,-20,-53,]),'MUL_ASSIGN':([13,21,55,124,],[25,-19,-20,-53,]),'DIV_ASSIGN':([13,21,55,124,],[26,-19,-20,-53,]),'PLUS_ASSIGN':([13,21,55,124,],[27,-19,-20,-53,]),'SUB_ASSIGN':([13,21,55,124,],[28,-19,-20,-53,]),'(':([14,15,18,19,24,25,26,27,28,37,38,39,41,42,53,64,65,66,67,68,69,70,71,72,73,74,75,76,77,87,],[37,37,37,53,37,37,37,37,37,37,37,81,82,83,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'-':([14,15,18,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,40,43,44,46,48,52,53,58,59,60,61,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,87,89,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,117,119,127,128,129,],[38,38,38,38,38,38,38,38,65,-21,-22,-23,-24,-25,-26,-27,38,38,-57,-48,-49,-58,65,65,38,65,65,65,65,65,38,38,38,38,38,38,38,38,38,38,38,38,38,38,-44,65,-43,38,65,-29,-30,-31,-32,-33,-34,-35,-36,65,65,65,65,65,65,-28,-50,65,-45,-46,-47,]),'ZEROS':([14,15,18,24,25,26,27,28,37,38,53,64,65,66,67,68,69,70,71,72,73,74,75,76,77,87,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'ONES':([14,15,18,24,25,26,27,28,37,38,53,64,65,66,67,68,69,70,71,72,73,74,75,76,77,87,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'EYE':([14,15,18,24,25,26,27,28,37,38,53,64,65,66,67,68,69,70,71,72,73,74,75,76,77,87,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'DT_STRING':([14,15,18,24,25,26,27,28,37,38,53,64,65,66,67,68,69,70,71,72,73,74,75,76,77,87,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'[':([14,15,18,21,24,25,26,27,28,37,38,45,53,64,65,66,67,68,69,70,71,72,73,74,75,76,77,87,118,],[45,45,45,56,45,45,45,45,45,45,45,56,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,56,]),'DT_INTEGER':([14,15,18,24,25,26,27,28,37,38,53,56,64,65,66,67,68,69,70,71,72,73,74,75,76,77,81,82,83,87,90,125,132,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,114,115,116,40,123,40,123,]),'DT_FLOAT':([14,15,18,24,25,26,27,28,37,38,53,56,64,65,66,67,68,69,70,71,72,73,74,75,76,77,87,125,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),';':([16,17,18,30,31,32,33,34,35,36,40,43,44,46,47,48,52,58,59,60,61,62,78,80,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,117,119,127,128,129,],[49,50,51,-21,-22,-23,-24,-25,-26,-27,-57,-48,-49,-58,86,-67,88,93,94,95,96,97,-44,-43,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-28,-50,-66,-45,-46,-47,]),'+':([29,30,31,32,33,34,35,36,40,43,44,46,48,52,58,59,60,61,62,78,79,80,89,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,117,119,127,128,129,],[64,-21,-22,-23,-24,-25,-26,-27,-57,-48,-49,-58,64,64,64,64,64,64,64,-44,64,-43,64,-29,-30,-31,-32,-33,-34,-35,-36,64,64,64,64,64,64,-28,-50,64,-45,-46,-47,]),'*':([29,30,31,32,33,34,35,36,40,43,44,46,48,52,58,59,60,61,62,78,79,80,89,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,117,119,127,128,129,],[66,-21,-22,-23,-24,-25,-26,-27,-57,-48,-49,-58,66,66,66,66,66,66,66,-44,66,66,66,66,66,-31,-32,-33,-34,-35,-36,66,66,66,66,66,66,-28,-50,66,-45,-46,-47,]),'/':([29,30,31,32,33,34,35,36,40,43,44,46,48,52,58,59,60,61,62,78,79,80,89,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,117,119,127,128,129,],[67,-21,-22,-23,-24,-25,-26,-27,-57,-48,-49,-58,67,67,67,67,67,67,67,-44,67,67,67,67,67,-31,-32,-33,-34,-35,-36,67,67,67,67,67,67,-28,-50,67,-45,-46,-47,]),'MATRIX_PLUS':([29,30,31,32,33,34,35,36,40,43,44,46,48,52,58,59,60,61,62,78,79,80,89,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,117,119,127,128,129,],[68,-21,-22,-23,-24,-25,-26,-27,-57,-48,-49,-58,68,68,68,68,68,68,68,-44,68,68,68,68,68,68,68,-33,-34,-35,-36,68,68,68,68,68,68,-28,-50,68,-45,-46,-47,]),'MATRIX_SUB':([29,30,31,32,33,34,35,36,40,43,44,46,48,52,58,59,60,61,62,78,79,80,89,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,117,119,127,128,129,],[69,-21,-22,-23,-24,-25,-26,-27,-57,-48,-49,-58,69,69,69,69,69,69,69,-44,69,69,69,69,69,69,69,-33,-34,-35,-36,69,69,69,69,69,69,-28,-50,69,-45,-46,-47,]),'MATRIX_MUL':([29,30,31,32,33,34,35,36,40,43,44,46,48,52,58,59,60,61,62,78,79,80,89,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,117,119,127,128,129,],[70,-21,-22,-23,-24,-25,-26,-27,-57,-48,-49,-58,70,70,70,70,70,70,70,-44,70,70,70,70,70,70,70,70,70,-35,-36,70,70,70,70,70,70,-28,-50,70,-45,-46,-47,]),'MATRIX_DIV':([29,30,31,32,33,34,35,36,40,43,44,46,48,52,58,59,60,61,62,78,79,80,89,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,117,119,127,128,129,],[71,-21,-22,-23,-24,-25,-26,-27,-57,-48,-49,-58,71,71,71,71,71,71,71,-44,71,71,71,71,71,71,71,71,71,-35,-36,71,71,71,71,71,71,-28,-50,71,-45,-46,-47,]),'RELOP_EQ':([29,30,31,32,33,34,35,36,40,43,44,46,48,52,58,59,60,61,62,78,79,80,89,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,117,119,127,128,129,],[72,-21,-22,-23,-24,-25,-26,-27,-57,-48,-49,-58,72,72,72,72,72,72,72,-44,72,-43,72,-29,-30,-31,-32,-33,-34,-35,-36,72,72,72,72,72,72,-28,-50,72,-45,-46,-47,]),'RELOP_GT':([29,30,31,32,33,34,35,36,40,43,44,46,48,52,58,59,60,61,62,78,79,80,89,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,117,119,127,128,129,],[73,-21,-22,-23,-24,-25,-26,-27,-57,-48,-49,-58,73,73,73,73,73,73,73,-44,73,-43,73,-29,-30,-31,-32,-33,-34,-35,-36,73,73,73,73,73,73,-28,-50,73,-45,-46,-47,]),'RELOP_LT':([29,30,31,32,33,34,35,36,40,43,44,46,48,52,58,59,60,61,62,78,79,80,89,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,117,119,127,128,129,],[74,-21,-22,-23,-24,-25,-26,-27,-57,-48,-49,-58,74,74,74,74,74,74,74,-44,74,-43,74,-29,-30,-31,-32,-33,-34,-35,-36,74,74,74,74,74,74,-28,-50,74,-45,-46,-47,]),'RELOP_GE':([29,30,31,32,33,34,35,36,40,43,44,46,48,52,58,59,60,61,62,78,79,80,89,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,117,119,127,128,129,],[75,-21,-22,-23,-24,-25,-26,-27,-57,-48,-49,-58,75,75,75,75,75,75,75,-44,75,-43,75,-29,-30,-31,-32,-33,-34,-35,-36,75,75,75,75,75,75,-28,-50,75,-45,-46,-47,]),'RELOP_LE':([29,30,31,32,33,34,35,36,40,43,44,46,48,52,58,59,60,61,62,78,79,80,89,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,117,119,127,128,129,],[76,-21,-22,-23,-24,-25,-26,-27,-57,-48,-49,-58,76,76,76,76,76,76,76,-44,76,-43,76,-29,-30,-31,-32,-33,-34,-35,-36,76,76,76,76,76,76,-28,-50,76,-45,-46,-47,]),'RELOP_NE':([29,30,31,32,33,34,35,36,40,43,44,46,48,52,58,59,60,61,62,78,79,80,89,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,117,119,127,128,129,],[77,-21,-22,-23,-24,-25,-26,-27,-57,-48,-49,-58,77,77,77,77,77,77,77,-44,77,-43,77,-29,-30,-31,-32,-33,-34,-35,-36,77,77,77,77,77,77,-28,-50,77,-45,-46,-47,]),"'":([29,30,31,32,33,34,35,36,40,43,44,46,48,52,58,59,60,61,62,78,79,80,89,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,117,119,127,128,129,],[78,-21,-22,-23,-24,-25,-26,-27,-57,-48,-49,-58,78,78,78,78,78,78,78,-44,78,-43,78,-29,-30,-31,-32,-33,-34,-35,-36,78,78,78,78,78,78,-28,-50,78,-45,-46,-47,]),',':([30,31,32,33,34,35,36,40,43,44,46,47,48,56,78,80,84,85,91,92,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,117,119,124,127,128,129,130,133,],[-21,-22,-23,-24,-25,-26,-27,-57,-48,-49,-58,87,-67,-56,-44,-43,118,-51,125,-55,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-28,-50,-66,-53,-45,-46,-47,-52,-54,]),')':([30,31,32,33,34,35,36,40,43,44,46,78,79,80,89,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,127,128,129,],[-21,-22,-23,-24,-25,-26,-27,-57,-48,-49,-58,-44,113,-43,120,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-28,127,128,129,-50,-45,-46,-47,]),']':([40,46,56,84,85,91,92,124,130,133,],[-57,-58,-56,117,-51,124,-55,-53,-52,-54,]),':':([121,122,123,],[-71,132,-70,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'instructions_opt':([0,],[2,]),'instructions':([0,12,29,98,120,134,],[3,23,63,126,131,135,]),'instruction':([0,3,12,23,29,63,98,120,126,131,134,135,],[4,22,4,22,4,22,4,4,22,22,4,22,]),'assignment':([0,3,12,23,29,63,98,120,126,131,134,135,],[5,5,5,5,5,5,5,5,5,5,5,5,]),'conditional_statement':([0,3,12,23,29,63,98,120,126,131,134,135,],[6,6,6,6,6,6,6,6,6,6,6,6,]),'print_statement':([0,3,12,23,29,63,98,120,126,131,134,135,],[7,7,7,7,7,7,7,7,7,7,7,7,]),'jump_statement':([0,3,12,23,29,63,98,120,126,131,134,135,],[8,8,8,8,8,8,8,8,8,8,8,8,]),'return_statement':([0,3,12,23,29,63,98,120,126,131,134,135,],[9,9,9,9,9,9,9,9,9,9,9,9,]),'while_loop':([0,3,12,23,29,63,98,120,126,131,134,135,],[10,10,10,10,10,10,10,10,10,10,10,10,]),'for_loop':([0,3,12,23,29,63,98,120,126,131,134,135,],[11,11,11,11,11,11,11,11,11,11,11,11,]),'assign_id':([0,3,12,23,29,63,98,120,126,131,134,135,],[13,13,13,13,13,13,13,13,13,13,13,13,]),'expression':([14,15,18,24,25,26,27,28,37,38,53,64,65,66,67,68,69,70,71,72,73,74,75,76,77,87,],[29,48,52,58,59,60,61,62,79,80,89,99,100,101,102,103,104,105,106,107,108,109,110,111,112,119,]),'expression_binop':([14,15,18,24,25,26,27,28,37,38,53,64,65,66,67,68,69,70,71,72,73,74,75,76,77,87,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'expression_relop':([14,15,18,24,25,26,27,28,37,38,53,64,65,66,67,68,69,70,71,72,73,74,75,76,77,87,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'expression_unary':([14,15,18,24,25,26,27,28,37,38,53,64,65,66,67,68,69,70,71,72,73,74,75,76,77,87,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'matrix_funcs':([14,15,18,24,25,26,27,28,37,38,53,64,65,66,67,68,69,70,71,72,73,74,75,76,77,87,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'constant':([14,15,18,24,25,26,27,28,37,38,53,64,65,66,67,68,69,70,71,72,73,74,75,76,77,87,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'matrix':([14,15,18,24,25,26,27,28,37,38,53,64,65,66,67,68,69,70,71,72,73,74,75,76,77,87,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'number':([14,15,18,24,25,26,27,28,37,38,53,56,64,65,66,67,68,69,70,71,72,73,74,75,76,77,87,125,],[44,44,44,44,44,44,44,44,44,44,44,92,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,133,]),'expression_list':([15,],[47,]),'vector':([21,45,118,],[55,85,130,]),'vectors':([45,],[84,]),'numbers':([56,],[91,]),'range_value':([90,132,],[122,134,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> instructions_opt','program',1,'p_program','Mparser.py',30),
  ('instructions_opt -> instructions','instructions_opt',1,'p_instruction_opt_1','Mparser.py',34),
  ('instructions_opt -> <empty>','instructions_opt',0,'p_instruction_opt_2','Mparser.py',38),
  ('instructions -> instructions instruction','instructions',2,'p_instructions','Mparser.py',43),
  ('instructions -> instruction','instructions',1,'p_instructions','Mparser.py',44),
  ('instruction -> assignment','instruction',1,'p_instruction','Mparser.py',50),
  ('instruction -> conditional_statement','instruction',1,'p_instruction','Mparser.py',51),
  ('instruction -> print_statement','instruction',1,'p_instruction','Mparser.py',52),
  ('instruction -> jump_statement','instruction',1,'p_instruction','Mparser.py',53),
  ('instruction -> return_statement','instruction',1,'p_instruction','Mparser.py',54),
  ('instruction -> while_loop','instruction',1,'p_instruction','Mparser.py',55),
  ('instruction -> for_loop','instruction',1,'p_instruction','Mparser.py',56),
  ('instruction -> { instructions }','instruction',3,'p_instruction','Mparser.py',57),
  ('assignment -> assign_id = expression ;','assignment',4,'p_assignment','Mparser.py',63),
  ('assignment -> assign_id MUL_ASSIGN expression ;','assignment',4,'p_assignment','Mparser.py',64),
  ('assignment -> assign_id DIV_ASSIGN expression ;','assignment',4,'p_assignment','Mparser.py',65),
  ('assignment -> assign_id PLUS_ASSIGN expression ;','assignment',4,'p_assignment','Mparser.py',66),
  ('assignment -> assign_id SUB_ASSIGN expression ;','assignment',4,'p_assignment','Mparser.py',67),
  ('assign_id -> ID','assign_id',1,'p_assign_id','Mparser.py',73),
  ('assign_id -> ID vector','assign_id',2,'p_assign_id','Mparser.py',74),
  ('expression -> expression_binop','expression',1,'p_expression','Mparser.py',79),
  ('expression -> expression_relop','expression',1,'p_expression','Mparser.py',80),
  ('expression -> expression_unary','expression',1,'p_expression','Mparser.py',81),
  ('expression -> matrix_funcs','expression',1,'p_expression','Mparser.py',82),
  ('expression -> constant','expression',1,'p_expression','Mparser.py',83),
  ('expression -> ID','expression',1,'p_expression','Mparser.py',84),
  ('expression -> matrix','expression',1,'p_expression','Mparser.py',85),
  ('expression -> ( expression )','expression',3,'p_expression','Mparser.py',86),
  ('expression_binop -> expression + expression','expression_binop',3,'p_expression_binop','Mparser.py',91),
  ('expression_binop -> expression - expression','expression_binop',3,'p_expression_binop','Mparser.py',92),
  ('expression_binop -> expression * expression','expression_binop',3,'p_expression_binop','Mparser.py',93),
  ('expression_binop -> expression / expression','expression_binop',3,'p_expression_binop','Mparser.py',94),
  ('expression_binop -> expression MATRIX_PLUS expression','expression_binop',3,'p_expression_binop','Mparser.py',95),
  ('expression_binop -> expression MATRIX_SUB expression','expression_binop',3,'p_expression_binop','Mparser.py',96),
  ('expression_binop -> expression MATRIX_MUL expression','expression_binop',3,'p_expression_binop','Mparser.py',97),
  ('expression_binop -> expression MATRIX_DIV expression','expression_binop',3,'p_expression_binop','Mparser.py',98),
  ('expression_relop -> expression RELOP_EQ expression','expression_relop',3,'p_expression_relop','Mparser.py',103),
  ('expression_relop -> expression RELOP_GT expression','expression_relop',3,'p_expression_relop','Mparser.py',104),
  ('expression_relop -> expression RELOP_LT expression','expression_relop',3,'p_expression_relop','Mparser.py',105),
  ('expression_relop -> expression RELOP_GE expression','expression_relop',3,'p_expression_relop','Mparser.py',106),
  ('expression_relop -> expression RELOP_LE expression','expression_relop',3,'p_expression_relop','Mparser.py',107),
  ('expression_relop -> expression RELOP_NE expression','expression_relop',3,'p_expression_relop','Mparser.py',108),
  ('expression_unary -> - expression','expression_unary',2,'p_expression_unary','Mparser.py',113),
  ("expression_unary -> expression '",'expression_unary',2,'p_expression_unary','Mparser.py',114),
  ('matrix_funcs -> ZEROS ( DT_INTEGER )','matrix_funcs',4,'p_matrix_funcs','Mparser.py',120),
  ('matrix_funcs -> ONES ( DT_INTEGER )','matrix_funcs',4,'p_matrix_funcs','Mparser.py',121),
  ('matrix_funcs -> EYE ( DT_INTEGER )','matrix_funcs',4,'p_matrix_funcs','Mparser.py',122),
  ('constant -> DT_STRING','constant',1,'p_constant','Mparser.py',129),
  ('constant -> number','constant',1,'p_constant','Mparser.py',130),
  ('matrix -> [ vectors ]','matrix',3,'p_matrix','Mparser.py',136),
  ('vectors -> vector','vectors',1,'p_vectors','Mparser.py',142),
  ('vectors -> vectors , vector','vectors',3,'p_vectors','Mparser.py',143),
  ('vector -> [ numbers ]','vector',3,'p_vector','Mparser.py',149),
  ('numbers -> numbers , number','numbers',3,'p_numbers','Mparser.py',155),
  ('numbers -> number','numbers',1,'p_numbers','Mparser.py',156),
  ('numbers -> <empty>','numbers',0,'p_numbers','Mparser.py',157),
  ('number -> DT_INTEGER','number',1,'p_number','Mparser.py',163),
  ('number -> DT_FLOAT','number',1,'p_number','Mparser.py',164),
  ('conditional_statement -> IF expression instructions','conditional_statement',3,'p_conditional_statement','Mparser.py',170),
  ('conditional_statement -> IF expression instructions ELSE instructions','conditional_statement',5,'p_conditional_statement','Mparser.py',171),
  ('jump_statement -> BREAK ;','jump_statement',2,'p_jump_statement','Mparser.py',177),
  ('jump_statement -> CONTINUE ;','jump_statement',2,'p_jump_statement','Mparser.py',178),
  ('return_statement -> RETURN ;','return_statement',2,'p_return_statement','Mparser.py',184),
  ('return_statement -> RETURN expression ;','return_statement',3,'p_return_statement','Mparser.py',185),
  ('print_statement -> PRINT expression_list ;','print_statement',3,'p_print_statement','Mparser.py',191),
  ('expression_list -> expression_list , expression','expression_list',3,'p_expression_list','Mparser.py',197),
  ('expression_list -> expression','expression_list',1,'p_expression_list','Mparser.py',198),
  ('while_loop -> WHILE ( expression ) instructions','while_loop',5,'p_while_loop','Mparser.py',204),
  ('for_loop -> FOR ID = range_value : range_value instructions','for_loop',7,'p_for_loop','Mparser.py',210),
  ('range_value -> DT_INTEGER','range_value',1,'p_range_value','Mparser.py',216),
  ('range_value -> ID','range_value',1,'p_range_value','Mparser.py',217),
]
