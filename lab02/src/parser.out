Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT

Grammar

Rule 0     S' -> program
Rule 1     program -> instructions_opt
Rule 2     instructions_opt -> instructions
Rule 3     instructions_opt -> <empty>
Rule 4     instructions -> instructions instruction
Rule 5     instructions -> instruction
Rule 6     instruction -> assignment
Rule 7     instruction -> conditional_statement
Rule 8     instruction -> print_statement
Rule 9     instruction -> jump_statement
Rule 10    instruction -> return_statement
Rule 11    instruction -> while_loop
Rule 12    instruction -> for_loop
Rule 13    instruction -> { instructions }
Rule 14    assignment -> assign_id = expression ;
Rule 15    assignment -> assign_id MUL_ASSIGN expression ;
Rule 16    assignment -> assign_id DIV_ASSIGN expression ;
Rule 17    assignment -> assign_id PLUS_ASSIGN expression ;
Rule 18    assignment -> assign_id SUB_ASSIGN expression ;
Rule 19    assign_id -> ID
Rule 20    assign_id -> ID vector
Rule 21    expression -> expression_binop
Rule 22    expression -> expression_relop
Rule 23    expression -> expression_unary
Rule 24    expression -> matrix_funcs
Rule 25    expression -> constant
Rule 26    expression -> ID
Rule 27    expression -> matrix
Rule 28    expression -> ( expression )
Rule 29    expression_binop -> expression + expression
Rule 30    expression_binop -> expression - expression
Rule 31    expression_binop -> expression * expression
Rule 32    expression_binop -> expression / expression
Rule 33    expression_binop -> expression MATRIX_PLUS expression
Rule 34    expression_binop -> expression MATRIX_SUB expression
Rule 35    expression_binop -> expression MATRIX_MUL expression
Rule 36    expression_binop -> expression MATRIX_DIV expression
Rule 37    expression_relop -> expression RELOP_EQ expression
Rule 38    expression_relop -> expression RELOP_GT expression
Rule 39    expression_relop -> expression RELOP_LT expression
Rule 40    expression_relop -> expression RELOP_GE expression
Rule 41    expression_relop -> expression RELOP_LE expression
Rule 42    expression_relop -> expression RELOP_NE expression
Rule 43    expression_unary -> - expression
Rule 44    expression_unary -> expression '
Rule 45    matrix_funcs -> ZEROS ( DT_INTEGER )
Rule 46    matrix_funcs -> ONES ( DT_INTEGER )
Rule 47    matrix_funcs -> EYE ( DT_INTEGER )
Rule 48    constant -> DT_STRING
Rule 49    constant -> number
Rule 50    matrix -> [ vectors ]
Rule 51    vectors -> vector
Rule 52    vectors -> vectors , vector
Rule 53    vector -> [ numbers ]
Rule 54    numbers -> numbers , number
Rule 55    numbers -> number
Rule 56    numbers -> <empty>
Rule 57    number -> DT_INTEGER
Rule 58    number -> DT_FLOAT
Rule 59    conditional_statement -> IF expression instructions
Rule 60    conditional_statement -> IF expression instructions ELSE instructions
Rule 61    jump_statement -> BREAK ;
Rule 62    jump_statement -> CONTINUE ;
Rule 63    return_statement -> RETURN ;
Rule 64    return_statement -> RETURN expression ;
Rule 65    print_statement -> PRINT expression_list ;
Rule 66    expression_list -> expression_list , expression
Rule 67    expression_list -> expression
Rule 68    while_loop -> WHILE ( expression ) instructions
Rule 69    for_loop -> FOR ID = range_value : range_value instructions
Rule 70    range_value -> DT_INTEGER
Rule 71    range_value -> ID

Terminals, with rules where they appear

'                    : 44
(                    : 28 45 46 47 68
)                    : 28 45 46 47 68
*                    : 31
+                    : 29
,                    : 52 54 66
-                    : 30 43
/                    : 32
:                    : 69
;                    : 14 15 16 17 18 61 62 63 64 65
=                    : 14 69
BREAK                : 61
COMMENT              : 
CONTINUE             : 62
DIV_ASSIGN           : 16
DT_FLOAT             : 58
DT_INTEGER           : 45 46 47 57 70
DT_STRING            : 48
ELSE                 : 60
EYE                  : 47
FOR                  : 69
ID                   : 19 20 26 69 71
IF                   : 59 60
MATRIX_DIV           : 36
MATRIX_MUL           : 35
MATRIX_PLUS          : 33
MATRIX_SUB           : 34
MUL_ASSIGN           : 15
ONES                 : 46
PLUS_ASSIGN          : 17
PRINT                : 65
RELOP_EQ             : 37
RELOP_GE             : 40
RELOP_GT             : 38
RELOP_LE             : 41
RELOP_LT             : 39
RELOP_NE             : 42
RETURN               : 63 64
SUB_ASSIGN           : 18
WHILE                : 68
ZEROS                : 45
[                    : 50 53
]                    : 50 53
error                : 
{                    : 13
}                    : 13

Nonterminals, with rules where they appear

assign_id            : 14 15 16 17 18
assignment           : 6
conditional_statement : 7
constant             : 25
expression           : 14 15 16 17 18 28 29 29 30 30 31 31 32 32 33 33 34 34 35 35 36 36 37 37 38 38 39 39 40 40 41 41 42 42 43 44 59 60 64 66 67 68
expression_binop     : 21
expression_list      : 65 66
expression_relop     : 22
expression_unary     : 23
for_loop             : 12
instruction          : 4 5
instructions         : 2 4 13 59 60 60 68 69
instructions_opt     : 1
jump_statement       : 9
matrix               : 27
matrix_funcs         : 24
number               : 49 54 55
numbers              : 53 54
print_statement      : 8
program              : 0
range_value          : 69 69
return_statement     : 10
vector               : 20 51 52
vectors              : 50 52
while_loop           : 11

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . instructions_opt
    (2) instructions_opt -> . instructions
    (3) instructions_opt -> .
    (4) instructions -> . instructions instruction
    (5) instructions -> . instruction
    (6) instruction -> . assignment
    (7) instruction -> . conditional_statement
    (8) instruction -> . print_statement
    (9) instruction -> . jump_statement
    (10) instruction -> . return_statement
    (11) instruction -> . while_loop
    (12) instruction -> . for_loop
    (13) instruction -> . { instructions }
    (14) assignment -> . assign_id = expression ;
    (15) assignment -> . assign_id MUL_ASSIGN expression ;
    (16) assignment -> . assign_id DIV_ASSIGN expression ;
    (17) assignment -> . assign_id PLUS_ASSIGN expression ;
    (18) assignment -> . assign_id SUB_ASSIGN expression ;
    (59) conditional_statement -> . IF expression instructions
    (60) conditional_statement -> . IF expression instructions ELSE instructions
    (65) print_statement -> . PRINT expression_list ;
    (61) jump_statement -> . BREAK ;
    (62) jump_statement -> . CONTINUE ;
    (63) return_statement -> . RETURN ;
    (64) return_statement -> . RETURN expression ;
    (68) while_loop -> . WHILE ( expression ) instructions
    (69) for_loop -> . FOR ID = range_value : range_value instructions
    (19) assign_id -> . ID
    (20) assign_id -> . ID vector

    $end            reduce using rule 3 (instructions_opt -> .)
    {               shift and go to state 12
    IF              shift and go to state 14
    PRINT           shift and go to state 15
    BREAK           shift and go to state 16
    CONTINUE        shift and go to state 17
    RETURN          shift and go to state 18
    WHILE           shift and go to state 19
    FOR             shift and go to state 20
    ID              shift and go to state 21

    program                        shift and go to state 1
    instructions_opt               shift and go to state 2
    instructions                   shift and go to state 3
    instruction                    shift and go to state 4
    assignment                     shift and go to state 5
    conditional_statement          shift and go to state 6
    print_statement                shift and go to state 7
    jump_statement                 shift and go to state 8
    return_statement               shift and go to state 9
    while_loop                     shift and go to state 10
    for_loop                       shift and go to state 11
    assign_id                      shift and go to state 13

state 1

    (0) S' -> program .



state 2

    (1) program -> instructions_opt .

    $end            reduce using rule 1 (program -> instructions_opt .)


state 3

    (2) instructions_opt -> instructions .
    (4) instructions -> instructions . instruction
    (6) instruction -> . assignment
    (7) instruction -> . conditional_statement
    (8) instruction -> . print_statement
    (9) instruction -> . jump_statement
    (10) instruction -> . return_statement
    (11) instruction -> . while_loop
    (12) instruction -> . for_loop
    (13) instruction -> . { instructions }
    (14) assignment -> . assign_id = expression ;
    (15) assignment -> . assign_id MUL_ASSIGN expression ;
    (16) assignment -> . assign_id DIV_ASSIGN expression ;
    (17) assignment -> . assign_id PLUS_ASSIGN expression ;
    (18) assignment -> . assign_id SUB_ASSIGN expression ;
    (59) conditional_statement -> . IF expression instructions
    (60) conditional_statement -> . IF expression instructions ELSE instructions
    (65) print_statement -> . PRINT expression_list ;
    (61) jump_statement -> . BREAK ;
    (62) jump_statement -> . CONTINUE ;
    (63) return_statement -> . RETURN ;
    (64) return_statement -> . RETURN expression ;
    (68) while_loop -> . WHILE ( expression ) instructions
    (69) for_loop -> . FOR ID = range_value : range_value instructions
    (19) assign_id -> . ID
    (20) assign_id -> . ID vector

    $end            reduce using rule 2 (instructions_opt -> instructions .)
    {               shift and go to state 12
    IF              shift and go to state 14
    PRINT           shift and go to state 15
    BREAK           shift and go to state 16
    CONTINUE        shift and go to state 17
    RETURN          shift and go to state 18
    WHILE           shift and go to state 19
    FOR             shift and go to state 20
    ID              shift and go to state 21

    instruction                    shift and go to state 22
    assignment                     shift and go to state 5
    conditional_statement          shift and go to state 6
    print_statement                shift and go to state 7
    jump_statement                 shift and go to state 8
    return_statement               shift and go to state 9
    while_loop                     shift and go to state 10
    for_loop                       shift and go to state 11
    assign_id                      shift and go to state 13

state 4

    (5) instructions -> instruction .

    {               reduce using rule 5 (instructions -> instruction .)
    IF              reduce using rule 5 (instructions -> instruction .)
    PRINT           reduce using rule 5 (instructions -> instruction .)
    BREAK           reduce using rule 5 (instructions -> instruction .)
    CONTINUE        reduce using rule 5 (instructions -> instruction .)
    RETURN          reduce using rule 5 (instructions -> instruction .)
    WHILE           reduce using rule 5 (instructions -> instruction .)
    FOR             reduce using rule 5 (instructions -> instruction .)
    ID              reduce using rule 5 (instructions -> instruction .)
    $end            reduce using rule 5 (instructions -> instruction .)
    }               reduce using rule 5 (instructions -> instruction .)
    ELSE            reduce using rule 5 (instructions -> instruction .)


state 5

    (6) instruction -> assignment .

    {               reduce using rule 6 (instruction -> assignment .)
    IF              reduce using rule 6 (instruction -> assignment .)
    PRINT           reduce using rule 6 (instruction -> assignment .)
    BREAK           reduce using rule 6 (instruction -> assignment .)
    CONTINUE        reduce using rule 6 (instruction -> assignment .)
    RETURN          reduce using rule 6 (instruction -> assignment .)
    WHILE           reduce using rule 6 (instruction -> assignment .)
    FOR             reduce using rule 6 (instruction -> assignment .)
    ID              reduce using rule 6 (instruction -> assignment .)
    $end            reduce using rule 6 (instruction -> assignment .)
    }               reduce using rule 6 (instruction -> assignment .)
    ELSE            reduce using rule 6 (instruction -> assignment .)


state 6

    (7) instruction -> conditional_statement .

    {               reduce using rule 7 (instruction -> conditional_statement .)
    IF              reduce using rule 7 (instruction -> conditional_statement .)
    PRINT           reduce using rule 7 (instruction -> conditional_statement .)
    BREAK           reduce using rule 7 (instruction -> conditional_statement .)
    CONTINUE        reduce using rule 7 (instruction -> conditional_statement .)
    RETURN          reduce using rule 7 (instruction -> conditional_statement .)
    WHILE           reduce using rule 7 (instruction -> conditional_statement .)
    FOR             reduce using rule 7 (instruction -> conditional_statement .)
    ID              reduce using rule 7 (instruction -> conditional_statement .)
    $end            reduce using rule 7 (instruction -> conditional_statement .)
    }               reduce using rule 7 (instruction -> conditional_statement .)
    ELSE            reduce using rule 7 (instruction -> conditional_statement .)


state 7

    (8) instruction -> print_statement .

    {               reduce using rule 8 (instruction -> print_statement .)
    IF              reduce using rule 8 (instruction -> print_statement .)
    PRINT           reduce using rule 8 (instruction -> print_statement .)
    BREAK           reduce using rule 8 (instruction -> print_statement .)
    CONTINUE        reduce using rule 8 (instruction -> print_statement .)
    RETURN          reduce using rule 8 (instruction -> print_statement .)
    WHILE           reduce using rule 8 (instruction -> print_statement .)
    FOR             reduce using rule 8 (instruction -> print_statement .)
    ID              reduce using rule 8 (instruction -> print_statement .)
    $end            reduce using rule 8 (instruction -> print_statement .)
    }               reduce using rule 8 (instruction -> print_statement .)
    ELSE            reduce using rule 8 (instruction -> print_statement .)


state 8

    (9) instruction -> jump_statement .

    {               reduce using rule 9 (instruction -> jump_statement .)
    IF              reduce using rule 9 (instruction -> jump_statement .)
    PRINT           reduce using rule 9 (instruction -> jump_statement .)
    BREAK           reduce using rule 9 (instruction -> jump_statement .)
    CONTINUE        reduce using rule 9 (instruction -> jump_statement .)
    RETURN          reduce using rule 9 (instruction -> jump_statement .)
    WHILE           reduce using rule 9 (instruction -> jump_statement .)
    FOR             reduce using rule 9 (instruction -> jump_statement .)
    ID              reduce using rule 9 (instruction -> jump_statement .)
    $end            reduce using rule 9 (instruction -> jump_statement .)
    }               reduce using rule 9 (instruction -> jump_statement .)
    ELSE            reduce using rule 9 (instruction -> jump_statement .)


state 9

    (10) instruction -> return_statement .

    {               reduce using rule 10 (instruction -> return_statement .)
    IF              reduce using rule 10 (instruction -> return_statement .)
    PRINT           reduce using rule 10 (instruction -> return_statement .)
    BREAK           reduce using rule 10 (instruction -> return_statement .)
    CONTINUE        reduce using rule 10 (instruction -> return_statement .)
    RETURN          reduce using rule 10 (instruction -> return_statement .)
    WHILE           reduce using rule 10 (instruction -> return_statement .)
    FOR             reduce using rule 10 (instruction -> return_statement .)
    ID              reduce using rule 10 (instruction -> return_statement .)
    $end            reduce using rule 10 (instruction -> return_statement .)
    }               reduce using rule 10 (instruction -> return_statement .)
    ELSE            reduce using rule 10 (instruction -> return_statement .)


state 10

    (11) instruction -> while_loop .

    {               reduce using rule 11 (instruction -> while_loop .)
    IF              reduce using rule 11 (instruction -> while_loop .)
    PRINT           reduce using rule 11 (instruction -> while_loop .)
    BREAK           reduce using rule 11 (instruction -> while_loop .)
    CONTINUE        reduce using rule 11 (instruction -> while_loop .)
    RETURN          reduce using rule 11 (instruction -> while_loop .)
    WHILE           reduce using rule 11 (instruction -> while_loop .)
    FOR             reduce using rule 11 (instruction -> while_loop .)
    ID              reduce using rule 11 (instruction -> while_loop .)
    $end            reduce using rule 11 (instruction -> while_loop .)
    }               reduce using rule 11 (instruction -> while_loop .)
    ELSE            reduce using rule 11 (instruction -> while_loop .)


state 11

    (12) instruction -> for_loop .

    {               reduce using rule 12 (instruction -> for_loop .)
    IF              reduce using rule 12 (instruction -> for_loop .)
    PRINT           reduce using rule 12 (instruction -> for_loop .)
    BREAK           reduce using rule 12 (instruction -> for_loop .)
    CONTINUE        reduce using rule 12 (instruction -> for_loop .)
    RETURN          reduce using rule 12 (instruction -> for_loop .)
    WHILE           reduce using rule 12 (instruction -> for_loop .)
    FOR             reduce using rule 12 (instruction -> for_loop .)
    ID              reduce using rule 12 (instruction -> for_loop .)
    $end            reduce using rule 12 (instruction -> for_loop .)
    }               reduce using rule 12 (instruction -> for_loop .)
    ELSE            reduce using rule 12 (instruction -> for_loop .)


state 12

    (13) instruction -> { . instructions }
    (4) instructions -> . instructions instruction
    (5) instructions -> . instruction
    (6) instruction -> . assignment
    (7) instruction -> . conditional_statement
    (8) instruction -> . print_statement
    (9) instruction -> . jump_statement
    (10) instruction -> . return_statement
    (11) instruction -> . while_loop
    (12) instruction -> . for_loop
    (13) instruction -> . { instructions }
    (14) assignment -> . assign_id = expression ;
    (15) assignment -> . assign_id MUL_ASSIGN expression ;
    (16) assignment -> . assign_id DIV_ASSIGN expression ;
    (17) assignment -> . assign_id PLUS_ASSIGN expression ;
    (18) assignment -> . assign_id SUB_ASSIGN expression ;
    (59) conditional_statement -> . IF expression instructions
    (60) conditional_statement -> . IF expression instructions ELSE instructions
    (65) print_statement -> . PRINT expression_list ;
    (61) jump_statement -> . BREAK ;
    (62) jump_statement -> . CONTINUE ;
    (63) return_statement -> . RETURN ;
    (64) return_statement -> . RETURN expression ;
    (68) while_loop -> . WHILE ( expression ) instructions
    (69) for_loop -> . FOR ID = range_value : range_value instructions
    (19) assign_id -> . ID
    (20) assign_id -> . ID vector

    {               shift and go to state 12
    IF              shift and go to state 14
    PRINT           shift and go to state 15
    BREAK           shift and go to state 16
    CONTINUE        shift and go to state 17
    RETURN          shift and go to state 18
    WHILE           shift and go to state 19
    FOR             shift and go to state 20
    ID              shift and go to state 21

    instructions                   shift and go to state 23
    instruction                    shift and go to state 4
    assignment                     shift and go to state 5
    conditional_statement          shift and go to state 6
    print_statement                shift and go to state 7
    jump_statement                 shift and go to state 8
    return_statement               shift and go to state 9
    while_loop                     shift and go to state 10
    for_loop                       shift and go to state 11
    assign_id                      shift and go to state 13

state 13

    (14) assignment -> assign_id . = expression ;
    (15) assignment -> assign_id . MUL_ASSIGN expression ;
    (16) assignment -> assign_id . DIV_ASSIGN expression ;
    (17) assignment -> assign_id . PLUS_ASSIGN expression ;
    (18) assignment -> assign_id . SUB_ASSIGN expression ;

    =               shift and go to state 24
    MUL_ASSIGN      shift and go to state 25
    DIV_ASSIGN      shift and go to state 26
    PLUS_ASSIGN     shift and go to state 27
    SUB_ASSIGN      shift and go to state 28


state 14

    (59) conditional_statement -> IF . expression instructions
    (60) conditional_statement -> IF . expression instructions ELSE instructions
    (21) expression -> . expression_binop
    (22) expression -> . expression_relop
    (23) expression -> . expression_unary
    (24) expression -> . matrix_funcs
    (25) expression -> . constant
    (26) expression -> . ID
    (27) expression -> . matrix
    (28) expression -> . ( expression )
    (29) expression_binop -> . expression + expression
    (30) expression_binop -> . expression - expression
    (31) expression_binop -> . expression * expression
    (32) expression_binop -> . expression / expression
    (33) expression_binop -> . expression MATRIX_PLUS expression
    (34) expression_binop -> . expression MATRIX_SUB expression
    (35) expression_binop -> . expression MATRIX_MUL expression
    (36) expression_binop -> . expression MATRIX_DIV expression
    (37) expression_relop -> . expression RELOP_EQ expression
    (38) expression_relop -> . expression RELOP_GT expression
    (39) expression_relop -> . expression RELOP_LT expression
    (40) expression_relop -> . expression RELOP_GE expression
    (41) expression_relop -> . expression RELOP_LE expression
    (42) expression_relop -> . expression RELOP_NE expression
    (43) expression_unary -> . - expression
    (44) expression_unary -> . expression '
    (45) matrix_funcs -> . ZEROS ( DT_INTEGER )
    (46) matrix_funcs -> . ONES ( DT_INTEGER )
    (47) matrix_funcs -> . EYE ( DT_INTEGER )
    (48) constant -> . DT_STRING
    (49) constant -> . number
    (50) matrix -> . [ vectors ]
    (57) number -> . DT_INTEGER
    (58) number -> . DT_FLOAT

    ID              shift and go to state 35
    (               shift and go to state 37
    -               shift and go to state 38
    ZEROS           shift and go to state 39
    ONES            shift and go to state 41
    EYE             shift and go to state 42
    DT_STRING       shift and go to state 43
    [               shift and go to state 45
    DT_INTEGER      shift and go to state 40
    DT_FLOAT        shift and go to state 46

    expression                     shift and go to state 29
    expression_binop               shift and go to state 30
    expression_relop               shift and go to state 31
    expression_unary               shift and go to state 32
    matrix_funcs                   shift and go to state 33
    constant                       shift and go to state 34
    matrix                         shift and go to state 36
    number                         shift and go to state 44

state 15

    (65) print_statement -> PRINT . expression_list ;
    (66) expression_list -> . expression_list , expression
    (67) expression_list -> . expression
    (21) expression -> . expression_binop
    (22) expression -> . expression_relop
    (23) expression -> . expression_unary
    (24) expression -> . matrix_funcs
    (25) expression -> . constant
    (26) expression -> . ID
    (27) expression -> . matrix
    (28) expression -> . ( expression )
    (29) expression_binop -> . expression + expression
    (30) expression_binop -> . expression - expression
    (31) expression_binop -> . expression * expression
    (32) expression_binop -> . expression / expression
    (33) expression_binop -> . expression MATRIX_PLUS expression
    (34) expression_binop -> . expression MATRIX_SUB expression
    (35) expression_binop -> . expression MATRIX_MUL expression
    (36) expression_binop -> . expression MATRIX_DIV expression
    (37) expression_relop -> . expression RELOP_EQ expression
    (38) expression_relop -> . expression RELOP_GT expression
    (39) expression_relop -> . expression RELOP_LT expression
    (40) expression_relop -> . expression RELOP_GE expression
    (41) expression_relop -> . expression RELOP_LE expression
    (42) expression_relop -> . expression RELOP_NE expression
    (43) expression_unary -> . - expression
    (44) expression_unary -> . expression '
    (45) matrix_funcs -> . ZEROS ( DT_INTEGER )
    (46) matrix_funcs -> . ONES ( DT_INTEGER )
    (47) matrix_funcs -> . EYE ( DT_INTEGER )
    (48) constant -> . DT_STRING
    (49) constant -> . number
    (50) matrix -> . [ vectors ]
    (57) number -> . DT_INTEGER
    (58) number -> . DT_FLOAT

    ID              shift and go to state 35
    (               shift and go to state 37
    -               shift and go to state 38
    ZEROS           shift and go to state 39
    ONES            shift and go to state 41
    EYE             shift and go to state 42
    DT_STRING       shift and go to state 43
    [               shift and go to state 45
    DT_INTEGER      shift and go to state 40
    DT_FLOAT        shift and go to state 46

    expression_list                shift and go to state 47
    expression                     shift and go to state 48
    expression_binop               shift and go to state 30
    expression_relop               shift and go to state 31
    expression_unary               shift and go to state 32
    matrix_funcs                   shift and go to state 33
    constant                       shift and go to state 34
    matrix                         shift and go to state 36
    number                         shift and go to state 44

state 16

    (61) jump_statement -> BREAK . ;

    ;               shift and go to state 49


state 17

    (62) jump_statement -> CONTINUE . ;

    ;               shift and go to state 50


state 18

    (63) return_statement -> RETURN . ;
    (64) return_statement -> RETURN . expression ;
    (21) expression -> . expression_binop
    (22) expression -> . expression_relop
    (23) expression -> . expression_unary
    (24) expression -> . matrix_funcs
    (25) expression -> . constant
    (26) expression -> . ID
    (27) expression -> . matrix
    (28) expression -> . ( expression )
    (29) expression_binop -> . expression + expression
    (30) expression_binop -> . expression - expression
    (31) expression_binop -> . expression * expression
    (32) expression_binop -> . expression / expression
    (33) expression_binop -> . expression MATRIX_PLUS expression
    (34) expression_binop -> . expression MATRIX_SUB expression
    (35) expression_binop -> . expression MATRIX_MUL expression
    (36) expression_binop -> . expression MATRIX_DIV expression
    (37) expression_relop -> . expression RELOP_EQ expression
    (38) expression_relop -> . expression RELOP_GT expression
    (39) expression_relop -> . expression RELOP_LT expression
    (40) expression_relop -> . expression RELOP_GE expression
    (41) expression_relop -> . expression RELOP_LE expression
    (42) expression_relop -> . expression RELOP_NE expression
    (43) expression_unary -> . - expression
    (44) expression_unary -> . expression '
    (45) matrix_funcs -> . ZEROS ( DT_INTEGER )
    (46) matrix_funcs -> . ONES ( DT_INTEGER )
    (47) matrix_funcs -> . EYE ( DT_INTEGER )
    (48) constant -> . DT_STRING
    (49) constant -> . number
    (50) matrix -> . [ vectors ]
    (57) number -> . DT_INTEGER
    (58) number -> . DT_FLOAT

    ;               shift and go to state 51
    ID              shift and go to state 35
    (               shift and go to state 37
    -               shift and go to state 38
    ZEROS           shift and go to state 39
    ONES            shift and go to state 41
    EYE             shift and go to state 42
    DT_STRING       shift and go to state 43
    [               shift and go to state 45
    DT_INTEGER      shift and go to state 40
    DT_FLOAT        shift and go to state 46

    expression                     shift and go to state 52
    expression_binop               shift and go to state 30
    expression_relop               shift and go to state 31
    expression_unary               shift and go to state 32
    matrix_funcs                   shift and go to state 33
    constant                       shift and go to state 34
    matrix                         shift and go to state 36
    number                         shift and go to state 44

state 19

    (68) while_loop -> WHILE . ( expression ) instructions

    (               shift and go to state 53


state 20

    (69) for_loop -> FOR . ID = range_value : range_value instructions

    ID              shift and go to state 54


state 21

    (19) assign_id -> ID .
    (20) assign_id -> ID . vector
    (53) vector -> . [ numbers ]

    =               reduce using rule 19 (assign_id -> ID .)
    MUL_ASSIGN      reduce using rule 19 (assign_id -> ID .)
    DIV_ASSIGN      reduce using rule 19 (assign_id -> ID .)
    PLUS_ASSIGN     reduce using rule 19 (assign_id -> ID .)
    SUB_ASSIGN      reduce using rule 19 (assign_id -> ID .)
    [               shift and go to state 56

    vector                         shift and go to state 55

state 22

    (4) instructions -> instructions instruction .

    {               reduce using rule 4 (instructions -> instructions instruction .)
    IF              reduce using rule 4 (instructions -> instructions instruction .)
    PRINT           reduce using rule 4 (instructions -> instructions instruction .)
    BREAK           reduce using rule 4 (instructions -> instructions instruction .)
    CONTINUE        reduce using rule 4 (instructions -> instructions instruction .)
    RETURN          reduce using rule 4 (instructions -> instructions instruction .)
    WHILE           reduce using rule 4 (instructions -> instructions instruction .)
    FOR             reduce using rule 4 (instructions -> instructions instruction .)
    ID              reduce using rule 4 (instructions -> instructions instruction .)
    $end            reduce using rule 4 (instructions -> instructions instruction .)
    }               reduce using rule 4 (instructions -> instructions instruction .)
    ELSE            reduce using rule 4 (instructions -> instructions instruction .)


state 23

    (13) instruction -> { instructions . }
    (4) instructions -> instructions . instruction
    (6) instruction -> . assignment
    (7) instruction -> . conditional_statement
    (8) instruction -> . print_statement
    (9) instruction -> . jump_statement
    (10) instruction -> . return_statement
    (11) instruction -> . while_loop
    (12) instruction -> . for_loop
    (13) instruction -> . { instructions }
    (14) assignment -> . assign_id = expression ;
    (15) assignment -> . assign_id MUL_ASSIGN expression ;
    (16) assignment -> . assign_id DIV_ASSIGN expression ;
    (17) assignment -> . assign_id PLUS_ASSIGN expression ;
    (18) assignment -> . assign_id SUB_ASSIGN expression ;
    (59) conditional_statement -> . IF expression instructions
    (60) conditional_statement -> . IF expression instructions ELSE instructions
    (65) print_statement -> . PRINT expression_list ;
    (61) jump_statement -> . BREAK ;
    (62) jump_statement -> . CONTINUE ;
    (63) return_statement -> . RETURN ;
    (64) return_statement -> . RETURN expression ;
    (68) while_loop -> . WHILE ( expression ) instructions
    (69) for_loop -> . FOR ID = range_value : range_value instructions
    (19) assign_id -> . ID
    (20) assign_id -> . ID vector

    }               shift and go to state 57
    {               shift and go to state 12
    IF              shift and go to state 14
    PRINT           shift and go to state 15
    BREAK           shift and go to state 16
    CONTINUE        shift and go to state 17
    RETURN          shift and go to state 18
    WHILE           shift and go to state 19
    FOR             shift and go to state 20
    ID              shift and go to state 21

    instruction                    shift and go to state 22
    assignment                     shift and go to state 5
    conditional_statement          shift and go to state 6
    print_statement                shift and go to state 7
    jump_statement                 shift and go to state 8
    return_statement               shift and go to state 9
    while_loop                     shift and go to state 10
    for_loop                       shift and go to state 11
    assign_id                      shift and go to state 13

state 24

    (14) assignment -> assign_id = . expression ;
    (21) expression -> . expression_binop
    (22) expression -> . expression_relop
    (23) expression -> . expression_unary
    (24) expression -> . matrix_funcs
    (25) expression -> . constant
    (26) expression -> . ID
    (27) expression -> . matrix
    (28) expression -> . ( expression )
    (29) expression_binop -> . expression + expression
    (30) expression_binop -> . expression - expression
    (31) expression_binop -> . expression * expression
    (32) expression_binop -> . expression / expression
    (33) expression_binop -> . expression MATRIX_PLUS expression
    (34) expression_binop -> . expression MATRIX_SUB expression
    (35) expression_binop -> . expression MATRIX_MUL expression
    (36) expression_binop -> . expression MATRIX_DIV expression
    (37) expression_relop -> . expression RELOP_EQ expression
    (38) expression_relop -> . expression RELOP_GT expression
    (39) expression_relop -> . expression RELOP_LT expression
    (40) expression_relop -> . expression RELOP_GE expression
    (41) expression_relop -> . expression RELOP_LE expression
    (42) expression_relop -> . expression RELOP_NE expression
    (43) expression_unary -> . - expression
    (44) expression_unary -> . expression '
    (45) matrix_funcs -> . ZEROS ( DT_INTEGER )
    (46) matrix_funcs -> . ONES ( DT_INTEGER )
    (47) matrix_funcs -> . EYE ( DT_INTEGER )
    (48) constant -> . DT_STRING
    (49) constant -> . number
    (50) matrix -> . [ vectors ]
    (57) number -> . DT_INTEGER
    (58) number -> . DT_FLOAT

    ID              shift and go to state 35
    (               shift and go to state 37
    -               shift and go to state 38
    ZEROS           shift and go to state 39
    ONES            shift and go to state 41
    EYE             shift and go to state 42
    DT_STRING       shift and go to state 43
    [               shift and go to state 45
    DT_INTEGER      shift and go to state 40
    DT_FLOAT        shift and go to state 46

    expression                     shift and go to state 58
    expression_binop               shift and go to state 30
    expression_relop               shift and go to state 31
    expression_unary               shift and go to state 32
    matrix_funcs                   shift and go to state 33
    constant                       shift and go to state 34
    matrix                         shift and go to state 36
    number                         shift and go to state 44

state 25

    (15) assignment -> assign_id MUL_ASSIGN . expression ;
    (21) expression -> . expression_binop
    (22) expression -> . expression_relop
    (23) expression -> . expression_unary
    (24) expression -> . matrix_funcs
    (25) expression -> . constant
    (26) expression -> . ID
    (27) expression -> . matrix
    (28) expression -> . ( expression )
    (29) expression_binop -> . expression + expression
    (30) expression_binop -> . expression - expression
    (31) expression_binop -> . expression * expression
    (32) expression_binop -> . expression / expression
    (33) expression_binop -> . expression MATRIX_PLUS expression
    (34) expression_binop -> . expression MATRIX_SUB expression
    (35) expression_binop -> . expression MATRIX_MUL expression
    (36) expression_binop -> . expression MATRIX_DIV expression
    (37) expression_relop -> . expression RELOP_EQ expression
    (38) expression_relop -> . expression RELOP_GT expression
    (39) expression_relop -> . expression RELOP_LT expression
    (40) expression_relop -> . expression RELOP_GE expression
    (41) expression_relop -> . expression RELOP_LE expression
    (42) expression_relop -> . expression RELOP_NE expression
    (43) expression_unary -> . - expression
    (44) expression_unary -> . expression '
    (45) matrix_funcs -> . ZEROS ( DT_INTEGER )
    (46) matrix_funcs -> . ONES ( DT_INTEGER )
    (47) matrix_funcs -> . EYE ( DT_INTEGER )
    (48) constant -> . DT_STRING
    (49) constant -> . number
    (50) matrix -> . [ vectors ]
    (57) number -> . DT_INTEGER
    (58) number -> . DT_FLOAT

    ID              shift and go to state 35
    (               shift and go to state 37
    -               shift and go to state 38
    ZEROS           shift and go to state 39
    ONES            shift and go to state 41
    EYE             shift and go to state 42
    DT_STRING       shift and go to state 43
    [               shift and go to state 45
    DT_INTEGER      shift and go to state 40
    DT_FLOAT        shift and go to state 46

    expression                     shift and go to state 59
    expression_binop               shift and go to state 30
    expression_relop               shift and go to state 31
    expression_unary               shift and go to state 32
    matrix_funcs                   shift and go to state 33
    constant                       shift and go to state 34
    matrix                         shift and go to state 36
    number                         shift and go to state 44

state 26

    (16) assignment -> assign_id DIV_ASSIGN . expression ;
    (21) expression -> . expression_binop
    (22) expression -> . expression_relop
    (23) expression -> . expression_unary
    (24) expression -> . matrix_funcs
    (25) expression -> . constant
    (26) expression -> . ID
    (27) expression -> . matrix
    (28) expression -> . ( expression )
    (29) expression_binop -> . expression + expression
    (30) expression_binop -> . expression - expression
    (31) expression_binop -> . expression * expression
    (32) expression_binop -> . expression / expression
    (33) expression_binop -> . expression MATRIX_PLUS expression
    (34) expression_binop -> . expression MATRIX_SUB expression
    (35) expression_binop -> . expression MATRIX_MUL expression
    (36) expression_binop -> . expression MATRIX_DIV expression
    (37) expression_relop -> . expression RELOP_EQ expression
    (38) expression_relop -> . expression RELOP_GT expression
    (39) expression_relop -> . expression RELOP_LT expression
    (40) expression_relop -> . expression RELOP_GE expression
    (41) expression_relop -> . expression RELOP_LE expression
    (42) expression_relop -> . expression RELOP_NE expression
    (43) expression_unary -> . - expression
    (44) expression_unary -> . expression '
    (45) matrix_funcs -> . ZEROS ( DT_INTEGER )
    (46) matrix_funcs -> . ONES ( DT_INTEGER )
    (47) matrix_funcs -> . EYE ( DT_INTEGER )
    (48) constant -> . DT_STRING
    (49) constant -> . number
    (50) matrix -> . [ vectors ]
    (57) number -> . DT_INTEGER
    (58) number -> . DT_FLOAT

    ID              shift and go to state 35
    (               shift and go to state 37
    -               shift and go to state 38
    ZEROS           shift and go to state 39
    ONES            shift and go to state 41
    EYE             shift and go to state 42
    DT_STRING       shift and go to state 43
    [               shift and go to state 45
    DT_INTEGER      shift and go to state 40
    DT_FLOAT        shift and go to state 46

    expression                     shift and go to state 60
    expression_binop               shift and go to state 30
    expression_relop               shift and go to state 31
    expression_unary               shift and go to state 32
    matrix_funcs                   shift and go to state 33
    constant                       shift and go to state 34
    matrix                         shift and go to state 36
    number                         shift and go to state 44

state 27

    (17) assignment -> assign_id PLUS_ASSIGN . expression ;
    (21) expression -> . expression_binop
    (22) expression -> . expression_relop
    (23) expression -> . expression_unary
    (24) expression -> . matrix_funcs
    (25) expression -> . constant
    (26) expression -> . ID
    (27) expression -> . matrix
    (28) expression -> . ( expression )
    (29) expression_binop -> . expression + expression
    (30) expression_binop -> . expression - expression
    (31) expression_binop -> . expression * expression
    (32) expression_binop -> . expression / expression
    (33) expression_binop -> . expression MATRIX_PLUS expression
    (34) expression_binop -> . expression MATRIX_SUB expression
    (35) expression_binop -> . expression MATRIX_MUL expression
    (36) expression_binop -> . expression MATRIX_DIV expression
    (37) expression_relop -> . expression RELOP_EQ expression
    (38) expression_relop -> . expression RELOP_GT expression
    (39) expression_relop -> . expression RELOP_LT expression
    (40) expression_relop -> . expression RELOP_GE expression
    (41) expression_relop -> . expression RELOP_LE expression
    (42) expression_relop -> . expression RELOP_NE expression
    (43) expression_unary -> . - expression
    (44) expression_unary -> . expression '
    (45) matrix_funcs -> . ZEROS ( DT_INTEGER )
    (46) matrix_funcs -> . ONES ( DT_INTEGER )
    (47) matrix_funcs -> . EYE ( DT_INTEGER )
    (48) constant -> . DT_STRING
    (49) constant -> . number
    (50) matrix -> . [ vectors ]
    (57) number -> . DT_INTEGER
    (58) number -> . DT_FLOAT

    ID              shift and go to state 35
    (               shift and go to state 37
    -               shift and go to state 38
    ZEROS           shift and go to state 39
    ONES            shift and go to state 41
    EYE             shift and go to state 42
    DT_STRING       shift and go to state 43
    [               shift and go to state 45
    DT_INTEGER      shift and go to state 40
    DT_FLOAT        shift and go to state 46

    expression                     shift and go to state 61
    expression_binop               shift and go to state 30
    expression_relop               shift and go to state 31
    expression_unary               shift and go to state 32
    matrix_funcs                   shift and go to state 33
    constant                       shift and go to state 34
    matrix                         shift and go to state 36
    number                         shift and go to state 44

state 28

    (18) assignment -> assign_id SUB_ASSIGN . expression ;
    (21) expression -> . expression_binop
    (22) expression -> . expression_relop
    (23) expression -> . expression_unary
    (24) expression -> . matrix_funcs
    (25) expression -> . constant
    (26) expression -> . ID
    (27) expression -> . matrix
    (28) expression -> . ( expression )
    (29) expression_binop -> . expression + expression
    (30) expression_binop -> . expression - expression
    (31) expression_binop -> . expression * expression
    (32) expression_binop -> . expression / expression
    (33) expression_binop -> . expression MATRIX_PLUS expression
    (34) expression_binop -> . expression MATRIX_SUB expression
    (35) expression_binop -> . expression MATRIX_MUL expression
    (36) expression_binop -> . expression MATRIX_DIV expression
    (37) expression_relop -> . expression RELOP_EQ expression
    (38) expression_relop -> . expression RELOP_GT expression
    (39) expression_relop -> . expression RELOP_LT expression
    (40) expression_relop -> . expression RELOP_GE expression
    (41) expression_relop -> . expression RELOP_LE expression
    (42) expression_relop -> . expression RELOP_NE expression
    (43) expression_unary -> . - expression
    (44) expression_unary -> . expression '
    (45) matrix_funcs -> . ZEROS ( DT_INTEGER )
    (46) matrix_funcs -> . ONES ( DT_INTEGER )
    (47) matrix_funcs -> . EYE ( DT_INTEGER )
    (48) constant -> . DT_STRING
    (49) constant -> . number
    (50) matrix -> . [ vectors ]
    (57) number -> . DT_INTEGER
    (58) number -> . DT_FLOAT

    ID              shift and go to state 35
    (               shift and go to state 37
    -               shift and go to state 38
    ZEROS           shift and go to state 39
    ONES            shift and go to state 41
    EYE             shift and go to state 42
    DT_STRING       shift and go to state 43
    [               shift and go to state 45
    DT_INTEGER      shift and go to state 40
    DT_FLOAT        shift and go to state 46

    expression                     shift and go to state 62
    expression_binop               shift and go to state 30
    expression_relop               shift and go to state 31
    expression_unary               shift and go to state 32
    matrix_funcs                   shift and go to state 33
    constant                       shift and go to state 34
    matrix                         shift and go to state 36
    number                         shift and go to state 44

state 29

    (59) conditional_statement -> IF expression . instructions
    (60) conditional_statement -> IF expression . instructions ELSE instructions
    (29) expression_binop -> expression . + expression
    (30) expression_binop -> expression . - expression
    (31) expression_binop -> expression . * expression
    (32) expression_binop -> expression . / expression
    (33) expression_binop -> expression . MATRIX_PLUS expression
    (34) expression_binop -> expression . MATRIX_SUB expression
    (35) expression_binop -> expression . MATRIX_MUL expression
    (36) expression_binop -> expression . MATRIX_DIV expression
    (37) expression_relop -> expression . RELOP_EQ expression
    (38) expression_relop -> expression . RELOP_GT expression
    (39) expression_relop -> expression . RELOP_LT expression
    (40) expression_relop -> expression . RELOP_GE expression
    (41) expression_relop -> expression . RELOP_LE expression
    (42) expression_relop -> expression . RELOP_NE expression
    (44) expression_unary -> expression . '
    (4) instructions -> . instructions instruction
    (5) instructions -> . instruction
    (6) instruction -> . assignment
    (7) instruction -> . conditional_statement
    (8) instruction -> . print_statement
    (9) instruction -> . jump_statement
    (10) instruction -> . return_statement
    (11) instruction -> . while_loop
    (12) instruction -> . for_loop
    (13) instruction -> . { instructions }
    (14) assignment -> . assign_id = expression ;
    (15) assignment -> . assign_id MUL_ASSIGN expression ;
    (16) assignment -> . assign_id DIV_ASSIGN expression ;
    (17) assignment -> . assign_id PLUS_ASSIGN expression ;
    (18) assignment -> . assign_id SUB_ASSIGN expression ;
    (59) conditional_statement -> . IF expression instructions
    (60) conditional_statement -> . IF expression instructions ELSE instructions
    (65) print_statement -> . PRINT expression_list ;
    (61) jump_statement -> . BREAK ;
    (62) jump_statement -> . CONTINUE ;
    (63) return_statement -> . RETURN ;
    (64) return_statement -> . RETURN expression ;
    (68) while_loop -> . WHILE ( expression ) instructions
    (69) for_loop -> . FOR ID = range_value : range_value instructions
    (19) assign_id -> . ID
    (20) assign_id -> . ID vector

    +               shift and go to state 64
    -               shift and go to state 65
    *               shift and go to state 66
    /               shift and go to state 67
    MATRIX_PLUS     shift and go to state 68
    MATRIX_SUB      shift and go to state 69
    MATRIX_MUL      shift and go to state 70
    MATRIX_DIV      shift and go to state 71
    RELOP_EQ        shift and go to state 72
    RELOP_GT        shift and go to state 73
    RELOP_LT        shift and go to state 74
    RELOP_GE        shift and go to state 75
    RELOP_LE        shift and go to state 76
    RELOP_NE        shift and go to state 77
    '               shift and go to state 78
    {               shift and go to state 12
    IF              shift and go to state 14
    PRINT           shift and go to state 15
    BREAK           shift and go to state 16
    CONTINUE        shift and go to state 17
    RETURN          shift and go to state 18
    WHILE           shift and go to state 19
    FOR             shift and go to state 20
    ID              shift and go to state 21

    instructions                   shift and go to state 63
    instruction                    shift and go to state 4
    assignment                     shift and go to state 5
    conditional_statement          shift and go to state 6
    print_statement                shift and go to state 7
    jump_statement                 shift and go to state 8
    return_statement               shift and go to state 9
    while_loop                     shift and go to state 10
    for_loop                       shift and go to state 11
    assign_id                      shift and go to state 13

state 30

    (21) expression -> expression_binop .

    +               reduce using rule 21 (expression -> expression_binop .)
    -               reduce using rule 21 (expression -> expression_binop .)
    *               reduce using rule 21 (expression -> expression_binop .)
    /               reduce using rule 21 (expression -> expression_binop .)
    MATRIX_PLUS     reduce using rule 21 (expression -> expression_binop .)
    MATRIX_SUB      reduce using rule 21 (expression -> expression_binop .)
    MATRIX_MUL      reduce using rule 21 (expression -> expression_binop .)
    MATRIX_DIV      reduce using rule 21 (expression -> expression_binop .)
    RELOP_EQ        reduce using rule 21 (expression -> expression_binop .)
    RELOP_GT        reduce using rule 21 (expression -> expression_binop .)
    RELOP_LT        reduce using rule 21 (expression -> expression_binop .)
    RELOP_GE        reduce using rule 21 (expression -> expression_binop .)
    RELOP_LE        reduce using rule 21 (expression -> expression_binop .)
    RELOP_NE        reduce using rule 21 (expression -> expression_binop .)
    '               reduce using rule 21 (expression -> expression_binop .)
    {               reduce using rule 21 (expression -> expression_binop .)
    IF              reduce using rule 21 (expression -> expression_binop .)
    PRINT           reduce using rule 21 (expression -> expression_binop .)
    BREAK           reduce using rule 21 (expression -> expression_binop .)
    CONTINUE        reduce using rule 21 (expression -> expression_binop .)
    RETURN          reduce using rule 21 (expression -> expression_binop .)
    WHILE           reduce using rule 21 (expression -> expression_binop .)
    FOR             reduce using rule 21 (expression -> expression_binop .)
    ID              reduce using rule 21 (expression -> expression_binop .)
    ;               reduce using rule 21 (expression -> expression_binop .)
    ,               reduce using rule 21 (expression -> expression_binop .)
    )               reduce using rule 21 (expression -> expression_binop .)


state 31

    (22) expression -> expression_relop .

    +               reduce using rule 22 (expression -> expression_relop .)
    -               reduce using rule 22 (expression -> expression_relop .)
    *               reduce using rule 22 (expression -> expression_relop .)
    /               reduce using rule 22 (expression -> expression_relop .)
    MATRIX_PLUS     reduce using rule 22 (expression -> expression_relop .)
    MATRIX_SUB      reduce using rule 22 (expression -> expression_relop .)
    MATRIX_MUL      reduce using rule 22 (expression -> expression_relop .)
    MATRIX_DIV      reduce using rule 22 (expression -> expression_relop .)
    RELOP_EQ        reduce using rule 22 (expression -> expression_relop .)
    RELOP_GT        reduce using rule 22 (expression -> expression_relop .)
    RELOP_LT        reduce using rule 22 (expression -> expression_relop .)
    RELOP_GE        reduce using rule 22 (expression -> expression_relop .)
    RELOP_LE        reduce using rule 22 (expression -> expression_relop .)
    RELOP_NE        reduce using rule 22 (expression -> expression_relop .)
    '               reduce using rule 22 (expression -> expression_relop .)
    {               reduce using rule 22 (expression -> expression_relop .)
    IF              reduce using rule 22 (expression -> expression_relop .)
    PRINT           reduce using rule 22 (expression -> expression_relop .)
    BREAK           reduce using rule 22 (expression -> expression_relop .)
    CONTINUE        reduce using rule 22 (expression -> expression_relop .)
    RETURN          reduce using rule 22 (expression -> expression_relop .)
    WHILE           reduce using rule 22 (expression -> expression_relop .)
    FOR             reduce using rule 22 (expression -> expression_relop .)
    ID              reduce using rule 22 (expression -> expression_relop .)
    ;               reduce using rule 22 (expression -> expression_relop .)
    ,               reduce using rule 22 (expression -> expression_relop .)
    )               reduce using rule 22 (expression -> expression_relop .)


state 32

    (23) expression -> expression_unary .

    +               reduce using rule 23 (expression -> expression_unary .)
    -               reduce using rule 23 (expression -> expression_unary .)
    *               reduce using rule 23 (expression -> expression_unary .)
    /               reduce using rule 23 (expression -> expression_unary .)
    MATRIX_PLUS     reduce using rule 23 (expression -> expression_unary .)
    MATRIX_SUB      reduce using rule 23 (expression -> expression_unary .)
    MATRIX_MUL      reduce using rule 23 (expression -> expression_unary .)
    MATRIX_DIV      reduce using rule 23 (expression -> expression_unary .)
    RELOP_EQ        reduce using rule 23 (expression -> expression_unary .)
    RELOP_GT        reduce using rule 23 (expression -> expression_unary .)
    RELOP_LT        reduce using rule 23 (expression -> expression_unary .)
    RELOP_GE        reduce using rule 23 (expression -> expression_unary .)
    RELOP_LE        reduce using rule 23 (expression -> expression_unary .)
    RELOP_NE        reduce using rule 23 (expression -> expression_unary .)
    '               reduce using rule 23 (expression -> expression_unary .)
    {               reduce using rule 23 (expression -> expression_unary .)
    IF              reduce using rule 23 (expression -> expression_unary .)
    PRINT           reduce using rule 23 (expression -> expression_unary .)
    BREAK           reduce using rule 23 (expression -> expression_unary .)
    CONTINUE        reduce using rule 23 (expression -> expression_unary .)
    RETURN          reduce using rule 23 (expression -> expression_unary .)
    WHILE           reduce using rule 23 (expression -> expression_unary .)
    FOR             reduce using rule 23 (expression -> expression_unary .)
    ID              reduce using rule 23 (expression -> expression_unary .)
    ;               reduce using rule 23 (expression -> expression_unary .)
    ,               reduce using rule 23 (expression -> expression_unary .)
    )               reduce using rule 23 (expression -> expression_unary .)


state 33

    (24) expression -> matrix_funcs .

    +               reduce using rule 24 (expression -> matrix_funcs .)
    -               reduce using rule 24 (expression -> matrix_funcs .)
    *               reduce using rule 24 (expression -> matrix_funcs .)
    /               reduce using rule 24 (expression -> matrix_funcs .)
    MATRIX_PLUS     reduce using rule 24 (expression -> matrix_funcs .)
    MATRIX_SUB      reduce using rule 24 (expression -> matrix_funcs .)
    MATRIX_MUL      reduce using rule 24 (expression -> matrix_funcs .)
    MATRIX_DIV      reduce using rule 24 (expression -> matrix_funcs .)
    RELOP_EQ        reduce using rule 24 (expression -> matrix_funcs .)
    RELOP_GT        reduce using rule 24 (expression -> matrix_funcs .)
    RELOP_LT        reduce using rule 24 (expression -> matrix_funcs .)
    RELOP_GE        reduce using rule 24 (expression -> matrix_funcs .)
    RELOP_LE        reduce using rule 24 (expression -> matrix_funcs .)
    RELOP_NE        reduce using rule 24 (expression -> matrix_funcs .)
    '               reduce using rule 24 (expression -> matrix_funcs .)
    {               reduce using rule 24 (expression -> matrix_funcs .)
    IF              reduce using rule 24 (expression -> matrix_funcs .)
    PRINT           reduce using rule 24 (expression -> matrix_funcs .)
    BREAK           reduce using rule 24 (expression -> matrix_funcs .)
    CONTINUE        reduce using rule 24 (expression -> matrix_funcs .)
    RETURN          reduce using rule 24 (expression -> matrix_funcs .)
    WHILE           reduce using rule 24 (expression -> matrix_funcs .)
    FOR             reduce using rule 24 (expression -> matrix_funcs .)
    ID              reduce using rule 24 (expression -> matrix_funcs .)
    ;               reduce using rule 24 (expression -> matrix_funcs .)
    ,               reduce using rule 24 (expression -> matrix_funcs .)
    )               reduce using rule 24 (expression -> matrix_funcs .)


state 34

    (25) expression -> constant .

    +               reduce using rule 25 (expression -> constant .)
    -               reduce using rule 25 (expression -> constant .)
    *               reduce using rule 25 (expression -> constant .)
    /               reduce using rule 25 (expression -> constant .)
    MATRIX_PLUS     reduce using rule 25 (expression -> constant .)
    MATRIX_SUB      reduce using rule 25 (expression -> constant .)
    MATRIX_MUL      reduce using rule 25 (expression -> constant .)
    MATRIX_DIV      reduce using rule 25 (expression -> constant .)
    RELOP_EQ        reduce using rule 25 (expression -> constant .)
    RELOP_GT        reduce using rule 25 (expression -> constant .)
    RELOP_LT        reduce using rule 25 (expression -> constant .)
    RELOP_GE        reduce using rule 25 (expression -> constant .)
    RELOP_LE        reduce using rule 25 (expression -> constant .)
    RELOP_NE        reduce using rule 25 (expression -> constant .)
    '               reduce using rule 25 (expression -> constant .)
    {               reduce using rule 25 (expression -> constant .)
    IF              reduce using rule 25 (expression -> constant .)
    PRINT           reduce using rule 25 (expression -> constant .)
    BREAK           reduce using rule 25 (expression -> constant .)
    CONTINUE        reduce using rule 25 (expression -> constant .)
    RETURN          reduce using rule 25 (expression -> constant .)
    WHILE           reduce using rule 25 (expression -> constant .)
    FOR             reduce using rule 25 (expression -> constant .)
    ID              reduce using rule 25 (expression -> constant .)
    ;               reduce using rule 25 (expression -> constant .)
    ,               reduce using rule 25 (expression -> constant .)
    )               reduce using rule 25 (expression -> constant .)


state 35

    (26) expression -> ID .

    +               reduce using rule 26 (expression -> ID .)
    -               reduce using rule 26 (expression -> ID .)
    *               reduce using rule 26 (expression -> ID .)
    /               reduce using rule 26 (expression -> ID .)
    MATRIX_PLUS     reduce using rule 26 (expression -> ID .)
    MATRIX_SUB      reduce using rule 26 (expression -> ID .)
    MATRIX_MUL      reduce using rule 26 (expression -> ID .)
    MATRIX_DIV      reduce using rule 26 (expression -> ID .)
    RELOP_EQ        reduce using rule 26 (expression -> ID .)
    RELOP_GT        reduce using rule 26 (expression -> ID .)
    RELOP_LT        reduce using rule 26 (expression -> ID .)
    RELOP_GE        reduce using rule 26 (expression -> ID .)
    RELOP_LE        reduce using rule 26 (expression -> ID .)
    RELOP_NE        reduce using rule 26 (expression -> ID .)
    '               reduce using rule 26 (expression -> ID .)
    {               reduce using rule 26 (expression -> ID .)
    IF              reduce using rule 26 (expression -> ID .)
    PRINT           reduce using rule 26 (expression -> ID .)
    BREAK           reduce using rule 26 (expression -> ID .)
    CONTINUE        reduce using rule 26 (expression -> ID .)
    RETURN          reduce using rule 26 (expression -> ID .)
    WHILE           reduce using rule 26 (expression -> ID .)
    FOR             reduce using rule 26 (expression -> ID .)
    ID              reduce using rule 26 (expression -> ID .)
    ;               reduce using rule 26 (expression -> ID .)
    ,               reduce using rule 26 (expression -> ID .)
    )               reduce using rule 26 (expression -> ID .)


state 36

    (27) expression -> matrix .

    +               reduce using rule 27 (expression -> matrix .)
    -               reduce using rule 27 (expression -> matrix .)
    *               reduce using rule 27 (expression -> matrix .)
    /               reduce using rule 27 (expression -> matrix .)
    MATRIX_PLUS     reduce using rule 27 (expression -> matrix .)
    MATRIX_SUB      reduce using rule 27 (expression -> matrix .)
    MATRIX_MUL      reduce using rule 27 (expression -> matrix .)
    MATRIX_DIV      reduce using rule 27 (expression -> matrix .)
    RELOP_EQ        reduce using rule 27 (expression -> matrix .)
    RELOP_GT        reduce using rule 27 (expression -> matrix .)
    RELOP_LT        reduce using rule 27 (expression -> matrix .)
    RELOP_GE        reduce using rule 27 (expression -> matrix .)
    RELOP_LE        reduce using rule 27 (expression -> matrix .)
    RELOP_NE        reduce using rule 27 (expression -> matrix .)
    '               reduce using rule 27 (expression -> matrix .)
    {               reduce using rule 27 (expression -> matrix .)
    IF              reduce using rule 27 (expression -> matrix .)
    PRINT           reduce using rule 27 (expression -> matrix .)
    BREAK           reduce using rule 27 (expression -> matrix .)
    CONTINUE        reduce using rule 27 (expression -> matrix .)
    RETURN          reduce using rule 27 (expression -> matrix .)
    WHILE           reduce using rule 27 (expression -> matrix .)
    FOR             reduce using rule 27 (expression -> matrix .)
    ID              reduce using rule 27 (expression -> matrix .)
    ;               reduce using rule 27 (expression -> matrix .)
    ,               reduce using rule 27 (expression -> matrix .)
    )               reduce using rule 27 (expression -> matrix .)


state 37

    (28) expression -> ( . expression )
    (21) expression -> . expression_binop
    (22) expression -> . expression_relop
    (23) expression -> . expression_unary
    (24) expression -> . matrix_funcs
    (25) expression -> . constant
    (26) expression -> . ID
    (27) expression -> . matrix
    (28) expression -> . ( expression )
    (29) expression_binop -> . expression + expression
    (30) expression_binop -> . expression - expression
    (31) expression_binop -> . expression * expression
    (32) expression_binop -> . expression / expression
    (33) expression_binop -> . expression MATRIX_PLUS expression
    (34) expression_binop -> . expression MATRIX_SUB expression
    (35) expression_binop -> . expression MATRIX_MUL expression
    (36) expression_binop -> . expression MATRIX_DIV expression
    (37) expression_relop -> . expression RELOP_EQ expression
    (38) expression_relop -> . expression RELOP_GT expression
    (39) expression_relop -> . expression RELOP_LT expression
    (40) expression_relop -> . expression RELOP_GE expression
    (41) expression_relop -> . expression RELOP_LE expression
    (42) expression_relop -> . expression RELOP_NE expression
    (43) expression_unary -> . - expression
    (44) expression_unary -> . expression '
    (45) matrix_funcs -> . ZEROS ( DT_INTEGER )
    (46) matrix_funcs -> . ONES ( DT_INTEGER )
    (47) matrix_funcs -> . EYE ( DT_INTEGER )
    (48) constant -> . DT_STRING
    (49) constant -> . number
    (50) matrix -> . [ vectors ]
    (57) number -> . DT_INTEGER
    (58) number -> . DT_FLOAT

    ID              shift and go to state 35
    (               shift and go to state 37
    -               shift and go to state 38
    ZEROS           shift and go to state 39
    ONES            shift and go to state 41
    EYE             shift and go to state 42
    DT_STRING       shift and go to state 43
    [               shift and go to state 45
    DT_INTEGER      shift and go to state 40
    DT_FLOAT        shift and go to state 46

    expression                     shift and go to state 79
    expression_binop               shift and go to state 30
    expression_relop               shift and go to state 31
    expression_unary               shift and go to state 32
    matrix_funcs                   shift and go to state 33
    constant                       shift and go to state 34
    matrix                         shift and go to state 36
    number                         shift and go to state 44

state 38

    (43) expression_unary -> - . expression
    (21) expression -> . expression_binop
    (22) expression -> . expression_relop
    (23) expression -> . expression_unary
    (24) expression -> . matrix_funcs
    (25) expression -> . constant
    (26) expression -> . ID
    (27) expression -> . matrix
    (28) expression -> . ( expression )
    (29) expression_binop -> . expression + expression
    (30) expression_binop -> . expression - expression
    (31) expression_binop -> . expression * expression
    (32) expression_binop -> . expression / expression
    (33) expression_binop -> . expression MATRIX_PLUS expression
    (34) expression_binop -> . expression MATRIX_SUB expression
    (35) expression_binop -> . expression MATRIX_MUL expression
    (36) expression_binop -> . expression MATRIX_DIV expression
    (37) expression_relop -> . expression RELOP_EQ expression
    (38) expression_relop -> . expression RELOP_GT expression
    (39) expression_relop -> . expression RELOP_LT expression
    (40) expression_relop -> . expression RELOP_GE expression
    (41) expression_relop -> . expression RELOP_LE expression
    (42) expression_relop -> . expression RELOP_NE expression
    (43) expression_unary -> . - expression
    (44) expression_unary -> . expression '
    (45) matrix_funcs -> . ZEROS ( DT_INTEGER )
    (46) matrix_funcs -> . ONES ( DT_INTEGER )
    (47) matrix_funcs -> . EYE ( DT_INTEGER )
    (48) constant -> . DT_STRING
    (49) constant -> . number
    (50) matrix -> . [ vectors ]
    (57) number -> . DT_INTEGER
    (58) number -> . DT_FLOAT

    ID              shift and go to state 35
    (               shift and go to state 37
    -               shift and go to state 38
    ZEROS           shift and go to state 39
    ONES            shift and go to state 41
    EYE             shift and go to state 42
    DT_STRING       shift and go to state 43
    [               shift and go to state 45
    DT_INTEGER      shift and go to state 40
    DT_FLOAT        shift and go to state 46

    expression                     shift and go to state 80
    expression_binop               shift and go to state 30
    expression_relop               shift and go to state 31
    expression_unary               shift and go to state 32
    matrix_funcs                   shift and go to state 33
    constant                       shift and go to state 34
    matrix                         shift and go to state 36
    number                         shift and go to state 44

state 39

    (45) matrix_funcs -> ZEROS . ( DT_INTEGER )

    (               shift and go to state 81


state 40

    (57) number -> DT_INTEGER .

    +               reduce using rule 57 (number -> DT_INTEGER .)
    -               reduce using rule 57 (number -> DT_INTEGER .)
    *               reduce using rule 57 (number -> DT_INTEGER .)
    /               reduce using rule 57 (number -> DT_INTEGER .)
    MATRIX_PLUS     reduce using rule 57 (number -> DT_INTEGER .)
    MATRIX_SUB      reduce using rule 57 (number -> DT_INTEGER .)
    MATRIX_MUL      reduce using rule 57 (number -> DT_INTEGER .)
    MATRIX_DIV      reduce using rule 57 (number -> DT_INTEGER .)
    RELOP_EQ        reduce using rule 57 (number -> DT_INTEGER .)
    RELOP_GT        reduce using rule 57 (number -> DT_INTEGER .)
    RELOP_LT        reduce using rule 57 (number -> DT_INTEGER .)
    RELOP_GE        reduce using rule 57 (number -> DT_INTEGER .)
    RELOP_LE        reduce using rule 57 (number -> DT_INTEGER .)
    RELOP_NE        reduce using rule 57 (number -> DT_INTEGER .)
    '               reduce using rule 57 (number -> DT_INTEGER .)
    {               reduce using rule 57 (number -> DT_INTEGER .)
    IF              reduce using rule 57 (number -> DT_INTEGER .)
    PRINT           reduce using rule 57 (number -> DT_INTEGER .)
    BREAK           reduce using rule 57 (number -> DT_INTEGER .)
    CONTINUE        reduce using rule 57 (number -> DT_INTEGER .)
    RETURN          reduce using rule 57 (number -> DT_INTEGER .)
    WHILE           reduce using rule 57 (number -> DT_INTEGER .)
    FOR             reduce using rule 57 (number -> DT_INTEGER .)
    ID              reduce using rule 57 (number -> DT_INTEGER .)
    ;               reduce using rule 57 (number -> DT_INTEGER .)
    ,               reduce using rule 57 (number -> DT_INTEGER .)
    )               reduce using rule 57 (number -> DT_INTEGER .)
    ]               reduce using rule 57 (number -> DT_INTEGER .)


state 41

    (46) matrix_funcs -> ONES . ( DT_INTEGER )

    (               shift and go to state 82


state 42

    (47) matrix_funcs -> EYE . ( DT_INTEGER )

    (               shift and go to state 83


state 43

    (48) constant -> DT_STRING .

    +               reduce using rule 48 (constant -> DT_STRING .)
    -               reduce using rule 48 (constant -> DT_STRING .)
    *               reduce using rule 48 (constant -> DT_STRING .)
    /               reduce using rule 48 (constant -> DT_STRING .)
    MATRIX_PLUS     reduce using rule 48 (constant -> DT_STRING .)
    MATRIX_SUB      reduce using rule 48 (constant -> DT_STRING .)
    MATRIX_MUL      reduce using rule 48 (constant -> DT_STRING .)
    MATRIX_DIV      reduce using rule 48 (constant -> DT_STRING .)
    RELOP_EQ        reduce using rule 48 (constant -> DT_STRING .)
    RELOP_GT        reduce using rule 48 (constant -> DT_STRING .)
    RELOP_LT        reduce using rule 48 (constant -> DT_STRING .)
    RELOP_GE        reduce using rule 48 (constant -> DT_STRING .)
    RELOP_LE        reduce using rule 48 (constant -> DT_STRING .)
    RELOP_NE        reduce using rule 48 (constant -> DT_STRING .)
    '               reduce using rule 48 (constant -> DT_STRING .)
    {               reduce using rule 48 (constant -> DT_STRING .)
    IF              reduce using rule 48 (constant -> DT_STRING .)
    PRINT           reduce using rule 48 (constant -> DT_STRING .)
    BREAK           reduce using rule 48 (constant -> DT_STRING .)
    CONTINUE        reduce using rule 48 (constant -> DT_STRING .)
    RETURN          reduce using rule 48 (constant -> DT_STRING .)
    WHILE           reduce using rule 48 (constant -> DT_STRING .)
    FOR             reduce using rule 48 (constant -> DT_STRING .)
    ID              reduce using rule 48 (constant -> DT_STRING .)
    ;               reduce using rule 48 (constant -> DT_STRING .)
    ,               reduce using rule 48 (constant -> DT_STRING .)
    )               reduce using rule 48 (constant -> DT_STRING .)


state 44

    (49) constant -> number .

    +               reduce using rule 49 (constant -> number .)
    -               reduce using rule 49 (constant -> number .)
    *               reduce using rule 49 (constant -> number .)
    /               reduce using rule 49 (constant -> number .)
    MATRIX_PLUS     reduce using rule 49 (constant -> number .)
    MATRIX_SUB      reduce using rule 49 (constant -> number .)
    MATRIX_MUL      reduce using rule 49 (constant -> number .)
    MATRIX_DIV      reduce using rule 49 (constant -> number .)
    RELOP_EQ        reduce using rule 49 (constant -> number .)
    RELOP_GT        reduce using rule 49 (constant -> number .)
    RELOP_LT        reduce using rule 49 (constant -> number .)
    RELOP_GE        reduce using rule 49 (constant -> number .)
    RELOP_LE        reduce using rule 49 (constant -> number .)
    RELOP_NE        reduce using rule 49 (constant -> number .)
    '               reduce using rule 49 (constant -> number .)
    {               reduce using rule 49 (constant -> number .)
    IF              reduce using rule 49 (constant -> number .)
    PRINT           reduce using rule 49 (constant -> number .)
    BREAK           reduce using rule 49 (constant -> number .)
    CONTINUE        reduce using rule 49 (constant -> number .)
    RETURN          reduce using rule 49 (constant -> number .)
    WHILE           reduce using rule 49 (constant -> number .)
    FOR             reduce using rule 49 (constant -> number .)
    ID              reduce using rule 49 (constant -> number .)
    ;               reduce using rule 49 (constant -> number .)
    ,               reduce using rule 49 (constant -> number .)
    )               reduce using rule 49 (constant -> number .)


state 45

    (50) matrix -> [ . vectors ]
    (51) vectors -> . vector
    (52) vectors -> . vectors , vector
    (53) vector -> . [ numbers ]

    [               shift and go to state 56

    vectors                        shift and go to state 84
    vector                         shift and go to state 85

state 46

    (58) number -> DT_FLOAT .

    +               reduce using rule 58 (number -> DT_FLOAT .)
    -               reduce using rule 58 (number -> DT_FLOAT .)
    *               reduce using rule 58 (number -> DT_FLOAT .)
    /               reduce using rule 58 (number -> DT_FLOAT .)
    MATRIX_PLUS     reduce using rule 58 (number -> DT_FLOAT .)
    MATRIX_SUB      reduce using rule 58 (number -> DT_FLOAT .)
    MATRIX_MUL      reduce using rule 58 (number -> DT_FLOAT .)
    MATRIX_DIV      reduce using rule 58 (number -> DT_FLOAT .)
    RELOP_EQ        reduce using rule 58 (number -> DT_FLOAT .)
    RELOP_GT        reduce using rule 58 (number -> DT_FLOAT .)
    RELOP_LT        reduce using rule 58 (number -> DT_FLOAT .)
    RELOP_GE        reduce using rule 58 (number -> DT_FLOAT .)
    RELOP_LE        reduce using rule 58 (number -> DT_FLOAT .)
    RELOP_NE        reduce using rule 58 (number -> DT_FLOAT .)
    '               reduce using rule 58 (number -> DT_FLOAT .)
    {               reduce using rule 58 (number -> DT_FLOAT .)
    IF              reduce using rule 58 (number -> DT_FLOAT .)
    PRINT           reduce using rule 58 (number -> DT_FLOAT .)
    BREAK           reduce using rule 58 (number -> DT_FLOAT .)
    CONTINUE        reduce using rule 58 (number -> DT_FLOAT .)
    RETURN          reduce using rule 58 (number -> DT_FLOAT .)
    WHILE           reduce using rule 58 (number -> DT_FLOAT .)
    FOR             reduce using rule 58 (number -> DT_FLOAT .)
    ID              reduce using rule 58 (number -> DT_FLOAT .)
    ;               reduce using rule 58 (number -> DT_FLOAT .)
    ,               reduce using rule 58 (number -> DT_FLOAT .)
    )               reduce using rule 58 (number -> DT_FLOAT .)
    ]               reduce using rule 58 (number -> DT_FLOAT .)


state 47

    (65) print_statement -> PRINT expression_list . ;
    (66) expression_list -> expression_list . , expression

    ;               shift and go to state 86
    ,               shift and go to state 87


state 48

    (67) expression_list -> expression .
    (29) expression_binop -> expression . + expression
    (30) expression_binop -> expression . - expression
    (31) expression_binop -> expression . * expression
    (32) expression_binop -> expression . / expression
    (33) expression_binop -> expression . MATRIX_PLUS expression
    (34) expression_binop -> expression . MATRIX_SUB expression
    (35) expression_binop -> expression . MATRIX_MUL expression
    (36) expression_binop -> expression . MATRIX_DIV expression
    (37) expression_relop -> expression . RELOP_EQ expression
    (38) expression_relop -> expression . RELOP_GT expression
    (39) expression_relop -> expression . RELOP_LT expression
    (40) expression_relop -> expression . RELOP_GE expression
    (41) expression_relop -> expression . RELOP_LE expression
    (42) expression_relop -> expression . RELOP_NE expression
    (44) expression_unary -> expression . '

    ;               reduce using rule 67 (expression_list -> expression .)
    ,               reduce using rule 67 (expression_list -> expression .)
    +               shift and go to state 64
    -               shift and go to state 65
    *               shift and go to state 66
    /               shift and go to state 67
    MATRIX_PLUS     shift and go to state 68
    MATRIX_SUB      shift and go to state 69
    MATRIX_MUL      shift and go to state 70
    MATRIX_DIV      shift and go to state 71
    RELOP_EQ        shift and go to state 72
    RELOP_GT        shift and go to state 73
    RELOP_LT        shift and go to state 74
    RELOP_GE        shift and go to state 75
    RELOP_LE        shift and go to state 76
    RELOP_NE        shift and go to state 77
    '               shift and go to state 78


state 49

    (61) jump_statement -> BREAK ; .

    {               reduce using rule 61 (jump_statement -> BREAK ; .)
    IF              reduce using rule 61 (jump_statement -> BREAK ; .)
    PRINT           reduce using rule 61 (jump_statement -> BREAK ; .)
    BREAK           reduce using rule 61 (jump_statement -> BREAK ; .)
    CONTINUE        reduce using rule 61 (jump_statement -> BREAK ; .)
    RETURN          reduce using rule 61 (jump_statement -> BREAK ; .)
    WHILE           reduce using rule 61 (jump_statement -> BREAK ; .)
    FOR             reduce using rule 61 (jump_statement -> BREAK ; .)
    ID              reduce using rule 61 (jump_statement -> BREAK ; .)
    $end            reduce using rule 61 (jump_statement -> BREAK ; .)
    }               reduce using rule 61 (jump_statement -> BREAK ; .)
    ELSE            reduce using rule 61 (jump_statement -> BREAK ; .)


state 50

    (62) jump_statement -> CONTINUE ; .

    {               reduce using rule 62 (jump_statement -> CONTINUE ; .)
    IF              reduce using rule 62 (jump_statement -> CONTINUE ; .)
    PRINT           reduce using rule 62 (jump_statement -> CONTINUE ; .)
    BREAK           reduce using rule 62 (jump_statement -> CONTINUE ; .)
    CONTINUE        reduce using rule 62 (jump_statement -> CONTINUE ; .)
    RETURN          reduce using rule 62 (jump_statement -> CONTINUE ; .)
    WHILE           reduce using rule 62 (jump_statement -> CONTINUE ; .)
    FOR             reduce using rule 62 (jump_statement -> CONTINUE ; .)
    ID              reduce using rule 62 (jump_statement -> CONTINUE ; .)
    $end            reduce using rule 62 (jump_statement -> CONTINUE ; .)
    }               reduce using rule 62 (jump_statement -> CONTINUE ; .)
    ELSE            reduce using rule 62 (jump_statement -> CONTINUE ; .)


state 51

    (63) return_statement -> RETURN ; .

    {               reduce using rule 63 (return_statement -> RETURN ; .)
    IF              reduce using rule 63 (return_statement -> RETURN ; .)
    PRINT           reduce using rule 63 (return_statement -> RETURN ; .)
    BREAK           reduce using rule 63 (return_statement -> RETURN ; .)
    CONTINUE        reduce using rule 63 (return_statement -> RETURN ; .)
    RETURN          reduce using rule 63 (return_statement -> RETURN ; .)
    WHILE           reduce using rule 63 (return_statement -> RETURN ; .)
    FOR             reduce using rule 63 (return_statement -> RETURN ; .)
    ID              reduce using rule 63 (return_statement -> RETURN ; .)
    $end            reduce using rule 63 (return_statement -> RETURN ; .)
    }               reduce using rule 63 (return_statement -> RETURN ; .)
    ELSE            reduce using rule 63 (return_statement -> RETURN ; .)


state 52

    (64) return_statement -> RETURN expression . ;
    (29) expression_binop -> expression . + expression
    (30) expression_binop -> expression . - expression
    (31) expression_binop -> expression . * expression
    (32) expression_binop -> expression . / expression
    (33) expression_binop -> expression . MATRIX_PLUS expression
    (34) expression_binop -> expression . MATRIX_SUB expression
    (35) expression_binop -> expression . MATRIX_MUL expression
    (36) expression_binop -> expression . MATRIX_DIV expression
    (37) expression_relop -> expression . RELOP_EQ expression
    (38) expression_relop -> expression . RELOP_GT expression
    (39) expression_relop -> expression . RELOP_LT expression
    (40) expression_relop -> expression . RELOP_GE expression
    (41) expression_relop -> expression . RELOP_LE expression
    (42) expression_relop -> expression . RELOP_NE expression
    (44) expression_unary -> expression . '

    ;               shift and go to state 88
    +               shift and go to state 64
    -               shift and go to state 65
    *               shift and go to state 66
    /               shift and go to state 67
    MATRIX_PLUS     shift and go to state 68
    MATRIX_SUB      shift and go to state 69
    MATRIX_MUL      shift and go to state 70
    MATRIX_DIV      shift and go to state 71
    RELOP_EQ        shift and go to state 72
    RELOP_GT        shift and go to state 73
    RELOP_LT        shift and go to state 74
    RELOP_GE        shift and go to state 75
    RELOP_LE        shift and go to state 76
    RELOP_NE        shift and go to state 77
    '               shift and go to state 78


state 53

    (68) while_loop -> WHILE ( . expression ) instructions
    (21) expression -> . expression_binop
    (22) expression -> . expression_relop
    (23) expression -> . expression_unary
    (24) expression -> . matrix_funcs
    (25) expression -> . constant
    (26) expression -> . ID
    (27) expression -> . matrix
    (28) expression -> . ( expression )
    (29) expression_binop -> . expression + expression
    (30) expression_binop -> . expression - expression
    (31) expression_binop -> . expression * expression
    (32) expression_binop -> . expression / expression
    (33) expression_binop -> . expression MATRIX_PLUS expression
    (34) expression_binop -> . expression MATRIX_SUB expression
    (35) expression_binop -> . expression MATRIX_MUL expression
    (36) expression_binop -> . expression MATRIX_DIV expression
    (37) expression_relop -> . expression RELOP_EQ expression
    (38) expression_relop -> . expression RELOP_GT expression
    (39) expression_relop -> . expression RELOP_LT expression
    (40) expression_relop -> . expression RELOP_GE expression
    (41) expression_relop -> . expression RELOP_LE expression
    (42) expression_relop -> . expression RELOP_NE expression
    (43) expression_unary -> . - expression
    (44) expression_unary -> . expression '
    (45) matrix_funcs -> . ZEROS ( DT_INTEGER )
    (46) matrix_funcs -> . ONES ( DT_INTEGER )
    (47) matrix_funcs -> . EYE ( DT_INTEGER )
    (48) constant -> . DT_STRING
    (49) constant -> . number
    (50) matrix -> . [ vectors ]
    (57) number -> . DT_INTEGER
    (58) number -> . DT_FLOAT

    ID              shift and go to state 35
    (               shift and go to state 37
    -               shift and go to state 38
    ZEROS           shift and go to state 39
    ONES            shift and go to state 41
    EYE             shift and go to state 42
    DT_STRING       shift and go to state 43
    [               shift and go to state 45
    DT_INTEGER      shift and go to state 40
    DT_FLOAT        shift and go to state 46

    expression                     shift and go to state 89
    expression_binop               shift and go to state 30
    expression_relop               shift and go to state 31
    expression_unary               shift and go to state 32
    matrix_funcs                   shift and go to state 33
    constant                       shift and go to state 34
    matrix                         shift and go to state 36
    number                         shift and go to state 44

state 54

    (69) for_loop -> FOR ID . = range_value : range_value instructions

    =               shift and go to state 90


state 55

    (20) assign_id -> ID vector .

    =               reduce using rule 20 (assign_id -> ID vector .)
    MUL_ASSIGN      reduce using rule 20 (assign_id -> ID vector .)
    DIV_ASSIGN      reduce using rule 20 (assign_id -> ID vector .)
    PLUS_ASSIGN     reduce using rule 20 (assign_id -> ID vector .)
    SUB_ASSIGN      reduce using rule 20 (assign_id -> ID vector .)


state 56

    (53) vector -> [ . numbers ]
    (54) numbers -> . numbers , number
    (55) numbers -> . number
    (56) numbers -> .
    (57) number -> . DT_INTEGER
    (58) number -> . DT_FLOAT

    ]               reduce using rule 56 (numbers -> .)
    ,               reduce using rule 56 (numbers -> .)
    DT_INTEGER      shift and go to state 40
    DT_FLOAT        shift and go to state 46

    numbers                        shift and go to state 91
    number                         shift and go to state 92

state 57

    (13) instruction -> { instructions } .

    {               reduce using rule 13 (instruction -> { instructions } .)
    IF              reduce using rule 13 (instruction -> { instructions } .)
    PRINT           reduce using rule 13 (instruction -> { instructions } .)
    BREAK           reduce using rule 13 (instruction -> { instructions } .)
    CONTINUE        reduce using rule 13 (instruction -> { instructions } .)
    RETURN          reduce using rule 13 (instruction -> { instructions } .)
    WHILE           reduce using rule 13 (instruction -> { instructions } .)
    FOR             reduce using rule 13 (instruction -> { instructions } .)
    ID              reduce using rule 13 (instruction -> { instructions } .)
    $end            reduce using rule 13 (instruction -> { instructions } .)
    }               reduce using rule 13 (instruction -> { instructions } .)
    ELSE            reduce using rule 13 (instruction -> { instructions } .)


state 58

    (14) assignment -> assign_id = expression . ;
    (29) expression_binop -> expression . + expression
    (30) expression_binop -> expression . - expression
    (31) expression_binop -> expression . * expression
    (32) expression_binop -> expression . / expression
    (33) expression_binop -> expression . MATRIX_PLUS expression
    (34) expression_binop -> expression . MATRIX_SUB expression
    (35) expression_binop -> expression . MATRIX_MUL expression
    (36) expression_binop -> expression . MATRIX_DIV expression
    (37) expression_relop -> expression . RELOP_EQ expression
    (38) expression_relop -> expression . RELOP_GT expression
    (39) expression_relop -> expression . RELOP_LT expression
    (40) expression_relop -> expression . RELOP_GE expression
    (41) expression_relop -> expression . RELOP_LE expression
    (42) expression_relop -> expression . RELOP_NE expression
    (44) expression_unary -> expression . '

    ;               shift and go to state 93
    +               shift and go to state 64
    -               shift and go to state 65
    *               shift and go to state 66
    /               shift and go to state 67
    MATRIX_PLUS     shift and go to state 68
    MATRIX_SUB      shift and go to state 69
    MATRIX_MUL      shift and go to state 70
    MATRIX_DIV      shift and go to state 71
    RELOP_EQ        shift and go to state 72
    RELOP_GT        shift and go to state 73
    RELOP_LT        shift and go to state 74
    RELOP_GE        shift and go to state 75
    RELOP_LE        shift and go to state 76
    RELOP_NE        shift and go to state 77
    '               shift and go to state 78


state 59

    (15) assignment -> assign_id MUL_ASSIGN expression . ;
    (29) expression_binop -> expression . + expression
    (30) expression_binop -> expression . - expression
    (31) expression_binop -> expression . * expression
    (32) expression_binop -> expression . / expression
    (33) expression_binop -> expression . MATRIX_PLUS expression
    (34) expression_binop -> expression . MATRIX_SUB expression
    (35) expression_binop -> expression . MATRIX_MUL expression
    (36) expression_binop -> expression . MATRIX_DIV expression
    (37) expression_relop -> expression . RELOP_EQ expression
    (38) expression_relop -> expression . RELOP_GT expression
    (39) expression_relop -> expression . RELOP_LT expression
    (40) expression_relop -> expression . RELOP_GE expression
    (41) expression_relop -> expression . RELOP_LE expression
    (42) expression_relop -> expression . RELOP_NE expression
    (44) expression_unary -> expression . '

    ;               shift and go to state 94
    +               shift and go to state 64
    -               shift and go to state 65
    *               shift and go to state 66
    /               shift and go to state 67
    MATRIX_PLUS     shift and go to state 68
    MATRIX_SUB      shift and go to state 69
    MATRIX_MUL      shift and go to state 70
    MATRIX_DIV      shift and go to state 71
    RELOP_EQ        shift and go to state 72
    RELOP_GT        shift and go to state 73
    RELOP_LT        shift and go to state 74
    RELOP_GE        shift and go to state 75
    RELOP_LE        shift and go to state 76
    RELOP_NE        shift and go to state 77
    '               shift and go to state 78


state 60

    (16) assignment -> assign_id DIV_ASSIGN expression . ;
    (29) expression_binop -> expression . + expression
    (30) expression_binop -> expression . - expression
    (31) expression_binop -> expression . * expression
    (32) expression_binop -> expression . / expression
    (33) expression_binop -> expression . MATRIX_PLUS expression
    (34) expression_binop -> expression . MATRIX_SUB expression
    (35) expression_binop -> expression . MATRIX_MUL expression
    (36) expression_binop -> expression . MATRIX_DIV expression
    (37) expression_relop -> expression . RELOP_EQ expression
    (38) expression_relop -> expression . RELOP_GT expression
    (39) expression_relop -> expression . RELOP_LT expression
    (40) expression_relop -> expression . RELOP_GE expression
    (41) expression_relop -> expression . RELOP_LE expression
    (42) expression_relop -> expression . RELOP_NE expression
    (44) expression_unary -> expression . '

    ;               shift and go to state 95
    +               shift and go to state 64
    -               shift and go to state 65
    *               shift and go to state 66
    /               shift and go to state 67
    MATRIX_PLUS     shift and go to state 68
    MATRIX_SUB      shift and go to state 69
    MATRIX_MUL      shift and go to state 70
    MATRIX_DIV      shift and go to state 71
    RELOP_EQ        shift and go to state 72
    RELOP_GT        shift and go to state 73
    RELOP_LT        shift and go to state 74
    RELOP_GE        shift and go to state 75
    RELOP_LE        shift and go to state 76
    RELOP_NE        shift and go to state 77
    '               shift and go to state 78


state 61

    (17) assignment -> assign_id PLUS_ASSIGN expression . ;
    (29) expression_binop -> expression . + expression
    (30) expression_binop -> expression . - expression
    (31) expression_binop -> expression . * expression
    (32) expression_binop -> expression . / expression
    (33) expression_binop -> expression . MATRIX_PLUS expression
    (34) expression_binop -> expression . MATRIX_SUB expression
    (35) expression_binop -> expression . MATRIX_MUL expression
    (36) expression_binop -> expression . MATRIX_DIV expression
    (37) expression_relop -> expression . RELOP_EQ expression
    (38) expression_relop -> expression . RELOP_GT expression
    (39) expression_relop -> expression . RELOP_LT expression
    (40) expression_relop -> expression . RELOP_GE expression
    (41) expression_relop -> expression . RELOP_LE expression
    (42) expression_relop -> expression . RELOP_NE expression
    (44) expression_unary -> expression . '

    ;               shift and go to state 96
    +               shift and go to state 64
    -               shift and go to state 65
    *               shift and go to state 66
    /               shift and go to state 67
    MATRIX_PLUS     shift and go to state 68
    MATRIX_SUB      shift and go to state 69
    MATRIX_MUL      shift and go to state 70
    MATRIX_DIV      shift and go to state 71
    RELOP_EQ        shift and go to state 72
    RELOP_GT        shift and go to state 73
    RELOP_LT        shift and go to state 74
    RELOP_GE        shift and go to state 75
    RELOP_LE        shift and go to state 76
    RELOP_NE        shift and go to state 77
    '               shift and go to state 78


state 62

    (18) assignment -> assign_id SUB_ASSIGN expression . ;
    (29) expression_binop -> expression . + expression
    (30) expression_binop -> expression . - expression
    (31) expression_binop -> expression . * expression
    (32) expression_binop -> expression . / expression
    (33) expression_binop -> expression . MATRIX_PLUS expression
    (34) expression_binop -> expression . MATRIX_SUB expression
    (35) expression_binop -> expression . MATRIX_MUL expression
    (36) expression_binop -> expression . MATRIX_DIV expression
    (37) expression_relop -> expression . RELOP_EQ expression
    (38) expression_relop -> expression . RELOP_GT expression
    (39) expression_relop -> expression . RELOP_LT expression
    (40) expression_relop -> expression . RELOP_GE expression
    (41) expression_relop -> expression . RELOP_LE expression
    (42) expression_relop -> expression . RELOP_NE expression
    (44) expression_unary -> expression . '

    ;               shift and go to state 97
    +               shift and go to state 64
    -               shift and go to state 65
    *               shift and go to state 66
    /               shift and go to state 67
    MATRIX_PLUS     shift and go to state 68
    MATRIX_SUB      shift and go to state 69
    MATRIX_MUL      shift and go to state 70
    MATRIX_DIV      shift and go to state 71
    RELOP_EQ        shift and go to state 72
    RELOP_GT        shift and go to state 73
    RELOP_LT        shift and go to state 74
    RELOP_GE        shift and go to state 75
    RELOP_LE        shift and go to state 76
    RELOP_NE        shift and go to state 77
    '               shift and go to state 78


state 63

    (59) conditional_statement -> IF expression instructions .
    (60) conditional_statement -> IF expression instructions . ELSE instructions
    (4) instructions -> instructions . instruction
    (6) instruction -> . assignment
    (7) instruction -> . conditional_statement
    (8) instruction -> . print_statement
    (9) instruction -> . jump_statement
    (10) instruction -> . return_statement
    (11) instruction -> . while_loop
    (12) instruction -> . for_loop
    (13) instruction -> . { instructions }
    (14) assignment -> . assign_id = expression ;
    (15) assignment -> . assign_id MUL_ASSIGN expression ;
    (16) assignment -> . assign_id DIV_ASSIGN expression ;
    (17) assignment -> . assign_id PLUS_ASSIGN expression ;
    (18) assignment -> . assign_id SUB_ASSIGN expression ;
    (59) conditional_statement -> . IF expression instructions
    (60) conditional_statement -> . IF expression instructions ELSE instructions
    (65) print_statement -> . PRINT expression_list ;
    (61) jump_statement -> . BREAK ;
    (62) jump_statement -> . CONTINUE ;
    (63) return_statement -> . RETURN ;
    (64) return_statement -> . RETURN expression ;
    (68) while_loop -> . WHILE ( expression ) instructions
    (69) for_loop -> . FOR ID = range_value : range_value instructions
    (19) assign_id -> . ID
    (20) assign_id -> . ID vector

    {               reduce using rule 59 (conditional_statement -> IF expression instructions .)
    PRINT           reduce using rule 59 (conditional_statement -> IF expression instructions .)
    BREAK           reduce using rule 59 (conditional_statement -> IF expression instructions .)
    CONTINUE        reduce using rule 59 (conditional_statement -> IF expression instructions .)
    RETURN          reduce using rule 59 (conditional_statement -> IF expression instructions .)
    WHILE           reduce using rule 59 (conditional_statement -> IF expression instructions .)
    FOR             reduce using rule 59 (conditional_statement -> IF expression instructions .)
    ID              reduce using rule 59 (conditional_statement -> IF expression instructions .)
    $end            reduce using rule 59 (conditional_statement -> IF expression instructions .)
    }               reduce using rule 59 (conditional_statement -> IF expression instructions .)
    ELSE            shift and go to state 98
    IF              shift and go to state 14

  ! IF              [ reduce using rule 59 (conditional_statement -> IF expression instructions .) ]
  ! ELSE            [ reduce using rule 59 (conditional_statement -> IF expression instructions .) ]
  ! {               [ shift and go to state 12 ]
  ! PRINT           [ shift and go to state 15 ]
  ! BREAK           [ shift and go to state 16 ]
  ! CONTINUE        [ shift and go to state 17 ]
  ! RETURN          [ shift and go to state 18 ]
  ! WHILE           [ shift and go to state 19 ]
  ! FOR             [ shift and go to state 20 ]
  ! ID              [ shift and go to state 21 ]

    instruction                    shift and go to state 22
    assignment                     shift and go to state 5
    conditional_statement          shift and go to state 6
    print_statement                shift and go to state 7
    jump_statement                 shift and go to state 8
    return_statement               shift and go to state 9
    while_loop                     shift and go to state 10
    for_loop                       shift and go to state 11
    assign_id                      shift and go to state 13

state 64

    (29) expression_binop -> expression + . expression
    (21) expression -> . expression_binop
    (22) expression -> . expression_relop
    (23) expression -> . expression_unary
    (24) expression -> . matrix_funcs
    (25) expression -> . constant
    (26) expression -> . ID
    (27) expression -> . matrix
    (28) expression -> . ( expression )
    (29) expression_binop -> . expression + expression
    (30) expression_binop -> . expression - expression
    (31) expression_binop -> . expression * expression
    (32) expression_binop -> . expression / expression
    (33) expression_binop -> . expression MATRIX_PLUS expression
    (34) expression_binop -> . expression MATRIX_SUB expression
    (35) expression_binop -> . expression MATRIX_MUL expression
    (36) expression_binop -> . expression MATRIX_DIV expression
    (37) expression_relop -> . expression RELOP_EQ expression
    (38) expression_relop -> . expression RELOP_GT expression
    (39) expression_relop -> . expression RELOP_LT expression
    (40) expression_relop -> . expression RELOP_GE expression
    (41) expression_relop -> . expression RELOP_LE expression
    (42) expression_relop -> . expression RELOP_NE expression
    (43) expression_unary -> . - expression
    (44) expression_unary -> . expression '
    (45) matrix_funcs -> . ZEROS ( DT_INTEGER )
    (46) matrix_funcs -> . ONES ( DT_INTEGER )
    (47) matrix_funcs -> . EYE ( DT_INTEGER )
    (48) constant -> . DT_STRING
    (49) constant -> . number
    (50) matrix -> . [ vectors ]
    (57) number -> . DT_INTEGER
    (58) number -> . DT_FLOAT

    ID              shift and go to state 35
    (               shift and go to state 37
    -               shift and go to state 38
    ZEROS           shift and go to state 39
    ONES            shift and go to state 41
    EYE             shift and go to state 42
    DT_STRING       shift and go to state 43
    [               shift and go to state 45
    DT_INTEGER      shift and go to state 40
    DT_FLOAT        shift and go to state 46

    expression                     shift and go to state 99
    expression_binop               shift and go to state 30
    expression_relop               shift and go to state 31
    expression_unary               shift and go to state 32
    matrix_funcs                   shift and go to state 33
    constant                       shift and go to state 34
    matrix                         shift and go to state 36
    number                         shift and go to state 44

state 65

    (30) expression_binop -> expression - . expression
    (21) expression -> . expression_binop
    (22) expression -> . expression_relop
    (23) expression -> . expression_unary
    (24) expression -> . matrix_funcs
    (25) expression -> . constant
    (26) expression -> . ID
    (27) expression -> . matrix
    (28) expression -> . ( expression )
    (29) expression_binop -> . expression + expression
    (30) expression_binop -> . expression - expression
    (31) expression_binop -> . expression * expression
    (32) expression_binop -> . expression / expression
    (33) expression_binop -> . expression MATRIX_PLUS expression
    (34) expression_binop -> . expression MATRIX_SUB expression
    (35) expression_binop -> . expression MATRIX_MUL expression
    (36) expression_binop -> . expression MATRIX_DIV expression
    (37) expression_relop -> . expression RELOP_EQ expression
    (38) expression_relop -> . expression RELOP_GT expression
    (39) expression_relop -> . expression RELOP_LT expression
    (40) expression_relop -> . expression RELOP_GE expression
    (41) expression_relop -> . expression RELOP_LE expression
    (42) expression_relop -> . expression RELOP_NE expression
    (43) expression_unary -> . - expression
    (44) expression_unary -> . expression '
    (45) matrix_funcs -> . ZEROS ( DT_INTEGER )
    (46) matrix_funcs -> . ONES ( DT_INTEGER )
    (47) matrix_funcs -> . EYE ( DT_INTEGER )
    (48) constant -> . DT_STRING
    (49) constant -> . number
    (50) matrix -> . [ vectors ]
    (57) number -> . DT_INTEGER
    (58) number -> . DT_FLOAT

    ID              shift and go to state 35
    (               shift and go to state 37
    -               shift and go to state 38
    ZEROS           shift and go to state 39
    ONES            shift and go to state 41
    EYE             shift and go to state 42
    DT_STRING       shift and go to state 43
    [               shift and go to state 45
    DT_INTEGER      shift and go to state 40
    DT_FLOAT        shift and go to state 46

    expression                     shift and go to state 100
    expression_binop               shift and go to state 30
    expression_relop               shift and go to state 31
    expression_unary               shift and go to state 32
    matrix_funcs                   shift and go to state 33
    constant                       shift and go to state 34
    matrix                         shift and go to state 36
    number                         shift and go to state 44

state 66

    (31) expression_binop -> expression * . expression
    (21) expression -> . expression_binop
    (22) expression -> . expression_relop
    (23) expression -> . expression_unary
    (24) expression -> . matrix_funcs
    (25) expression -> . constant
    (26) expression -> . ID
    (27) expression -> . matrix
    (28) expression -> . ( expression )
    (29) expression_binop -> . expression + expression
    (30) expression_binop -> . expression - expression
    (31) expression_binop -> . expression * expression
    (32) expression_binop -> . expression / expression
    (33) expression_binop -> . expression MATRIX_PLUS expression
    (34) expression_binop -> . expression MATRIX_SUB expression
    (35) expression_binop -> . expression MATRIX_MUL expression
    (36) expression_binop -> . expression MATRIX_DIV expression
    (37) expression_relop -> . expression RELOP_EQ expression
    (38) expression_relop -> . expression RELOP_GT expression
    (39) expression_relop -> . expression RELOP_LT expression
    (40) expression_relop -> . expression RELOP_GE expression
    (41) expression_relop -> . expression RELOP_LE expression
    (42) expression_relop -> . expression RELOP_NE expression
    (43) expression_unary -> . - expression
    (44) expression_unary -> . expression '
    (45) matrix_funcs -> . ZEROS ( DT_INTEGER )
    (46) matrix_funcs -> . ONES ( DT_INTEGER )
    (47) matrix_funcs -> . EYE ( DT_INTEGER )
    (48) constant -> . DT_STRING
    (49) constant -> . number
    (50) matrix -> . [ vectors ]
    (57) number -> . DT_INTEGER
    (58) number -> . DT_FLOAT

    ID              shift and go to state 35
    (               shift and go to state 37
    -               shift and go to state 38
    ZEROS           shift and go to state 39
    ONES            shift and go to state 41
    EYE             shift and go to state 42
    DT_STRING       shift and go to state 43
    [               shift and go to state 45
    DT_INTEGER      shift and go to state 40
    DT_FLOAT        shift and go to state 46

    expression                     shift and go to state 101
    expression_binop               shift and go to state 30
    expression_relop               shift and go to state 31
    expression_unary               shift and go to state 32
    matrix_funcs                   shift and go to state 33
    constant                       shift and go to state 34
    matrix                         shift and go to state 36
    number                         shift and go to state 44

state 67

    (32) expression_binop -> expression / . expression
    (21) expression -> . expression_binop
    (22) expression -> . expression_relop
    (23) expression -> . expression_unary
    (24) expression -> . matrix_funcs
    (25) expression -> . constant
    (26) expression -> . ID
    (27) expression -> . matrix
    (28) expression -> . ( expression )
    (29) expression_binop -> . expression + expression
    (30) expression_binop -> . expression - expression
    (31) expression_binop -> . expression * expression
    (32) expression_binop -> . expression / expression
    (33) expression_binop -> . expression MATRIX_PLUS expression
    (34) expression_binop -> . expression MATRIX_SUB expression
    (35) expression_binop -> . expression MATRIX_MUL expression
    (36) expression_binop -> . expression MATRIX_DIV expression
    (37) expression_relop -> . expression RELOP_EQ expression
    (38) expression_relop -> . expression RELOP_GT expression
    (39) expression_relop -> . expression RELOP_LT expression
    (40) expression_relop -> . expression RELOP_GE expression
    (41) expression_relop -> . expression RELOP_LE expression
    (42) expression_relop -> . expression RELOP_NE expression
    (43) expression_unary -> . - expression
    (44) expression_unary -> . expression '
    (45) matrix_funcs -> . ZEROS ( DT_INTEGER )
    (46) matrix_funcs -> . ONES ( DT_INTEGER )
    (47) matrix_funcs -> . EYE ( DT_INTEGER )
    (48) constant -> . DT_STRING
    (49) constant -> . number
    (50) matrix -> . [ vectors ]
    (57) number -> . DT_INTEGER
    (58) number -> . DT_FLOAT

    ID              shift and go to state 35
    (               shift and go to state 37
    -               shift and go to state 38
    ZEROS           shift and go to state 39
    ONES            shift and go to state 41
    EYE             shift and go to state 42
    DT_STRING       shift and go to state 43
    [               shift and go to state 45
    DT_INTEGER      shift and go to state 40
    DT_FLOAT        shift and go to state 46

    expression                     shift and go to state 102
    expression_binop               shift and go to state 30
    expression_relop               shift and go to state 31
    expression_unary               shift and go to state 32
    matrix_funcs                   shift and go to state 33
    constant                       shift and go to state 34
    matrix                         shift and go to state 36
    number                         shift and go to state 44

state 68

    (33) expression_binop -> expression MATRIX_PLUS . expression
    (21) expression -> . expression_binop
    (22) expression -> . expression_relop
    (23) expression -> . expression_unary
    (24) expression -> . matrix_funcs
    (25) expression -> . constant
    (26) expression -> . ID
    (27) expression -> . matrix
    (28) expression -> . ( expression )
    (29) expression_binop -> . expression + expression
    (30) expression_binop -> . expression - expression
    (31) expression_binop -> . expression * expression
    (32) expression_binop -> . expression / expression
    (33) expression_binop -> . expression MATRIX_PLUS expression
    (34) expression_binop -> . expression MATRIX_SUB expression
    (35) expression_binop -> . expression MATRIX_MUL expression
    (36) expression_binop -> . expression MATRIX_DIV expression
    (37) expression_relop -> . expression RELOP_EQ expression
    (38) expression_relop -> . expression RELOP_GT expression
    (39) expression_relop -> . expression RELOP_LT expression
    (40) expression_relop -> . expression RELOP_GE expression
    (41) expression_relop -> . expression RELOP_LE expression
    (42) expression_relop -> . expression RELOP_NE expression
    (43) expression_unary -> . - expression
    (44) expression_unary -> . expression '
    (45) matrix_funcs -> . ZEROS ( DT_INTEGER )
    (46) matrix_funcs -> . ONES ( DT_INTEGER )
    (47) matrix_funcs -> . EYE ( DT_INTEGER )
    (48) constant -> . DT_STRING
    (49) constant -> . number
    (50) matrix -> . [ vectors ]
    (57) number -> . DT_INTEGER
    (58) number -> . DT_FLOAT

    ID              shift and go to state 35
    (               shift and go to state 37
    -               shift and go to state 38
    ZEROS           shift and go to state 39
    ONES            shift and go to state 41
    EYE             shift and go to state 42
    DT_STRING       shift and go to state 43
    [               shift and go to state 45
    DT_INTEGER      shift and go to state 40
    DT_FLOAT        shift and go to state 46

    expression                     shift and go to state 103
    expression_binop               shift and go to state 30
    expression_relop               shift and go to state 31
    expression_unary               shift and go to state 32
    matrix_funcs                   shift and go to state 33
    constant                       shift and go to state 34
    matrix                         shift and go to state 36
    number                         shift and go to state 44

state 69

    (34) expression_binop -> expression MATRIX_SUB . expression
    (21) expression -> . expression_binop
    (22) expression -> . expression_relop
    (23) expression -> . expression_unary
    (24) expression -> . matrix_funcs
    (25) expression -> . constant
    (26) expression -> . ID
    (27) expression -> . matrix
    (28) expression -> . ( expression )
    (29) expression_binop -> . expression + expression
    (30) expression_binop -> . expression - expression
    (31) expression_binop -> . expression * expression
    (32) expression_binop -> . expression / expression
    (33) expression_binop -> . expression MATRIX_PLUS expression
    (34) expression_binop -> . expression MATRIX_SUB expression
    (35) expression_binop -> . expression MATRIX_MUL expression
    (36) expression_binop -> . expression MATRIX_DIV expression
    (37) expression_relop -> . expression RELOP_EQ expression
    (38) expression_relop -> . expression RELOP_GT expression
    (39) expression_relop -> . expression RELOP_LT expression
    (40) expression_relop -> . expression RELOP_GE expression
    (41) expression_relop -> . expression RELOP_LE expression
    (42) expression_relop -> . expression RELOP_NE expression
    (43) expression_unary -> . - expression
    (44) expression_unary -> . expression '
    (45) matrix_funcs -> . ZEROS ( DT_INTEGER )
    (46) matrix_funcs -> . ONES ( DT_INTEGER )
    (47) matrix_funcs -> . EYE ( DT_INTEGER )
    (48) constant -> . DT_STRING
    (49) constant -> . number
    (50) matrix -> . [ vectors ]
    (57) number -> . DT_INTEGER
    (58) number -> . DT_FLOAT

    ID              shift and go to state 35
    (               shift and go to state 37
    -               shift and go to state 38
    ZEROS           shift and go to state 39
    ONES            shift and go to state 41
    EYE             shift and go to state 42
    DT_STRING       shift and go to state 43
    [               shift and go to state 45
    DT_INTEGER      shift and go to state 40
    DT_FLOAT        shift and go to state 46

    expression                     shift and go to state 104
    expression_binop               shift and go to state 30
    expression_relop               shift and go to state 31
    expression_unary               shift and go to state 32
    matrix_funcs                   shift and go to state 33
    constant                       shift and go to state 34
    matrix                         shift and go to state 36
    number                         shift and go to state 44

state 70

    (35) expression_binop -> expression MATRIX_MUL . expression
    (21) expression -> . expression_binop
    (22) expression -> . expression_relop
    (23) expression -> . expression_unary
    (24) expression -> . matrix_funcs
    (25) expression -> . constant
    (26) expression -> . ID
    (27) expression -> . matrix
    (28) expression -> . ( expression )
    (29) expression_binop -> . expression + expression
    (30) expression_binop -> . expression - expression
    (31) expression_binop -> . expression * expression
    (32) expression_binop -> . expression / expression
    (33) expression_binop -> . expression MATRIX_PLUS expression
    (34) expression_binop -> . expression MATRIX_SUB expression
    (35) expression_binop -> . expression MATRIX_MUL expression
    (36) expression_binop -> . expression MATRIX_DIV expression
    (37) expression_relop -> . expression RELOP_EQ expression
    (38) expression_relop -> . expression RELOP_GT expression
    (39) expression_relop -> . expression RELOP_LT expression
    (40) expression_relop -> . expression RELOP_GE expression
    (41) expression_relop -> . expression RELOP_LE expression
    (42) expression_relop -> . expression RELOP_NE expression
    (43) expression_unary -> . - expression
    (44) expression_unary -> . expression '
    (45) matrix_funcs -> . ZEROS ( DT_INTEGER )
    (46) matrix_funcs -> . ONES ( DT_INTEGER )
    (47) matrix_funcs -> . EYE ( DT_INTEGER )
    (48) constant -> . DT_STRING
    (49) constant -> . number
    (50) matrix -> . [ vectors ]
    (57) number -> . DT_INTEGER
    (58) number -> . DT_FLOAT

    ID              shift and go to state 35
    (               shift and go to state 37
    -               shift and go to state 38
    ZEROS           shift and go to state 39
    ONES            shift and go to state 41
    EYE             shift and go to state 42
    DT_STRING       shift and go to state 43
    [               shift and go to state 45
    DT_INTEGER      shift and go to state 40
    DT_FLOAT        shift and go to state 46

    expression                     shift and go to state 105
    expression_binop               shift and go to state 30
    expression_relop               shift and go to state 31
    expression_unary               shift and go to state 32
    matrix_funcs                   shift and go to state 33
    constant                       shift and go to state 34
    matrix                         shift and go to state 36
    number                         shift and go to state 44

state 71

    (36) expression_binop -> expression MATRIX_DIV . expression
    (21) expression -> . expression_binop
    (22) expression -> . expression_relop
    (23) expression -> . expression_unary
    (24) expression -> . matrix_funcs
    (25) expression -> . constant
    (26) expression -> . ID
    (27) expression -> . matrix
    (28) expression -> . ( expression )
    (29) expression_binop -> . expression + expression
    (30) expression_binop -> . expression - expression
    (31) expression_binop -> . expression * expression
    (32) expression_binop -> . expression / expression
    (33) expression_binop -> . expression MATRIX_PLUS expression
    (34) expression_binop -> . expression MATRIX_SUB expression
    (35) expression_binop -> . expression MATRIX_MUL expression
    (36) expression_binop -> . expression MATRIX_DIV expression
    (37) expression_relop -> . expression RELOP_EQ expression
    (38) expression_relop -> . expression RELOP_GT expression
    (39) expression_relop -> . expression RELOP_LT expression
    (40) expression_relop -> . expression RELOP_GE expression
    (41) expression_relop -> . expression RELOP_LE expression
    (42) expression_relop -> . expression RELOP_NE expression
    (43) expression_unary -> . - expression
    (44) expression_unary -> . expression '
    (45) matrix_funcs -> . ZEROS ( DT_INTEGER )
    (46) matrix_funcs -> . ONES ( DT_INTEGER )
    (47) matrix_funcs -> . EYE ( DT_INTEGER )
    (48) constant -> . DT_STRING
    (49) constant -> . number
    (50) matrix -> . [ vectors ]
    (57) number -> . DT_INTEGER
    (58) number -> . DT_FLOAT

    ID              shift and go to state 35
    (               shift and go to state 37
    -               shift and go to state 38
    ZEROS           shift and go to state 39
    ONES            shift and go to state 41
    EYE             shift and go to state 42
    DT_STRING       shift and go to state 43
    [               shift and go to state 45
    DT_INTEGER      shift and go to state 40
    DT_FLOAT        shift and go to state 46

    expression                     shift and go to state 106
    expression_binop               shift and go to state 30
    expression_relop               shift and go to state 31
    expression_unary               shift and go to state 32
    matrix_funcs                   shift and go to state 33
    constant                       shift and go to state 34
    matrix                         shift and go to state 36
    number                         shift and go to state 44

state 72

    (37) expression_relop -> expression RELOP_EQ . expression
    (21) expression -> . expression_binop
    (22) expression -> . expression_relop
    (23) expression -> . expression_unary
    (24) expression -> . matrix_funcs
    (25) expression -> . constant
    (26) expression -> . ID
    (27) expression -> . matrix
    (28) expression -> . ( expression )
    (29) expression_binop -> . expression + expression
    (30) expression_binop -> . expression - expression
    (31) expression_binop -> . expression * expression
    (32) expression_binop -> . expression / expression
    (33) expression_binop -> . expression MATRIX_PLUS expression
    (34) expression_binop -> . expression MATRIX_SUB expression
    (35) expression_binop -> . expression MATRIX_MUL expression
    (36) expression_binop -> . expression MATRIX_DIV expression
    (37) expression_relop -> . expression RELOP_EQ expression
    (38) expression_relop -> . expression RELOP_GT expression
    (39) expression_relop -> . expression RELOP_LT expression
    (40) expression_relop -> . expression RELOP_GE expression
    (41) expression_relop -> . expression RELOP_LE expression
    (42) expression_relop -> . expression RELOP_NE expression
    (43) expression_unary -> . - expression
    (44) expression_unary -> . expression '
    (45) matrix_funcs -> . ZEROS ( DT_INTEGER )
    (46) matrix_funcs -> . ONES ( DT_INTEGER )
    (47) matrix_funcs -> . EYE ( DT_INTEGER )
    (48) constant -> . DT_STRING
    (49) constant -> . number
    (50) matrix -> . [ vectors ]
    (57) number -> . DT_INTEGER
    (58) number -> . DT_FLOAT

    ID              shift and go to state 35
    (               shift and go to state 37
    -               shift and go to state 38
    ZEROS           shift and go to state 39
    ONES            shift and go to state 41
    EYE             shift and go to state 42
    DT_STRING       shift and go to state 43
    [               shift and go to state 45
    DT_INTEGER      shift and go to state 40
    DT_FLOAT        shift and go to state 46

    expression                     shift and go to state 107
    expression_binop               shift and go to state 30
    expression_relop               shift and go to state 31
    expression_unary               shift and go to state 32
    matrix_funcs                   shift and go to state 33
    constant                       shift and go to state 34
    matrix                         shift and go to state 36
    number                         shift and go to state 44

state 73

    (38) expression_relop -> expression RELOP_GT . expression
    (21) expression -> . expression_binop
    (22) expression -> . expression_relop
    (23) expression -> . expression_unary
    (24) expression -> . matrix_funcs
    (25) expression -> . constant
    (26) expression -> . ID
    (27) expression -> . matrix
    (28) expression -> . ( expression )
    (29) expression_binop -> . expression + expression
    (30) expression_binop -> . expression - expression
    (31) expression_binop -> . expression * expression
    (32) expression_binop -> . expression / expression
    (33) expression_binop -> . expression MATRIX_PLUS expression
    (34) expression_binop -> . expression MATRIX_SUB expression
    (35) expression_binop -> . expression MATRIX_MUL expression
    (36) expression_binop -> . expression MATRIX_DIV expression
    (37) expression_relop -> . expression RELOP_EQ expression
    (38) expression_relop -> . expression RELOP_GT expression
    (39) expression_relop -> . expression RELOP_LT expression
    (40) expression_relop -> . expression RELOP_GE expression
    (41) expression_relop -> . expression RELOP_LE expression
    (42) expression_relop -> . expression RELOP_NE expression
    (43) expression_unary -> . - expression
    (44) expression_unary -> . expression '
    (45) matrix_funcs -> . ZEROS ( DT_INTEGER )
    (46) matrix_funcs -> . ONES ( DT_INTEGER )
    (47) matrix_funcs -> . EYE ( DT_INTEGER )
    (48) constant -> . DT_STRING
    (49) constant -> . number
    (50) matrix -> . [ vectors ]
    (57) number -> . DT_INTEGER
    (58) number -> . DT_FLOAT

    ID              shift and go to state 35
    (               shift and go to state 37
    -               shift and go to state 38
    ZEROS           shift and go to state 39
    ONES            shift and go to state 41
    EYE             shift and go to state 42
    DT_STRING       shift and go to state 43
    [               shift and go to state 45
    DT_INTEGER      shift and go to state 40
    DT_FLOAT        shift and go to state 46

    expression                     shift and go to state 108
    expression_binop               shift and go to state 30
    expression_relop               shift and go to state 31
    expression_unary               shift and go to state 32
    matrix_funcs                   shift and go to state 33
    constant                       shift and go to state 34
    matrix                         shift and go to state 36
    number                         shift and go to state 44

state 74

    (39) expression_relop -> expression RELOP_LT . expression
    (21) expression -> . expression_binop
    (22) expression -> . expression_relop
    (23) expression -> . expression_unary
    (24) expression -> . matrix_funcs
    (25) expression -> . constant
    (26) expression -> . ID
    (27) expression -> . matrix
    (28) expression -> . ( expression )
    (29) expression_binop -> . expression + expression
    (30) expression_binop -> . expression - expression
    (31) expression_binop -> . expression * expression
    (32) expression_binop -> . expression / expression
    (33) expression_binop -> . expression MATRIX_PLUS expression
    (34) expression_binop -> . expression MATRIX_SUB expression
    (35) expression_binop -> . expression MATRIX_MUL expression
    (36) expression_binop -> . expression MATRIX_DIV expression
    (37) expression_relop -> . expression RELOP_EQ expression
    (38) expression_relop -> . expression RELOP_GT expression
    (39) expression_relop -> . expression RELOP_LT expression
    (40) expression_relop -> . expression RELOP_GE expression
    (41) expression_relop -> . expression RELOP_LE expression
    (42) expression_relop -> . expression RELOP_NE expression
    (43) expression_unary -> . - expression
    (44) expression_unary -> . expression '
    (45) matrix_funcs -> . ZEROS ( DT_INTEGER )
    (46) matrix_funcs -> . ONES ( DT_INTEGER )
    (47) matrix_funcs -> . EYE ( DT_INTEGER )
    (48) constant -> . DT_STRING
    (49) constant -> . number
    (50) matrix -> . [ vectors ]
    (57) number -> . DT_INTEGER
    (58) number -> . DT_FLOAT

    ID              shift and go to state 35
    (               shift and go to state 37
    -               shift and go to state 38
    ZEROS           shift and go to state 39
    ONES            shift and go to state 41
    EYE             shift and go to state 42
    DT_STRING       shift and go to state 43
    [               shift and go to state 45
    DT_INTEGER      shift and go to state 40
    DT_FLOAT        shift and go to state 46

    expression                     shift and go to state 109
    expression_binop               shift and go to state 30
    expression_relop               shift and go to state 31
    expression_unary               shift and go to state 32
    matrix_funcs                   shift and go to state 33
    constant                       shift and go to state 34
    matrix                         shift and go to state 36
    number                         shift and go to state 44

state 75

    (40) expression_relop -> expression RELOP_GE . expression
    (21) expression -> . expression_binop
    (22) expression -> . expression_relop
    (23) expression -> . expression_unary
    (24) expression -> . matrix_funcs
    (25) expression -> . constant
    (26) expression -> . ID
    (27) expression -> . matrix
    (28) expression -> . ( expression )
    (29) expression_binop -> . expression + expression
    (30) expression_binop -> . expression - expression
    (31) expression_binop -> . expression * expression
    (32) expression_binop -> . expression / expression
    (33) expression_binop -> . expression MATRIX_PLUS expression
    (34) expression_binop -> . expression MATRIX_SUB expression
    (35) expression_binop -> . expression MATRIX_MUL expression
    (36) expression_binop -> . expression MATRIX_DIV expression
    (37) expression_relop -> . expression RELOP_EQ expression
    (38) expression_relop -> . expression RELOP_GT expression
    (39) expression_relop -> . expression RELOP_LT expression
    (40) expression_relop -> . expression RELOP_GE expression
    (41) expression_relop -> . expression RELOP_LE expression
    (42) expression_relop -> . expression RELOP_NE expression
    (43) expression_unary -> . - expression
    (44) expression_unary -> . expression '
    (45) matrix_funcs -> . ZEROS ( DT_INTEGER )
    (46) matrix_funcs -> . ONES ( DT_INTEGER )
    (47) matrix_funcs -> . EYE ( DT_INTEGER )
    (48) constant -> . DT_STRING
    (49) constant -> . number
    (50) matrix -> . [ vectors ]
    (57) number -> . DT_INTEGER
    (58) number -> . DT_FLOAT

    ID              shift and go to state 35
    (               shift and go to state 37
    -               shift and go to state 38
    ZEROS           shift and go to state 39
    ONES            shift and go to state 41
    EYE             shift and go to state 42
    DT_STRING       shift and go to state 43
    [               shift and go to state 45
    DT_INTEGER      shift and go to state 40
    DT_FLOAT        shift and go to state 46

    expression                     shift and go to state 110
    expression_binop               shift and go to state 30
    expression_relop               shift and go to state 31
    expression_unary               shift and go to state 32
    matrix_funcs                   shift and go to state 33
    constant                       shift and go to state 34
    matrix                         shift and go to state 36
    number                         shift and go to state 44

state 76

    (41) expression_relop -> expression RELOP_LE . expression
    (21) expression -> . expression_binop
    (22) expression -> . expression_relop
    (23) expression -> . expression_unary
    (24) expression -> . matrix_funcs
    (25) expression -> . constant
    (26) expression -> . ID
    (27) expression -> . matrix
    (28) expression -> . ( expression )
    (29) expression_binop -> . expression + expression
    (30) expression_binop -> . expression - expression
    (31) expression_binop -> . expression * expression
    (32) expression_binop -> . expression / expression
    (33) expression_binop -> . expression MATRIX_PLUS expression
    (34) expression_binop -> . expression MATRIX_SUB expression
    (35) expression_binop -> . expression MATRIX_MUL expression
    (36) expression_binop -> . expression MATRIX_DIV expression
    (37) expression_relop -> . expression RELOP_EQ expression
    (38) expression_relop -> . expression RELOP_GT expression
    (39) expression_relop -> . expression RELOP_LT expression
    (40) expression_relop -> . expression RELOP_GE expression
    (41) expression_relop -> . expression RELOP_LE expression
    (42) expression_relop -> . expression RELOP_NE expression
    (43) expression_unary -> . - expression
    (44) expression_unary -> . expression '
    (45) matrix_funcs -> . ZEROS ( DT_INTEGER )
    (46) matrix_funcs -> . ONES ( DT_INTEGER )
    (47) matrix_funcs -> . EYE ( DT_INTEGER )
    (48) constant -> . DT_STRING
    (49) constant -> . number
    (50) matrix -> . [ vectors ]
    (57) number -> . DT_INTEGER
    (58) number -> . DT_FLOAT

    ID              shift and go to state 35
    (               shift and go to state 37
    -               shift and go to state 38
    ZEROS           shift and go to state 39
    ONES            shift and go to state 41
    EYE             shift and go to state 42
    DT_STRING       shift and go to state 43
    [               shift and go to state 45
    DT_INTEGER      shift and go to state 40
    DT_FLOAT        shift and go to state 46

    expression                     shift and go to state 111
    expression_binop               shift and go to state 30
    expression_relop               shift and go to state 31
    expression_unary               shift and go to state 32
    matrix_funcs                   shift and go to state 33
    constant                       shift and go to state 34
    matrix                         shift and go to state 36
    number                         shift and go to state 44

state 77

    (42) expression_relop -> expression RELOP_NE . expression
    (21) expression -> . expression_binop
    (22) expression -> . expression_relop
    (23) expression -> . expression_unary
    (24) expression -> . matrix_funcs
    (25) expression -> . constant
    (26) expression -> . ID
    (27) expression -> . matrix
    (28) expression -> . ( expression )
    (29) expression_binop -> . expression + expression
    (30) expression_binop -> . expression - expression
    (31) expression_binop -> . expression * expression
    (32) expression_binop -> . expression / expression
    (33) expression_binop -> . expression MATRIX_PLUS expression
    (34) expression_binop -> . expression MATRIX_SUB expression
    (35) expression_binop -> . expression MATRIX_MUL expression
    (36) expression_binop -> . expression MATRIX_DIV expression
    (37) expression_relop -> . expression RELOP_EQ expression
    (38) expression_relop -> . expression RELOP_GT expression
    (39) expression_relop -> . expression RELOP_LT expression
    (40) expression_relop -> . expression RELOP_GE expression
    (41) expression_relop -> . expression RELOP_LE expression
    (42) expression_relop -> . expression RELOP_NE expression
    (43) expression_unary -> . - expression
    (44) expression_unary -> . expression '
    (45) matrix_funcs -> . ZEROS ( DT_INTEGER )
    (46) matrix_funcs -> . ONES ( DT_INTEGER )
    (47) matrix_funcs -> . EYE ( DT_INTEGER )
    (48) constant -> . DT_STRING
    (49) constant -> . number
    (50) matrix -> . [ vectors ]
    (57) number -> . DT_INTEGER
    (58) number -> . DT_FLOAT

    ID              shift and go to state 35
    (               shift and go to state 37
    -               shift and go to state 38
    ZEROS           shift and go to state 39
    ONES            shift and go to state 41
    EYE             shift and go to state 42
    DT_STRING       shift and go to state 43
    [               shift and go to state 45
    DT_INTEGER      shift and go to state 40
    DT_FLOAT        shift and go to state 46

    expression                     shift and go to state 112
    expression_binop               shift and go to state 30
    expression_relop               shift and go to state 31
    expression_unary               shift and go to state 32
    matrix_funcs                   shift and go to state 33
    constant                       shift and go to state 34
    matrix                         shift and go to state 36
    number                         shift and go to state 44

state 78

    (44) expression_unary -> expression ' .

    +               reduce using rule 44 (expression_unary -> expression ' .)
    -               reduce using rule 44 (expression_unary -> expression ' .)
    *               reduce using rule 44 (expression_unary -> expression ' .)
    /               reduce using rule 44 (expression_unary -> expression ' .)
    MATRIX_PLUS     reduce using rule 44 (expression_unary -> expression ' .)
    MATRIX_SUB      reduce using rule 44 (expression_unary -> expression ' .)
    MATRIX_MUL      reduce using rule 44 (expression_unary -> expression ' .)
    MATRIX_DIV      reduce using rule 44 (expression_unary -> expression ' .)
    RELOP_EQ        reduce using rule 44 (expression_unary -> expression ' .)
    RELOP_GT        reduce using rule 44 (expression_unary -> expression ' .)
    RELOP_LT        reduce using rule 44 (expression_unary -> expression ' .)
    RELOP_GE        reduce using rule 44 (expression_unary -> expression ' .)
    RELOP_LE        reduce using rule 44 (expression_unary -> expression ' .)
    RELOP_NE        reduce using rule 44 (expression_unary -> expression ' .)
    '               reduce using rule 44 (expression_unary -> expression ' .)
    {               reduce using rule 44 (expression_unary -> expression ' .)
    IF              reduce using rule 44 (expression_unary -> expression ' .)
    PRINT           reduce using rule 44 (expression_unary -> expression ' .)
    BREAK           reduce using rule 44 (expression_unary -> expression ' .)
    CONTINUE        reduce using rule 44 (expression_unary -> expression ' .)
    RETURN          reduce using rule 44 (expression_unary -> expression ' .)
    WHILE           reduce using rule 44 (expression_unary -> expression ' .)
    FOR             reduce using rule 44 (expression_unary -> expression ' .)
    ID              reduce using rule 44 (expression_unary -> expression ' .)
    ;               reduce using rule 44 (expression_unary -> expression ' .)
    ,               reduce using rule 44 (expression_unary -> expression ' .)
    )               reduce using rule 44 (expression_unary -> expression ' .)


state 79

    (28) expression -> ( expression . )
    (29) expression_binop -> expression . + expression
    (30) expression_binop -> expression . - expression
    (31) expression_binop -> expression . * expression
    (32) expression_binop -> expression . / expression
    (33) expression_binop -> expression . MATRIX_PLUS expression
    (34) expression_binop -> expression . MATRIX_SUB expression
    (35) expression_binop -> expression . MATRIX_MUL expression
    (36) expression_binop -> expression . MATRIX_DIV expression
    (37) expression_relop -> expression . RELOP_EQ expression
    (38) expression_relop -> expression . RELOP_GT expression
    (39) expression_relop -> expression . RELOP_LT expression
    (40) expression_relop -> expression . RELOP_GE expression
    (41) expression_relop -> expression . RELOP_LE expression
    (42) expression_relop -> expression . RELOP_NE expression
    (44) expression_unary -> expression . '

    )               shift and go to state 113
    +               shift and go to state 64
    -               shift and go to state 65
    *               shift and go to state 66
    /               shift and go to state 67
    MATRIX_PLUS     shift and go to state 68
    MATRIX_SUB      shift and go to state 69
    MATRIX_MUL      shift and go to state 70
    MATRIX_DIV      shift and go to state 71
    RELOP_EQ        shift and go to state 72
    RELOP_GT        shift and go to state 73
    RELOP_LT        shift and go to state 74
    RELOP_GE        shift and go to state 75
    RELOP_LE        shift and go to state 76
    RELOP_NE        shift and go to state 77
    '               shift and go to state 78


state 80

    (43) expression_unary -> - expression .
    (29) expression_binop -> expression . + expression
    (30) expression_binop -> expression . - expression
    (31) expression_binop -> expression . * expression
    (32) expression_binop -> expression . / expression
    (33) expression_binop -> expression . MATRIX_PLUS expression
    (34) expression_binop -> expression . MATRIX_SUB expression
    (35) expression_binop -> expression . MATRIX_MUL expression
    (36) expression_binop -> expression . MATRIX_DIV expression
    (37) expression_relop -> expression . RELOP_EQ expression
    (38) expression_relop -> expression . RELOP_GT expression
    (39) expression_relop -> expression . RELOP_LT expression
    (40) expression_relop -> expression . RELOP_GE expression
    (41) expression_relop -> expression . RELOP_LE expression
    (42) expression_relop -> expression . RELOP_NE expression
    (44) expression_unary -> expression . '

    +               reduce using rule 43 (expression_unary -> - expression .)
    -               reduce using rule 43 (expression_unary -> - expression .)
    RELOP_EQ        reduce using rule 43 (expression_unary -> - expression .)
    RELOP_GT        reduce using rule 43 (expression_unary -> - expression .)
    RELOP_LT        reduce using rule 43 (expression_unary -> - expression .)
    RELOP_GE        reduce using rule 43 (expression_unary -> - expression .)
    RELOP_LE        reduce using rule 43 (expression_unary -> - expression .)
    RELOP_NE        reduce using rule 43 (expression_unary -> - expression .)
    '               reduce using rule 43 (expression_unary -> - expression .)
    {               reduce using rule 43 (expression_unary -> - expression .)
    IF              reduce using rule 43 (expression_unary -> - expression .)
    PRINT           reduce using rule 43 (expression_unary -> - expression .)
    BREAK           reduce using rule 43 (expression_unary -> - expression .)
    CONTINUE        reduce using rule 43 (expression_unary -> - expression .)
    RETURN          reduce using rule 43 (expression_unary -> - expression .)
    WHILE           reduce using rule 43 (expression_unary -> - expression .)
    FOR             reduce using rule 43 (expression_unary -> - expression .)
    ID              reduce using rule 43 (expression_unary -> - expression .)
    ;               reduce using rule 43 (expression_unary -> - expression .)
    ,               reduce using rule 43 (expression_unary -> - expression .)
    )               reduce using rule 43 (expression_unary -> - expression .)
    *               shift and go to state 66
    /               shift and go to state 67
    MATRIX_PLUS     shift and go to state 68
    MATRIX_SUB      shift and go to state 69
    MATRIX_MUL      shift and go to state 70
    MATRIX_DIV      shift and go to state 71

  ! *               [ reduce using rule 43 (expression_unary -> - expression .) ]
  ! /               [ reduce using rule 43 (expression_unary -> - expression .) ]
  ! MATRIX_PLUS     [ reduce using rule 43 (expression_unary -> - expression .) ]
  ! MATRIX_SUB      [ reduce using rule 43 (expression_unary -> - expression .) ]
  ! MATRIX_MUL      [ reduce using rule 43 (expression_unary -> - expression .) ]
  ! MATRIX_DIV      [ reduce using rule 43 (expression_unary -> - expression .) ]
  ! +               [ shift and go to state 64 ]
  ! -               [ shift and go to state 65 ]
  ! RELOP_EQ        [ shift and go to state 72 ]
  ! RELOP_GT        [ shift and go to state 73 ]
  ! RELOP_LT        [ shift and go to state 74 ]
  ! RELOP_GE        [ shift and go to state 75 ]
  ! RELOP_LE        [ shift and go to state 76 ]
  ! RELOP_NE        [ shift and go to state 77 ]
  ! '               [ shift and go to state 78 ]


state 81

    (45) matrix_funcs -> ZEROS ( . DT_INTEGER )

    DT_INTEGER      shift and go to state 114


state 82

    (46) matrix_funcs -> ONES ( . DT_INTEGER )

    DT_INTEGER      shift and go to state 115


state 83

    (47) matrix_funcs -> EYE ( . DT_INTEGER )

    DT_INTEGER      shift and go to state 116


state 84

    (50) matrix -> [ vectors . ]
    (52) vectors -> vectors . , vector

    ]               shift and go to state 117
    ,               shift and go to state 118


state 85

    (51) vectors -> vector .

    ]               reduce using rule 51 (vectors -> vector .)
    ,               reduce using rule 51 (vectors -> vector .)


state 86

    (65) print_statement -> PRINT expression_list ; .

    {               reduce using rule 65 (print_statement -> PRINT expression_list ; .)
    IF              reduce using rule 65 (print_statement -> PRINT expression_list ; .)
    PRINT           reduce using rule 65 (print_statement -> PRINT expression_list ; .)
    BREAK           reduce using rule 65 (print_statement -> PRINT expression_list ; .)
    CONTINUE        reduce using rule 65 (print_statement -> PRINT expression_list ; .)
    RETURN          reduce using rule 65 (print_statement -> PRINT expression_list ; .)
    WHILE           reduce using rule 65 (print_statement -> PRINT expression_list ; .)
    FOR             reduce using rule 65 (print_statement -> PRINT expression_list ; .)
    ID              reduce using rule 65 (print_statement -> PRINT expression_list ; .)
    $end            reduce using rule 65 (print_statement -> PRINT expression_list ; .)
    }               reduce using rule 65 (print_statement -> PRINT expression_list ; .)
    ELSE            reduce using rule 65 (print_statement -> PRINT expression_list ; .)


state 87

    (66) expression_list -> expression_list , . expression
    (21) expression -> . expression_binop
    (22) expression -> . expression_relop
    (23) expression -> . expression_unary
    (24) expression -> . matrix_funcs
    (25) expression -> . constant
    (26) expression -> . ID
    (27) expression -> . matrix
    (28) expression -> . ( expression )
    (29) expression_binop -> . expression + expression
    (30) expression_binop -> . expression - expression
    (31) expression_binop -> . expression * expression
    (32) expression_binop -> . expression / expression
    (33) expression_binop -> . expression MATRIX_PLUS expression
    (34) expression_binop -> . expression MATRIX_SUB expression
    (35) expression_binop -> . expression MATRIX_MUL expression
    (36) expression_binop -> . expression MATRIX_DIV expression
    (37) expression_relop -> . expression RELOP_EQ expression
    (38) expression_relop -> . expression RELOP_GT expression
    (39) expression_relop -> . expression RELOP_LT expression
    (40) expression_relop -> . expression RELOP_GE expression
    (41) expression_relop -> . expression RELOP_LE expression
    (42) expression_relop -> . expression RELOP_NE expression
    (43) expression_unary -> . - expression
    (44) expression_unary -> . expression '
    (45) matrix_funcs -> . ZEROS ( DT_INTEGER )
    (46) matrix_funcs -> . ONES ( DT_INTEGER )
    (47) matrix_funcs -> . EYE ( DT_INTEGER )
    (48) constant -> . DT_STRING
    (49) constant -> . number
    (50) matrix -> . [ vectors ]
    (57) number -> . DT_INTEGER
    (58) number -> . DT_FLOAT

    ID              shift and go to state 35
    (               shift and go to state 37
    -               shift and go to state 38
    ZEROS           shift and go to state 39
    ONES            shift and go to state 41
    EYE             shift and go to state 42
    DT_STRING       shift and go to state 43
    [               shift and go to state 45
    DT_INTEGER      shift and go to state 40
    DT_FLOAT        shift and go to state 46

    expression                     shift and go to state 119
    expression_binop               shift and go to state 30
    expression_relop               shift and go to state 31
    expression_unary               shift and go to state 32
    matrix_funcs                   shift and go to state 33
    constant                       shift and go to state 34
    matrix                         shift and go to state 36
    number                         shift and go to state 44

state 88

    (64) return_statement -> RETURN expression ; .

    {               reduce using rule 64 (return_statement -> RETURN expression ; .)
    IF              reduce using rule 64 (return_statement -> RETURN expression ; .)
    PRINT           reduce using rule 64 (return_statement -> RETURN expression ; .)
    BREAK           reduce using rule 64 (return_statement -> RETURN expression ; .)
    CONTINUE        reduce using rule 64 (return_statement -> RETURN expression ; .)
    RETURN          reduce using rule 64 (return_statement -> RETURN expression ; .)
    WHILE           reduce using rule 64 (return_statement -> RETURN expression ; .)
    FOR             reduce using rule 64 (return_statement -> RETURN expression ; .)
    ID              reduce using rule 64 (return_statement -> RETURN expression ; .)
    $end            reduce using rule 64 (return_statement -> RETURN expression ; .)
    }               reduce using rule 64 (return_statement -> RETURN expression ; .)
    ELSE            reduce using rule 64 (return_statement -> RETURN expression ; .)


state 89

    (68) while_loop -> WHILE ( expression . ) instructions
    (29) expression_binop -> expression . + expression
    (30) expression_binop -> expression . - expression
    (31) expression_binop -> expression . * expression
    (32) expression_binop -> expression . / expression
    (33) expression_binop -> expression . MATRIX_PLUS expression
    (34) expression_binop -> expression . MATRIX_SUB expression
    (35) expression_binop -> expression . MATRIX_MUL expression
    (36) expression_binop -> expression . MATRIX_DIV expression
    (37) expression_relop -> expression . RELOP_EQ expression
    (38) expression_relop -> expression . RELOP_GT expression
    (39) expression_relop -> expression . RELOP_LT expression
    (40) expression_relop -> expression . RELOP_GE expression
    (41) expression_relop -> expression . RELOP_LE expression
    (42) expression_relop -> expression . RELOP_NE expression
    (44) expression_unary -> expression . '

    )               shift and go to state 120
    +               shift and go to state 64
    -               shift and go to state 65
    *               shift and go to state 66
    /               shift and go to state 67
    MATRIX_PLUS     shift and go to state 68
    MATRIX_SUB      shift and go to state 69
    MATRIX_MUL      shift and go to state 70
    MATRIX_DIV      shift and go to state 71
    RELOP_EQ        shift and go to state 72
    RELOP_GT        shift and go to state 73
    RELOP_LT        shift and go to state 74
    RELOP_GE        shift and go to state 75
    RELOP_LE        shift and go to state 76
    RELOP_NE        shift and go to state 77
    '               shift and go to state 78


state 90

    (69) for_loop -> FOR ID = . range_value : range_value instructions
    (70) range_value -> . DT_INTEGER
    (71) range_value -> . ID

    DT_INTEGER      shift and go to state 123
    ID              shift and go to state 121

    range_value                    shift and go to state 122

state 91

    (53) vector -> [ numbers . ]
    (54) numbers -> numbers . , number

    ]               shift and go to state 124
    ,               shift and go to state 125


state 92

    (55) numbers -> number .

    ]               reduce using rule 55 (numbers -> number .)
    ,               reduce using rule 55 (numbers -> number .)


state 93

    (14) assignment -> assign_id = expression ; .

    {               reduce using rule 14 (assignment -> assign_id = expression ; .)
    IF              reduce using rule 14 (assignment -> assign_id = expression ; .)
    PRINT           reduce using rule 14 (assignment -> assign_id = expression ; .)
    BREAK           reduce using rule 14 (assignment -> assign_id = expression ; .)
    CONTINUE        reduce using rule 14 (assignment -> assign_id = expression ; .)
    RETURN          reduce using rule 14 (assignment -> assign_id = expression ; .)
    WHILE           reduce using rule 14 (assignment -> assign_id = expression ; .)
    FOR             reduce using rule 14 (assignment -> assign_id = expression ; .)
    ID              reduce using rule 14 (assignment -> assign_id = expression ; .)
    $end            reduce using rule 14 (assignment -> assign_id = expression ; .)
    }               reduce using rule 14 (assignment -> assign_id = expression ; .)
    ELSE            reduce using rule 14 (assignment -> assign_id = expression ; .)


state 94

    (15) assignment -> assign_id MUL_ASSIGN expression ; .

    {               reduce using rule 15 (assignment -> assign_id MUL_ASSIGN expression ; .)
    IF              reduce using rule 15 (assignment -> assign_id MUL_ASSIGN expression ; .)
    PRINT           reduce using rule 15 (assignment -> assign_id MUL_ASSIGN expression ; .)
    BREAK           reduce using rule 15 (assignment -> assign_id MUL_ASSIGN expression ; .)
    CONTINUE        reduce using rule 15 (assignment -> assign_id MUL_ASSIGN expression ; .)
    RETURN          reduce using rule 15 (assignment -> assign_id MUL_ASSIGN expression ; .)
    WHILE           reduce using rule 15 (assignment -> assign_id MUL_ASSIGN expression ; .)
    FOR             reduce using rule 15 (assignment -> assign_id MUL_ASSIGN expression ; .)
    ID              reduce using rule 15 (assignment -> assign_id MUL_ASSIGN expression ; .)
    $end            reduce using rule 15 (assignment -> assign_id MUL_ASSIGN expression ; .)
    }               reduce using rule 15 (assignment -> assign_id MUL_ASSIGN expression ; .)
    ELSE            reduce using rule 15 (assignment -> assign_id MUL_ASSIGN expression ; .)


state 95

    (16) assignment -> assign_id DIV_ASSIGN expression ; .

    {               reduce using rule 16 (assignment -> assign_id DIV_ASSIGN expression ; .)
    IF              reduce using rule 16 (assignment -> assign_id DIV_ASSIGN expression ; .)
    PRINT           reduce using rule 16 (assignment -> assign_id DIV_ASSIGN expression ; .)
    BREAK           reduce using rule 16 (assignment -> assign_id DIV_ASSIGN expression ; .)
    CONTINUE        reduce using rule 16 (assignment -> assign_id DIV_ASSIGN expression ; .)
    RETURN          reduce using rule 16 (assignment -> assign_id DIV_ASSIGN expression ; .)
    WHILE           reduce using rule 16 (assignment -> assign_id DIV_ASSIGN expression ; .)
    FOR             reduce using rule 16 (assignment -> assign_id DIV_ASSIGN expression ; .)
    ID              reduce using rule 16 (assignment -> assign_id DIV_ASSIGN expression ; .)
    $end            reduce using rule 16 (assignment -> assign_id DIV_ASSIGN expression ; .)
    }               reduce using rule 16 (assignment -> assign_id DIV_ASSIGN expression ; .)
    ELSE            reduce using rule 16 (assignment -> assign_id DIV_ASSIGN expression ; .)


state 96

    (17) assignment -> assign_id PLUS_ASSIGN expression ; .

    {               reduce using rule 17 (assignment -> assign_id PLUS_ASSIGN expression ; .)
    IF              reduce using rule 17 (assignment -> assign_id PLUS_ASSIGN expression ; .)
    PRINT           reduce using rule 17 (assignment -> assign_id PLUS_ASSIGN expression ; .)
    BREAK           reduce using rule 17 (assignment -> assign_id PLUS_ASSIGN expression ; .)
    CONTINUE        reduce using rule 17 (assignment -> assign_id PLUS_ASSIGN expression ; .)
    RETURN          reduce using rule 17 (assignment -> assign_id PLUS_ASSIGN expression ; .)
    WHILE           reduce using rule 17 (assignment -> assign_id PLUS_ASSIGN expression ; .)
    FOR             reduce using rule 17 (assignment -> assign_id PLUS_ASSIGN expression ; .)
    ID              reduce using rule 17 (assignment -> assign_id PLUS_ASSIGN expression ; .)
    $end            reduce using rule 17 (assignment -> assign_id PLUS_ASSIGN expression ; .)
    }               reduce using rule 17 (assignment -> assign_id PLUS_ASSIGN expression ; .)
    ELSE            reduce using rule 17 (assignment -> assign_id PLUS_ASSIGN expression ; .)


state 97

    (18) assignment -> assign_id SUB_ASSIGN expression ; .

    {               reduce using rule 18 (assignment -> assign_id SUB_ASSIGN expression ; .)
    IF              reduce using rule 18 (assignment -> assign_id SUB_ASSIGN expression ; .)
    PRINT           reduce using rule 18 (assignment -> assign_id SUB_ASSIGN expression ; .)
    BREAK           reduce using rule 18 (assignment -> assign_id SUB_ASSIGN expression ; .)
    CONTINUE        reduce using rule 18 (assignment -> assign_id SUB_ASSIGN expression ; .)
    RETURN          reduce using rule 18 (assignment -> assign_id SUB_ASSIGN expression ; .)
    WHILE           reduce using rule 18 (assignment -> assign_id SUB_ASSIGN expression ; .)
    FOR             reduce using rule 18 (assignment -> assign_id SUB_ASSIGN expression ; .)
    ID              reduce using rule 18 (assignment -> assign_id SUB_ASSIGN expression ; .)
    $end            reduce using rule 18 (assignment -> assign_id SUB_ASSIGN expression ; .)
    }               reduce using rule 18 (assignment -> assign_id SUB_ASSIGN expression ; .)
    ELSE            reduce using rule 18 (assignment -> assign_id SUB_ASSIGN expression ; .)


state 98

    (60) conditional_statement -> IF expression instructions ELSE . instructions
    (4) instructions -> . instructions instruction
    (5) instructions -> . instruction
    (6) instruction -> . assignment
    (7) instruction -> . conditional_statement
    (8) instruction -> . print_statement
    (9) instruction -> . jump_statement
    (10) instruction -> . return_statement
    (11) instruction -> . while_loop
    (12) instruction -> . for_loop
    (13) instruction -> . { instructions }
    (14) assignment -> . assign_id = expression ;
    (15) assignment -> . assign_id MUL_ASSIGN expression ;
    (16) assignment -> . assign_id DIV_ASSIGN expression ;
    (17) assignment -> . assign_id PLUS_ASSIGN expression ;
    (18) assignment -> . assign_id SUB_ASSIGN expression ;
    (59) conditional_statement -> . IF expression instructions
    (60) conditional_statement -> . IF expression instructions ELSE instructions
    (65) print_statement -> . PRINT expression_list ;
    (61) jump_statement -> . BREAK ;
    (62) jump_statement -> . CONTINUE ;
    (63) return_statement -> . RETURN ;
    (64) return_statement -> . RETURN expression ;
    (68) while_loop -> . WHILE ( expression ) instructions
    (69) for_loop -> . FOR ID = range_value : range_value instructions
    (19) assign_id -> . ID
    (20) assign_id -> . ID vector

    {               shift and go to state 12
    IF              shift and go to state 14
    PRINT           shift and go to state 15
    BREAK           shift and go to state 16
    CONTINUE        shift and go to state 17
    RETURN          shift and go to state 18
    WHILE           shift and go to state 19
    FOR             shift and go to state 20
    ID              shift and go to state 21

    instructions                   shift and go to state 126
    instruction                    shift and go to state 4
    assignment                     shift and go to state 5
    conditional_statement          shift and go to state 6
    print_statement                shift and go to state 7
    jump_statement                 shift and go to state 8
    return_statement               shift and go to state 9
    while_loop                     shift and go to state 10
    for_loop                       shift and go to state 11
    assign_id                      shift and go to state 13

state 99

    (29) expression_binop -> expression + expression .
    (29) expression_binop -> expression . + expression
    (30) expression_binop -> expression . - expression
    (31) expression_binop -> expression . * expression
    (32) expression_binop -> expression . / expression
    (33) expression_binop -> expression . MATRIX_PLUS expression
    (34) expression_binop -> expression . MATRIX_SUB expression
    (35) expression_binop -> expression . MATRIX_MUL expression
    (36) expression_binop -> expression . MATRIX_DIV expression
    (37) expression_relop -> expression . RELOP_EQ expression
    (38) expression_relop -> expression . RELOP_GT expression
    (39) expression_relop -> expression . RELOP_LT expression
    (40) expression_relop -> expression . RELOP_GE expression
    (41) expression_relop -> expression . RELOP_LE expression
    (42) expression_relop -> expression . RELOP_NE expression
    (44) expression_unary -> expression . '

    +               reduce using rule 29 (expression_binop -> expression + expression .)
    -               reduce using rule 29 (expression_binop -> expression + expression .)
    RELOP_EQ        reduce using rule 29 (expression_binop -> expression + expression .)
    RELOP_GT        reduce using rule 29 (expression_binop -> expression + expression .)
    RELOP_LT        reduce using rule 29 (expression_binop -> expression + expression .)
    RELOP_GE        reduce using rule 29 (expression_binop -> expression + expression .)
    RELOP_LE        reduce using rule 29 (expression_binop -> expression + expression .)
    RELOP_NE        reduce using rule 29 (expression_binop -> expression + expression .)
    '               reduce using rule 29 (expression_binop -> expression + expression .)
    {               reduce using rule 29 (expression_binop -> expression + expression .)
    IF              reduce using rule 29 (expression_binop -> expression + expression .)
    PRINT           reduce using rule 29 (expression_binop -> expression + expression .)
    BREAK           reduce using rule 29 (expression_binop -> expression + expression .)
    CONTINUE        reduce using rule 29 (expression_binop -> expression + expression .)
    RETURN          reduce using rule 29 (expression_binop -> expression + expression .)
    WHILE           reduce using rule 29 (expression_binop -> expression + expression .)
    FOR             reduce using rule 29 (expression_binop -> expression + expression .)
    ID              reduce using rule 29 (expression_binop -> expression + expression .)
    ;               reduce using rule 29 (expression_binop -> expression + expression .)
    ,               reduce using rule 29 (expression_binop -> expression + expression .)
    )               reduce using rule 29 (expression_binop -> expression + expression .)
    *               shift and go to state 66
    /               shift and go to state 67
    MATRIX_PLUS     shift and go to state 68
    MATRIX_SUB      shift and go to state 69
    MATRIX_MUL      shift and go to state 70
    MATRIX_DIV      shift and go to state 71

  ! *               [ reduce using rule 29 (expression_binop -> expression + expression .) ]
  ! /               [ reduce using rule 29 (expression_binop -> expression + expression .) ]
  ! MATRIX_PLUS     [ reduce using rule 29 (expression_binop -> expression + expression .) ]
  ! MATRIX_SUB      [ reduce using rule 29 (expression_binop -> expression + expression .) ]
  ! MATRIX_MUL      [ reduce using rule 29 (expression_binop -> expression + expression .) ]
  ! MATRIX_DIV      [ reduce using rule 29 (expression_binop -> expression + expression .) ]
  ! +               [ shift and go to state 64 ]
  ! -               [ shift and go to state 65 ]
  ! RELOP_EQ        [ shift and go to state 72 ]
  ! RELOP_GT        [ shift and go to state 73 ]
  ! RELOP_LT        [ shift and go to state 74 ]
  ! RELOP_GE        [ shift and go to state 75 ]
  ! RELOP_LE        [ shift and go to state 76 ]
  ! RELOP_NE        [ shift and go to state 77 ]
  ! '               [ shift and go to state 78 ]


state 100

    (30) expression_binop -> expression - expression .
    (29) expression_binop -> expression . + expression
    (30) expression_binop -> expression . - expression
    (31) expression_binop -> expression . * expression
    (32) expression_binop -> expression . / expression
    (33) expression_binop -> expression . MATRIX_PLUS expression
    (34) expression_binop -> expression . MATRIX_SUB expression
    (35) expression_binop -> expression . MATRIX_MUL expression
    (36) expression_binop -> expression . MATRIX_DIV expression
    (37) expression_relop -> expression . RELOP_EQ expression
    (38) expression_relop -> expression . RELOP_GT expression
    (39) expression_relop -> expression . RELOP_LT expression
    (40) expression_relop -> expression . RELOP_GE expression
    (41) expression_relop -> expression . RELOP_LE expression
    (42) expression_relop -> expression . RELOP_NE expression
    (44) expression_unary -> expression . '

    +               reduce using rule 30 (expression_binop -> expression - expression .)
    -               reduce using rule 30 (expression_binop -> expression - expression .)
    RELOP_EQ        reduce using rule 30 (expression_binop -> expression - expression .)
    RELOP_GT        reduce using rule 30 (expression_binop -> expression - expression .)
    RELOP_LT        reduce using rule 30 (expression_binop -> expression - expression .)
    RELOP_GE        reduce using rule 30 (expression_binop -> expression - expression .)
    RELOP_LE        reduce using rule 30 (expression_binop -> expression - expression .)
    RELOP_NE        reduce using rule 30 (expression_binop -> expression - expression .)
    '               reduce using rule 30 (expression_binop -> expression - expression .)
    {               reduce using rule 30 (expression_binop -> expression - expression .)
    IF              reduce using rule 30 (expression_binop -> expression - expression .)
    PRINT           reduce using rule 30 (expression_binop -> expression - expression .)
    BREAK           reduce using rule 30 (expression_binop -> expression - expression .)
    CONTINUE        reduce using rule 30 (expression_binop -> expression - expression .)
    RETURN          reduce using rule 30 (expression_binop -> expression - expression .)
    WHILE           reduce using rule 30 (expression_binop -> expression - expression .)
    FOR             reduce using rule 30 (expression_binop -> expression - expression .)
    ID              reduce using rule 30 (expression_binop -> expression - expression .)
    ;               reduce using rule 30 (expression_binop -> expression - expression .)
    ,               reduce using rule 30 (expression_binop -> expression - expression .)
    )               reduce using rule 30 (expression_binop -> expression - expression .)
    *               shift and go to state 66
    /               shift and go to state 67
    MATRIX_PLUS     shift and go to state 68
    MATRIX_SUB      shift and go to state 69
    MATRIX_MUL      shift and go to state 70
    MATRIX_DIV      shift and go to state 71

  ! *               [ reduce using rule 30 (expression_binop -> expression - expression .) ]
  ! /               [ reduce using rule 30 (expression_binop -> expression - expression .) ]
  ! MATRIX_PLUS     [ reduce using rule 30 (expression_binop -> expression - expression .) ]
  ! MATRIX_SUB      [ reduce using rule 30 (expression_binop -> expression - expression .) ]
  ! MATRIX_MUL      [ reduce using rule 30 (expression_binop -> expression - expression .) ]
  ! MATRIX_DIV      [ reduce using rule 30 (expression_binop -> expression - expression .) ]
  ! +               [ shift and go to state 64 ]
  ! -               [ shift and go to state 65 ]
  ! RELOP_EQ        [ shift and go to state 72 ]
  ! RELOP_GT        [ shift and go to state 73 ]
  ! RELOP_LT        [ shift and go to state 74 ]
  ! RELOP_GE        [ shift and go to state 75 ]
  ! RELOP_LE        [ shift and go to state 76 ]
  ! RELOP_NE        [ shift and go to state 77 ]
  ! '               [ shift and go to state 78 ]


state 101

    (31) expression_binop -> expression * expression .
    (29) expression_binop -> expression . + expression
    (30) expression_binop -> expression . - expression
    (31) expression_binop -> expression . * expression
    (32) expression_binop -> expression . / expression
    (33) expression_binop -> expression . MATRIX_PLUS expression
    (34) expression_binop -> expression . MATRIX_SUB expression
    (35) expression_binop -> expression . MATRIX_MUL expression
    (36) expression_binop -> expression . MATRIX_DIV expression
    (37) expression_relop -> expression . RELOP_EQ expression
    (38) expression_relop -> expression . RELOP_GT expression
    (39) expression_relop -> expression . RELOP_LT expression
    (40) expression_relop -> expression . RELOP_GE expression
    (41) expression_relop -> expression . RELOP_LE expression
    (42) expression_relop -> expression . RELOP_NE expression
    (44) expression_unary -> expression . '

    +               reduce using rule 31 (expression_binop -> expression * expression .)
    -               reduce using rule 31 (expression_binop -> expression * expression .)
    *               reduce using rule 31 (expression_binop -> expression * expression .)
    /               reduce using rule 31 (expression_binop -> expression * expression .)
    RELOP_EQ        reduce using rule 31 (expression_binop -> expression * expression .)
    RELOP_GT        reduce using rule 31 (expression_binop -> expression * expression .)
    RELOP_LT        reduce using rule 31 (expression_binop -> expression * expression .)
    RELOP_GE        reduce using rule 31 (expression_binop -> expression * expression .)
    RELOP_LE        reduce using rule 31 (expression_binop -> expression * expression .)
    RELOP_NE        reduce using rule 31 (expression_binop -> expression * expression .)
    '               reduce using rule 31 (expression_binop -> expression * expression .)
    {               reduce using rule 31 (expression_binop -> expression * expression .)
    IF              reduce using rule 31 (expression_binop -> expression * expression .)
    PRINT           reduce using rule 31 (expression_binop -> expression * expression .)
    BREAK           reduce using rule 31 (expression_binop -> expression * expression .)
    CONTINUE        reduce using rule 31 (expression_binop -> expression * expression .)
    RETURN          reduce using rule 31 (expression_binop -> expression * expression .)
    WHILE           reduce using rule 31 (expression_binop -> expression * expression .)
    FOR             reduce using rule 31 (expression_binop -> expression * expression .)
    ID              reduce using rule 31 (expression_binop -> expression * expression .)
    ;               reduce using rule 31 (expression_binop -> expression * expression .)
    ,               reduce using rule 31 (expression_binop -> expression * expression .)
    )               reduce using rule 31 (expression_binop -> expression * expression .)
    MATRIX_PLUS     shift and go to state 68
    MATRIX_SUB      shift and go to state 69
    MATRIX_MUL      shift and go to state 70
    MATRIX_DIV      shift and go to state 71

  ! MATRIX_PLUS     [ reduce using rule 31 (expression_binop -> expression * expression .) ]
  ! MATRIX_SUB      [ reduce using rule 31 (expression_binop -> expression * expression .) ]
  ! MATRIX_MUL      [ reduce using rule 31 (expression_binop -> expression * expression .) ]
  ! MATRIX_DIV      [ reduce using rule 31 (expression_binop -> expression * expression .) ]
  ! +               [ shift and go to state 64 ]
  ! -               [ shift and go to state 65 ]
  ! *               [ shift and go to state 66 ]
  ! /               [ shift and go to state 67 ]
  ! RELOP_EQ        [ shift and go to state 72 ]
  ! RELOP_GT        [ shift and go to state 73 ]
  ! RELOP_LT        [ shift and go to state 74 ]
  ! RELOP_GE        [ shift and go to state 75 ]
  ! RELOP_LE        [ shift and go to state 76 ]
  ! RELOP_NE        [ shift and go to state 77 ]
  ! '               [ shift and go to state 78 ]


state 102

    (32) expression_binop -> expression / expression .
    (29) expression_binop -> expression . + expression
    (30) expression_binop -> expression . - expression
    (31) expression_binop -> expression . * expression
    (32) expression_binop -> expression . / expression
    (33) expression_binop -> expression . MATRIX_PLUS expression
    (34) expression_binop -> expression . MATRIX_SUB expression
    (35) expression_binop -> expression . MATRIX_MUL expression
    (36) expression_binop -> expression . MATRIX_DIV expression
    (37) expression_relop -> expression . RELOP_EQ expression
    (38) expression_relop -> expression . RELOP_GT expression
    (39) expression_relop -> expression . RELOP_LT expression
    (40) expression_relop -> expression . RELOP_GE expression
    (41) expression_relop -> expression . RELOP_LE expression
    (42) expression_relop -> expression . RELOP_NE expression
    (44) expression_unary -> expression . '

    +               reduce using rule 32 (expression_binop -> expression / expression .)
    -               reduce using rule 32 (expression_binop -> expression / expression .)
    *               reduce using rule 32 (expression_binop -> expression / expression .)
    /               reduce using rule 32 (expression_binop -> expression / expression .)
    RELOP_EQ        reduce using rule 32 (expression_binop -> expression / expression .)
    RELOP_GT        reduce using rule 32 (expression_binop -> expression / expression .)
    RELOP_LT        reduce using rule 32 (expression_binop -> expression / expression .)
    RELOP_GE        reduce using rule 32 (expression_binop -> expression / expression .)
    RELOP_LE        reduce using rule 32 (expression_binop -> expression / expression .)
    RELOP_NE        reduce using rule 32 (expression_binop -> expression / expression .)
    '               reduce using rule 32 (expression_binop -> expression / expression .)
    {               reduce using rule 32 (expression_binop -> expression / expression .)
    IF              reduce using rule 32 (expression_binop -> expression / expression .)
    PRINT           reduce using rule 32 (expression_binop -> expression / expression .)
    BREAK           reduce using rule 32 (expression_binop -> expression / expression .)
    CONTINUE        reduce using rule 32 (expression_binop -> expression / expression .)
    RETURN          reduce using rule 32 (expression_binop -> expression / expression .)
    WHILE           reduce using rule 32 (expression_binop -> expression / expression .)
    FOR             reduce using rule 32 (expression_binop -> expression / expression .)
    ID              reduce using rule 32 (expression_binop -> expression / expression .)
    ;               reduce using rule 32 (expression_binop -> expression / expression .)
    ,               reduce using rule 32 (expression_binop -> expression / expression .)
    )               reduce using rule 32 (expression_binop -> expression / expression .)
    MATRIX_PLUS     shift and go to state 68
    MATRIX_SUB      shift and go to state 69
    MATRIX_MUL      shift and go to state 70
    MATRIX_DIV      shift and go to state 71

  ! MATRIX_PLUS     [ reduce using rule 32 (expression_binop -> expression / expression .) ]
  ! MATRIX_SUB      [ reduce using rule 32 (expression_binop -> expression / expression .) ]
  ! MATRIX_MUL      [ reduce using rule 32 (expression_binop -> expression / expression .) ]
  ! MATRIX_DIV      [ reduce using rule 32 (expression_binop -> expression / expression .) ]
  ! +               [ shift and go to state 64 ]
  ! -               [ shift and go to state 65 ]
  ! *               [ shift and go to state 66 ]
  ! /               [ shift and go to state 67 ]
  ! RELOP_EQ        [ shift and go to state 72 ]
  ! RELOP_GT        [ shift and go to state 73 ]
  ! RELOP_LT        [ shift and go to state 74 ]
  ! RELOP_GE        [ shift and go to state 75 ]
  ! RELOP_LE        [ shift and go to state 76 ]
  ! RELOP_NE        [ shift and go to state 77 ]
  ! '               [ shift and go to state 78 ]


state 103

    (33) expression_binop -> expression MATRIX_PLUS expression .
    (29) expression_binop -> expression . + expression
    (30) expression_binop -> expression . - expression
    (31) expression_binop -> expression . * expression
    (32) expression_binop -> expression . / expression
    (33) expression_binop -> expression . MATRIX_PLUS expression
    (34) expression_binop -> expression . MATRIX_SUB expression
    (35) expression_binop -> expression . MATRIX_MUL expression
    (36) expression_binop -> expression . MATRIX_DIV expression
    (37) expression_relop -> expression . RELOP_EQ expression
    (38) expression_relop -> expression . RELOP_GT expression
    (39) expression_relop -> expression . RELOP_LT expression
    (40) expression_relop -> expression . RELOP_GE expression
    (41) expression_relop -> expression . RELOP_LE expression
    (42) expression_relop -> expression . RELOP_NE expression
    (44) expression_unary -> expression . '

    +               reduce using rule 33 (expression_binop -> expression MATRIX_PLUS expression .)
    -               reduce using rule 33 (expression_binop -> expression MATRIX_PLUS expression .)
    *               reduce using rule 33 (expression_binop -> expression MATRIX_PLUS expression .)
    /               reduce using rule 33 (expression_binop -> expression MATRIX_PLUS expression .)
    MATRIX_PLUS     reduce using rule 33 (expression_binop -> expression MATRIX_PLUS expression .)
    MATRIX_SUB      reduce using rule 33 (expression_binop -> expression MATRIX_PLUS expression .)
    RELOP_EQ        reduce using rule 33 (expression_binop -> expression MATRIX_PLUS expression .)
    RELOP_GT        reduce using rule 33 (expression_binop -> expression MATRIX_PLUS expression .)
    RELOP_LT        reduce using rule 33 (expression_binop -> expression MATRIX_PLUS expression .)
    RELOP_GE        reduce using rule 33 (expression_binop -> expression MATRIX_PLUS expression .)
    RELOP_LE        reduce using rule 33 (expression_binop -> expression MATRIX_PLUS expression .)
    RELOP_NE        reduce using rule 33 (expression_binop -> expression MATRIX_PLUS expression .)
    '               reduce using rule 33 (expression_binop -> expression MATRIX_PLUS expression .)
    {               reduce using rule 33 (expression_binop -> expression MATRIX_PLUS expression .)
    IF              reduce using rule 33 (expression_binop -> expression MATRIX_PLUS expression .)
    PRINT           reduce using rule 33 (expression_binop -> expression MATRIX_PLUS expression .)
    BREAK           reduce using rule 33 (expression_binop -> expression MATRIX_PLUS expression .)
    CONTINUE        reduce using rule 33 (expression_binop -> expression MATRIX_PLUS expression .)
    RETURN          reduce using rule 33 (expression_binop -> expression MATRIX_PLUS expression .)
    WHILE           reduce using rule 33 (expression_binop -> expression MATRIX_PLUS expression .)
    FOR             reduce using rule 33 (expression_binop -> expression MATRIX_PLUS expression .)
    ID              reduce using rule 33 (expression_binop -> expression MATRIX_PLUS expression .)
    ;               reduce using rule 33 (expression_binop -> expression MATRIX_PLUS expression .)
    ,               reduce using rule 33 (expression_binop -> expression MATRIX_PLUS expression .)
    )               reduce using rule 33 (expression_binop -> expression MATRIX_PLUS expression .)
    MATRIX_MUL      shift and go to state 70
    MATRIX_DIV      shift and go to state 71

  ! MATRIX_MUL      [ reduce using rule 33 (expression_binop -> expression MATRIX_PLUS expression .) ]
  ! MATRIX_DIV      [ reduce using rule 33 (expression_binop -> expression MATRIX_PLUS expression .) ]
  ! +               [ shift and go to state 64 ]
  ! -               [ shift and go to state 65 ]
  ! *               [ shift and go to state 66 ]
  ! /               [ shift and go to state 67 ]
  ! MATRIX_PLUS     [ shift and go to state 68 ]
  ! MATRIX_SUB      [ shift and go to state 69 ]
  ! RELOP_EQ        [ shift and go to state 72 ]
  ! RELOP_GT        [ shift and go to state 73 ]
  ! RELOP_LT        [ shift and go to state 74 ]
  ! RELOP_GE        [ shift and go to state 75 ]
  ! RELOP_LE        [ shift and go to state 76 ]
  ! RELOP_NE        [ shift and go to state 77 ]
  ! '               [ shift and go to state 78 ]


state 104

    (34) expression_binop -> expression MATRIX_SUB expression .
    (29) expression_binop -> expression . + expression
    (30) expression_binop -> expression . - expression
    (31) expression_binop -> expression . * expression
    (32) expression_binop -> expression . / expression
    (33) expression_binop -> expression . MATRIX_PLUS expression
    (34) expression_binop -> expression . MATRIX_SUB expression
    (35) expression_binop -> expression . MATRIX_MUL expression
    (36) expression_binop -> expression . MATRIX_DIV expression
    (37) expression_relop -> expression . RELOP_EQ expression
    (38) expression_relop -> expression . RELOP_GT expression
    (39) expression_relop -> expression . RELOP_LT expression
    (40) expression_relop -> expression . RELOP_GE expression
    (41) expression_relop -> expression . RELOP_LE expression
    (42) expression_relop -> expression . RELOP_NE expression
    (44) expression_unary -> expression . '

    +               reduce using rule 34 (expression_binop -> expression MATRIX_SUB expression .)
    -               reduce using rule 34 (expression_binop -> expression MATRIX_SUB expression .)
    *               reduce using rule 34 (expression_binop -> expression MATRIX_SUB expression .)
    /               reduce using rule 34 (expression_binop -> expression MATRIX_SUB expression .)
    MATRIX_PLUS     reduce using rule 34 (expression_binop -> expression MATRIX_SUB expression .)
    MATRIX_SUB      reduce using rule 34 (expression_binop -> expression MATRIX_SUB expression .)
    RELOP_EQ        reduce using rule 34 (expression_binop -> expression MATRIX_SUB expression .)
    RELOP_GT        reduce using rule 34 (expression_binop -> expression MATRIX_SUB expression .)
    RELOP_LT        reduce using rule 34 (expression_binop -> expression MATRIX_SUB expression .)
    RELOP_GE        reduce using rule 34 (expression_binop -> expression MATRIX_SUB expression .)
    RELOP_LE        reduce using rule 34 (expression_binop -> expression MATRIX_SUB expression .)
    RELOP_NE        reduce using rule 34 (expression_binop -> expression MATRIX_SUB expression .)
    '               reduce using rule 34 (expression_binop -> expression MATRIX_SUB expression .)
    {               reduce using rule 34 (expression_binop -> expression MATRIX_SUB expression .)
    IF              reduce using rule 34 (expression_binop -> expression MATRIX_SUB expression .)
    PRINT           reduce using rule 34 (expression_binop -> expression MATRIX_SUB expression .)
    BREAK           reduce using rule 34 (expression_binop -> expression MATRIX_SUB expression .)
    CONTINUE        reduce using rule 34 (expression_binop -> expression MATRIX_SUB expression .)
    RETURN          reduce using rule 34 (expression_binop -> expression MATRIX_SUB expression .)
    WHILE           reduce using rule 34 (expression_binop -> expression MATRIX_SUB expression .)
    FOR             reduce using rule 34 (expression_binop -> expression MATRIX_SUB expression .)
    ID              reduce using rule 34 (expression_binop -> expression MATRIX_SUB expression .)
    ;               reduce using rule 34 (expression_binop -> expression MATRIX_SUB expression .)
    ,               reduce using rule 34 (expression_binop -> expression MATRIX_SUB expression .)
    )               reduce using rule 34 (expression_binop -> expression MATRIX_SUB expression .)
    MATRIX_MUL      shift and go to state 70
    MATRIX_DIV      shift and go to state 71

  ! MATRIX_MUL      [ reduce using rule 34 (expression_binop -> expression MATRIX_SUB expression .) ]
  ! MATRIX_DIV      [ reduce using rule 34 (expression_binop -> expression MATRIX_SUB expression .) ]
  ! +               [ shift and go to state 64 ]
  ! -               [ shift and go to state 65 ]
  ! *               [ shift and go to state 66 ]
  ! /               [ shift and go to state 67 ]
  ! MATRIX_PLUS     [ shift and go to state 68 ]
  ! MATRIX_SUB      [ shift and go to state 69 ]
  ! RELOP_EQ        [ shift and go to state 72 ]
  ! RELOP_GT        [ shift and go to state 73 ]
  ! RELOP_LT        [ shift and go to state 74 ]
  ! RELOP_GE        [ shift and go to state 75 ]
  ! RELOP_LE        [ shift and go to state 76 ]
  ! RELOP_NE        [ shift and go to state 77 ]
  ! '               [ shift and go to state 78 ]


state 105

    (35) expression_binop -> expression MATRIX_MUL expression .
    (29) expression_binop -> expression . + expression
    (30) expression_binop -> expression . - expression
    (31) expression_binop -> expression . * expression
    (32) expression_binop -> expression . / expression
    (33) expression_binop -> expression . MATRIX_PLUS expression
    (34) expression_binop -> expression . MATRIX_SUB expression
    (35) expression_binop -> expression . MATRIX_MUL expression
    (36) expression_binop -> expression . MATRIX_DIV expression
    (37) expression_relop -> expression . RELOP_EQ expression
    (38) expression_relop -> expression . RELOP_GT expression
    (39) expression_relop -> expression . RELOP_LT expression
    (40) expression_relop -> expression . RELOP_GE expression
    (41) expression_relop -> expression . RELOP_LE expression
    (42) expression_relop -> expression . RELOP_NE expression
    (44) expression_unary -> expression . '

    +               reduce using rule 35 (expression_binop -> expression MATRIX_MUL expression .)
    -               reduce using rule 35 (expression_binop -> expression MATRIX_MUL expression .)
    *               reduce using rule 35 (expression_binop -> expression MATRIX_MUL expression .)
    /               reduce using rule 35 (expression_binop -> expression MATRIX_MUL expression .)
    MATRIX_PLUS     reduce using rule 35 (expression_binop -> expression MATRIX_MUL expression .)
    MATRIX_SUB      reduce using rule 35 (expression_binop -> expression MATRIX_MUL expression .)
    MATRIX_MUL      reduce using rule 35 (expression_binop -> expression MATRIX_MUL expression .)
    MATRIX_DIV      reduce using rule 35 (expression_binop -> expression MATRIX_MUL expression .)
    RELOP_EQ        reduce using rule 35 (expression_binop -> expression MATRIX_MUL expression .)
    RELOP_GT        reduce using rule 35 (expression_binop -> expression MATRIX_MUL expression .)
    RELOP_LT        reduce using rule 35 (expression_binop -> expression MATRIX_MUL expression .)
    RELOP_GE        reduce using rule 35 (expression_binop -> expression MATRIX_MUL expression .)
    RELOP_LE        reduce using rule 35 (expression_binop -> expression MATRIX_MUL expression .)
    RELOP_NE        reduce using rule 35 (expression_binop -> expression MATRIX_MUL expression .)
    '               reduce using rule 35 (expression_binop -> expression MATRIX_MUL expression .)
    {               reduce using rule 35 (expression_binop -> expression MATRIX_MUL expression .)
    IF              reduce using rule 35 (expression_binop -> expression MATRIX_MUL expression .)
    PRINT           reduce using rule 35 (expression_binop -> expression MATRIX_MUL expression .)
    BREAK           reduce using rule 35 (expression_binop -> expression MATRIX_MUL expression .)
    CONTINUE        reduce using rule 35 (expression_binop -> expression MATRIX_MUL expression .)
    RETURN          reduce using rule 35 (expression_binop -> expression MATRIX_MUL expression .)
    WHILE           reduce using rule 35 (expression_binop -> expression MATRIX_MUL expression .)
    FOR             reduce using rule 35 (expression_binop -> expression MATRIX_MUL expression .)
    ID              reduce using rule 35 (expression_binop -> expression MATRIX_MUL expression .)
    ;               reduce using rule 35 (expression_binop -> expression MATRIX_MUL expression .)
    ,               reduce using rule 35 (expression_binop -> expression MATRIX_MUL expression .)
    )               reduce using rule 35 (expression_binop -> expression MATRIX_MUL expression .)

  ! +               [ shift and go to state 64 ]
  ! -               [ shift and go to state 65 ]
  ! *               [ shift and go to state 66 ]
  ! /               [ shift and go to state 67 ]
  ! MATRIX_PLUS     [ shift and go to state 68 ]
  ! MATRIX_SUB      [ shift and go to state 69 ]
  ! MATRIX_MUL      [ shift and go to state 70 ]
  ! MATRIX_DIV      [ shift and go to state 71 ]
  ! RELOP_EQ        [ shift and go to state 72 ]
  ! RELOP_GT        [ shift and go to state 73 ]
  ! RELOP_LT        [ shift and go to state 74 ]
  ! RELOP_GE        [ shift and go to state 75 ]
  ! RELOP_LE        [ shift and go to state 76 ]
  ! RELOP_NE        [ shift and go to state 77 ]
  ! '               [ shift and go to state 78 ]


state 106

    (36) expression_binop -> expression MATRIX_DIV expression .
    (29) expression_binop -> expression . + expression
    (30) expression_binop -> expression . - expression
    (31) expression_binop -> expression . * expression
    (32) expression_binop -> expression . / expression
    (33) expression_binop -> expression . MATRIX_PLUS expression
    (34) expression_binop -> expression . MATRIX_SUB expression
    (35) expression_binop -> expression . MATRIX_MUL expression
    (36) expression_binop -> expression . MATRIX_DIV expression
    (37) expression_relop -> expression . RELOP_EQ expression
    (38) expression_relop -> expression . RELOP_GT expression
    (39) expression_relop -> expression . RELOP_LT expression
    (40) expression_relop -> expression . RELOP_GE expression
    (41) expression_relop -> expression . RELOP_LE expression
    (42) expression_relop -> expression . RELOP_NE expression
    (44) expression_unary -> expression . '

    +               reduce using rule 36 (expression_binop -> expression MATRIX_DIV expression .)
    -               reduce using rule 36 (expression_binop -> expression MATRIX_DIV expression .)
    *               reduce using rule 36 (expression_binop -> expression MATRIX_DIV expression .)
    /               reduce using rule 36 (expression_binop -> expression MATRIX_DIV expression .)
    MATRIX_PLUS     reduce using rule 36 (expression_binop -> expression MATRIX_DIV expression .)
    MATRIX_SUB      reduce using rule 36 (expression_binop -> expression MATRIX_DIV expression .)
    MATRIX_MUL      reduce using rule 36 (expression_binop -> expression MATRIX_DIV expression .)
    MATRIX_DIV      reduce using rule 36 (expression_binop -> expression MATRIX_DIV expression .)
    RELOP_EQ        reduce using rule 36 (expression_binop -> expression MATRIX_DIV expression .)
    RELOP_GT        reduce using rule 36 (expression_binop -> expression MATRIX_DIV expression .)
    RELOP_LT        reduce using rule 36 (expression_binop -> expression MATRIX_DIV expression .)
    RELOP_GE        reduce using rule 36 (expression_binop -> expression MATRIX_DIV expression .)
    RELOP_LE        reduce using rule 36 (expression_binop -> expression MATRIX_DIV expression .)
    RELOP_NE        reduce using rule 36 (expression_binop -> expression MATRIX_DIV expression .)
    '               reduce using rule 36 (expression_binop -> expression MATRIX_DIV expression .)
    {               reduce using rule 36 (expression_binop -> expression MATRIX_DIV expression .)
    IF              reduce using rule 36 (expression_binop -> expression MATRIX_DIV expression .)
    PRINT           reduce using rule 36 (expression_binop -> expression MATRIX_DIV expression .)
    BREAK           reduce using rule 36 (expression_binop -> expression MATRIX_DIV expression .)
    CONTINUE        reduce using rule 36 (expression_binop -> expression MATRIX_DIV expression .)
    RETURN          reduce using rule 36 (expression_binop -> expression MATRIX_DIV expression .)
    WHILE           reduce using rule 36 (expression_binop -> expression MATRIX_DIV expression .)
    FOR             reduce using rule 36 (expression_binop -> expression MATRIX_DIV expression .)
    ID              reduce using rule 36 (expression_binop -> expression MATRIX_DIV expression .)
    ;               reduce using rule 36 (expression_binop -> expression MATRIX_DIV expression .)
    ,               reduce using rule 36 (expression_binop -> expression MATRIX_DIV expression .)
    )               reduce using rule 36 (expression_binop -> expression MATRIX_DIV expression .)

  ! +               [ shift and go to state 64 ]
  ! -               [ shift and go to state 65 ]
  ! *               [ shift and go to state 66 ]
  ! /               [ shift and go to state 67 ]
  ! MATRIX_PLUS     [ shift and go to state 68 ]
  ! MATRIX_SUB      [ shift and go to state 69 ]
  ! MATRIX_MUL      [ shift and go to state 70 ]
  ! MATRIX_DIV      [ shift and go to state 71 ]
  ! RELOP_EQ        [ shift and go to state 72 ]
  ! RELOP_GT        [ shift and go to state 73 ]
  ! RELOP_LT        [ shift and go to state 74 ]
  ! RELOP_GE        [ shift and go to state 75 ]
  ! RELOP_LE        [ shift and go to state 76 ]
  ! RELOP_NE        [ shift and go to state 77 ]
  ! '               [ shift and go to state 78 ]


state 107

    (37) expression_relop -> expression RELOP_EQ expression .
    (29) expression_binop -> expression . + expression
    (30) expression_binop -> expression . - expression
    (31) expression_binop -> expression . * expression
    (32) expression_binop -> expression . / expression
    (33) expression_binop -> expression . MATRIX_PLUS expression
    (34) expression_binop -> expression . MATRIX_SUB expression
    (35) expression_binop -> expression . MATRIX_MUL expression
    (36) expression_binop -> expression . MATRIX_DIV expression
    (37) expression_relop -> expression . RELOP_EQ expression
    (38) expression_relop -> expression . RELOP_GT expression
    (39) expression_relop -> expression . RELOP_LT expression
    (40) expression_relop -> expression . RELOP_GE expression
    (41) expression_relop -> expression . RELOP_LE expression
    (42) expression_relop -> expression . RELOP_NE expression
    (44) expression_unary -> expression . '

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for MATRIX_PLUS resolved as shift
  ! shift/reduce conflict for MATRIX_SUB resolved as shift
  ! shift/reduce conflict for MATRIX_MUL resolved as shift
  ! shift/reduce conflict for MATRIX_DIV resolved as shift
  ! shift/reduce conflict for RELOP_EQ resolved as shift
  ! shift/reduce conflict for RELOP_GT resolved as shift
  ! shift/reduce conflict for RELOP_LT resolved as shift
  ! shift/reduce conflict for RELOP_GE resolved as shift
  ! shift/reduce conflict for RELOP_LE resolved as shift
  ! shift/reduce conflict for RELOP_NE resolved as shift
  ! shift/reduce conflict for ' resolved as shift
    {               reduce using rule 37 (expression_relop -> expression RELOP_EQ expression .)
    IF              reduce using rule 37 (expression_relop -> expression RELOP_EQ expression .)
    PRINT           reduce using rule 37 (expression_relop -> expression RELOP_EQ expression .)
    BREAK           reduce using rule 37 (expression_relop -> expression RELOP_EQ expression .)
    CONTINUE        reduce using rule 37 (expression_relop -> expression RELOP_EQ expression .)
    RETURN          reduce using rule 37 (expression_relop -> expression RELOP_EQ expression .)
    WHILE           reduce using rule 37 (expression_relop -> expression RELOP_EQ expression .)
    FOR             reduce using rule 37 (expression_relop -> expression RELOP_EQ expression .)
    ID              reduce using rule 37 (expression_relop -> expression RELOP_EQ expression .)
    ;               reduce using rule 37 (expression_relop -> expression RELOP_EQ expression .)
    ,               reduce using rule 37 (expression_relop -> expression RELOP_EQ expression .)
    )               reduce using rule 37 (expression_relop -> expression RELOP_EQ expression .)
    +               shift and go to state 64
    -               shift and go to state 65
    *               shift and go to state 66
    /               shift and go to state 67
    MATRIX_PLUS     shift and go to state 68
    MATRIX_SUB      shift and go to state 69
    MATRIX_MUL      shift and go to state 70
    MATRIX_DIV      shift and go to state 71
    RELOP_EQ        shift and go to state 72
    RELOP_GT        shift and go to state 73
    RELOP_LT        shift and go to state 74
    RELOP_GE        shift and go to state 75
    RELOP_LE        shift and go to state 76
    RELOP_NE        shift and go to state 77
    '               shift and go to state 78

  ! +               [ reduce using rule 37 (expression_relop -> expression RELOP_EQ expression .) ]
  ! -               [ reduce using rule 37 (expression_relop -> expression RELOP_EQ expression .) ]
  ! *               [ reduce using rule 37 (expression_relop -> expression RELOP_EQ expression .) ]
  ! /               [ reduce using rule 37 (expression_relop -> expression RELOP_EQ expression .) ]
  ! MATRIX_PLUS     [ reduce using rule 37 (expression_relop -> expression RELOP_EQ expression .) ]
  ! MATRIX_SUB      [ reduce using rule 37 (expression_relop -> expression RELOP_EQ expression .) ]
  ! MATRIX_MUL      [ reduce using rule 37 (expression_relop -> expression RELOP_EQ expression .) ]
  ! MATRIX_DIV      [ reduce using rule 37 (expression_relop -> expression RELOP_EQ expression .) ]
  ! RELOP_EQ        [ reduce using rule 37 (expression_relop -> expression RELOP_EQ expression .) ]
  ! RELOP_GT        [ reduce using rule 37 (expression_relop -> expression RELOP_EQ expression .) ]
  ! RELOP_LT        [ reduce using rule 37 (expression_relop -> expression RELOP_EQ expression .) ]
  ! RELOP_GE        [ reduce using rule 37 (expression_relop -> expression RELOP_EQ expression .) ]
  ! RELOP_LE        [ reduce using rule 37 (expression_relop -> expression RELOP_EQ expression .) ]
  ! RELOP_NE        [ reduce using rule 37 (expression_relop -> expression RELOP_EQ expression .) ]
  ! '               [ reduce using rule 37 (expression_relop -> expression RELOP_EQ expression .) ]


state 108

    (38) expression_relop -> expression RELOP_GT expression .
    (29) expression_binop -> expression . + expression
    (30) expression_binop -> expression . - expression
    (31) expression_binop -> expression . * expression
    (32) expression_binop -> expression . / expression
    (33) expression_binop -> expression . MATRIX_PLUS expression
    (34) expression_binop -> expression . MATRIX_SUB expression
    (35) expression_binop -> expression . MATRIX_MUL expression
    (36) expression_binop -> expression . MATRIX_DIV expression
    (37) expression_relop -> expression . RELOP_EQ expression
    (38) expression_relop -> expression . RELOP_GT expression
    (39) expression_relop -> expression . RELOP_LT expression
    (40) expression_relop -> expression . RELOP_GE expression
    (41) expression_relop -> expression . RELOP_LE expression
    (42) expression_relop -> expression . RELOP_NE expression
    (44) expression_unary -> expression . '

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for MATRIX_PLUS resolved as shift
  ! shift/reduce conflict for MATRIX_SUB resolved as shift
  ! shift/reduce conflict for MATRIX_MUL resolved as shift
  ! shift/reduce conflict for MATRIX_DIV resolved as shift
  ! shift/reduce conflict for RELOP_EQ resolved as shift
  ! shift/reduce conflict for RELOP_GT resolved as shift
  ! shift/reduce conflict for RELOP_LT resolved as shift
  ! shift/reduce conflict for RELOP_GE resolved as shift
  ! shift/reduce conflict for RELOP_LE resolved as shift
  ! shift/reduce conflict for RELOP_NE resolved as shift
  ! shift/reduce conflict for ' resolved as shift
    {               reduce using rule 38 (expression_relop -> expression RELOP_GT expression .)
    IF              reduce using rule 38 (expression_relop -> expression RELOP_GT expression .)
    PRINT           reduce using rule 38 (expression_relop -> expression RELOP_GT expression .)
    BREAK           reduce using rule 38 (expression_relop -> expression RELOP_GT expression .)
    CONTINUE        reduce using rule 38 (expression_relop -> expression RELOP_GT expression .)
    RETURN          reduce using rule 38 (expression_relop -> expression RELOP_GT expression .)
    WHILE           reduce using rule 38 (expression_relop -> expression RELOP_GT expression .)
    FOR             reduce using rule 38 (expression_relop -> expression RELOP_GT expression .)
    ID              reduce using rule 38 (expression_relop -> expression RELOP_GT expression .)
    ;               reduce using rule 38 (expression_relop -> expression RELOP_GT expression .)
    ,               reduce using rule 38 (expression_relop -> expression RELOP_GT expression .)
    )               reduce using rule 38 (expression_relop -> expression RELOP_GT expression .)
    +               shift and go to state 64
    -               shift and go to state 65
    *               shift and go to state 66
    /               shift and go to state 67
    MATRIX_PLUS     shift and go to state 68
    MATRIX_SUB      shift and go to state 69
    MATRIX_MUL      shift and go to state 70
    MATRIX_DIV      shift and go to state 71
    RELOP_EQ        shift and go to state 72
    RELOP_GT        shift and go to state 73
    RELOP_LT        shift and go to state 74
    RELOP_GE        shift and go to state 75
    RELOP_LE        shift and go to state 76
    RELOP_NE        shift and go to state 77
    '               shift and go to state 78

  ! +               [ reduce using rule 38 (expression_relop -> expression RELOP_GT expression .) ]
  ! -               [ reduce using rule 38 (expression_relop -> expression RELOP_GT expression .) ]
  ! *               [ reduce using rule 38 (expression_relop -> expression RELOP_GT expression .) ]
  ! /               [ reduce using rule 38 (expression_relop -> expression RELOP_GT expression .) ]
  ! MATRIX_PLUS     [ reduce using rule 38 (expression_relop -> expression RELOP_GT expression .) ]
  ! MATRIX_SUB      [ reduce using rule 38 (expression_relop -> expression RELOP_GT expression .) ]
  ! MATRIX_MUL      [ reduce using rule 38 (expression_relop -> expression RELOP_GT expression .) ]
  ! MATRIX_DIV      [ reduce using rule 38 (expression_relop -> expression RELOP_GT expression .) ]
  ! RELOP_EQ        [ reduce using rule 38 (expression_relop -> expression RELOP_GT expression .) ]
  ! RELOP_GT        [ reduce using rule 38 (expression_relop -> expression RELOP_GT expression .) ]
  ! RELOP_LT        [ reduce using rule 38 (expression_relop -> expression RELOP_GT expression .) ]
  ! RELOP_GE        [ reduce using rule 38 (expression_relop -> expression RELOP_GT expression .) ]
  ! RELOP_LE        [ reduce using rule 38 (expression_relop -> expression RELOP_GT expression .) ]
  ! RELOP_NE        [ reduce using rule 38 (expression_relop -> expression RELOP_GT expression .) ]
  ! '               [ reduce using rule 38 (expression_relop -> expression RELOP_GT expression .) ]


state 109

    (39) expression_relop -> expression RELOP_LT expression .
    (29) expression_binop -> expression . + expression
    (30) expression_binop -> expression . - expression
    (31) expression_binop -> expression . * expression
    (32) expression_binop -> expression . / expression
    (33) expression_binop -> expression . MATRIX_PLUS expression
    (34) expression_binop -> expression . MATRIX_SUB expression
    (35) expression_binop -> expression . MATRIX_MUL expression
    (36) expression_binop -> expression . MATRIX_DIV expression
    (37) expression_relop -> expression . RELOP_EQ expression
    (38) expression_relop -> expression . RELOP_GT expression
    (39) expression_relop -> expression . RELOP_LT expression
    (40) expression_relop -> expression . RELOP_GE expression
    (41) expression_relop -> expression . RELOP_LE expression
    (42) expression_relop -> expression . RELOP_NE expression
    (44) expression_unary -> expression . '

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for MATRIX_PLUS resolved as shift
  ! shift/reduce conflict for MATRIX_SUB resolved as shift
  ! shift/reduce conflict for MATRIX_MUL resolved as shift
  ! shift/reduce conflict for MATRIX_DIV resolved as shift
  ! shift/reduce conflict for RELOP_EQ resolved as shift
  ! shift/reduce conflict for RELOP_GT resolved as shift
  ! shift/reduce conflict for RELOP_LT resolved as shift
  ! shift/reduce conflict for RELOP_GE resolved as shift
  ! shift/reduce conflict for RELOP_LE resolved as shift
  ! shift/reduce conflict for RELOP_NE resolved as shift
  ! shift/reduce conflict for ' resolved as shift
    {               reduce using rule 39 (expression_relop -> expression RELOP_LT expression .)
    IF              reduce using rule 39 (expression_relop -> expression RELOP_LT expression .)
    PRINT           reduce using rule 39 (expression_relop -> expression RELOP_LT expression .)
    BREAK           reduce using rule 39 (expression_relop -> expression RELOP_LT expression .)
    CONTINUE        reduce using rule 39 (expression_relop -> expression RELOP_LT expression .)
    RETURN          reduce using rule 39 (expression_relop -> expression RELOP_LT expression .)
    WHILE           reduce using rule 39 (expression_relop -> expression RELOP_LT expression .)
    FOR             reduce using rule 39 (expression_relop -> expression RELOP_LT expression .)
    ID              reduce using rule 39 (expression_relop -> expression RELOP_LT expression .)
    ;               reduce using rule 39 (expression_relop -> expression RELOP_LT expression .)
    ,               reduce using rule 39 (expression_relop -> expression RELOP_LT expression .)
    )               reduce using rule 39 (expression_relop -> expression RELOP_LT expression .)
    +               shift and go to state 64
    -               shift and go to state 65
    *               shift and go to state 66
    /               shift and go to state 67
    MATRIX_PLUS     shift and go to state 68
    MATRIX_SUB      shift and go to state 69
    MATRIX_MUL      shift and go to state 70
    MATRIX_DIV      shift and go to state 71
    RELOP_EQ        shift and go to state 72
    RELOP_GT        shift and go to state 73
    RELOP_LT        shift and go to state 74
    RELOP_GE        shift and go to state 75
    RELOP_LE        shift and go to state 76
    RELOP_NE        shift and go to state 77
    '               shift and go to state 78

  ! +               [ reduce using rule 39 (expression_relop -> expression RELOP_LT expression .) ]
  ! -               [ reduce using rule 39 (expression_relop -> expression RELOP_LT expression .) ]
  ! *               [ reduce using rule 39 (expression_relop -> expression RELOP_LT expression .) ]
  ! /               [ reduce using rule 39 (expression_relop -> expression RELOP_LT expression .) ]
  ! MATRIX_PLUS     [ reduce using rule 39 (expression_relop -> expression RELOP_LT expression .) ]
  ! MATRIX_SUB      [ reduce using rule 39 (expression_relop -> expression RELOP_LT expression .) ]
  ! MATRIX_MUL      [ reduce using rule 39 (expression_relop -> expression RELOP_LT expression .) ]
  ! MATRIX_DIV      [ reduce using rule 39 (expression_relop -> expression RELOP_LT expression .) ]
  ! RELOP_EQ        [ reduce using rule 39 (expression_relop -> expression RELOP_LT expression .) ]
  ! RELOP_GT        [ reduce using rule 39 (expression_relop -> expression RELOP_LT expression .) ]
  ! RELOP_LT        [ reduce using rule 39 (expression_relop -> expression RELOP_LT expression .) ]
  ! RELOP_GE        [ reduce using rule 39 (expression_relop -> expression RELOP_LT expression .) ]
  ! RELOP_LE        [ reduce using rule 39 (expression_relop -> expression RELOP_LT expression .) ]
  ! RELOP_NE        [ reduce using rule 39 (expression_relop -> expression RELOP_LT expression .) ]
  ! '               [ reduce using rule 39 (expression_relop -> expression RELOP_LT expression .) ]


state 110

    (40) expression_relop -> expression RELOP_GE expression .
    (29) expression_binop -> expression . + expression
    (30) expression_binop -> expression . - expression
    (31) expression_binop -> expression . * expression
    (32) expression_binop -> expression . / expression
    (33) expression_binop -> expression . MATRIX_PLUS expression
    (34) expression_binop -> expression . MATRIX_SUB expression
    (35) expression_binop -> expression . MATRIX_MUL expression
    (36) expression_binop -> expression . MATRIX_DIV expression
    (37) expression_relop -> expression . RELOP_EQ expression
    (38) expression_relop -> expression . RELOP_GT expression
    (39) expression_relop -> expression . RELOP_LT expression
    (40) expression_relop -> expression . RELOP_GE expression
    (41) expression_relop -> expression . RELOP_LE expression
    (42) expression_relop -> expression . RELOP_NE expression
    (44) expression_unary -> expression . '

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for MATRIX_PLUS resolved as shift
  ! shift/reduce conflict for MATRIX_SUB resolved as shift
  ! shift/reduce conflict for MATRIX_MUL resolved as shift
  ! shift/reduce conflict for MATRIX_DIV resolved as shift
  ! shift/reduce conflict for RELOP_EQ resolved as shift
  ! shift/reduce conflict for RELOP_GT resolved as shift
  ! shift/reduce conflict for RELOP_LT resolved as shift
  ! shift/reduce conflict for RELOP_GE resolved as shift
  ! shift/reduce conflict for RELOP_LE resolved as shift
  ! shift/reduce conflict for RELOP_NE resolved as shift
  ! shift/reduce conflict for ' resolved as shift
    {               reduce using rule 40 (expression_relop -> expression RELOP_GE expression .)
    IF              reduce using rule 40 (expression_relop -> expression RELOP_GE expression .)
    PRINT           reduce using rule 40 (expression_relop -> expression RELOP_GE expression .)
    BREAK           reduce using rule 40 (expression_relop -> expression RELOP_GE expression .)
    CONTINUE        reduce using rule 40 (expression_relop -> expression RELOP_GE expression .)
    RETURN          reduce using rule 40 (expression_relop -> expression RELOP_GE expression .)
    WHILE           reduce using rule 40 (expression_relop -> expression RELOP_GE expression .)
    FOR             reduce using rule 40 (expression_relop -> expression RELOP_GE expression .)
    ID              reduce using rule 40 (expression_relop -> expression RELOP_GE expression .)
    ;               reduce using rule 40 (expression_relop -> expression RELOP_GE expression .)
    ,               reduce using rule 40 (expression_relop -> expression RELOP_GE expression .)
    )               reduce using rule 40 (expression_relop -> expression RELOP_GE expression .)
    +               shift and go to state 64
    -               shift and go to state 65
    *               shift and go to state 66
    /               shift and go to state 67
    MATRIX_PLUS     shift and go to state 68
    MATRIX_SUB      shift and go to state 69
    MATRIX_MUL      shift and go to state 70
    MATRIX_DIV      shift and go to state 71
    RELOP_EQ        shift and go to state 72
    RELOP_GT        shift and go to state 73
    RELOP_LT        shift and go to state 74
    RELOP_GE        shift and go to state 75
    RELOP_LE        shift and go to state 76
    RELOP_NE        shift and go to state 77
    '               shift and go to state 78

  ! +               [ reduce using rule 40 (expression_relop -> expression RELOP_GE expression .) ]
  ! -               [ reduce using rule 40 (expression_relop -> expression RELOP_GE expression .) ]
  ! *               [ reduce using rule 40 (expression_relop -> expression RELOP_GE expression .) ]
  ! /               [ reduce using rule 40 (expression_relop -> expression RELOP_GE expression .) ]
  ! MATRIX_PLUS     [ reduce using rule 40 (expression_relop -> expression RELOP_GE expression .) ]
  ! MATRIX_SUB      [ reduce using rule 40 (expression_relop -> expression RELOP_GE expression .) ]
  ! MATRIX_MUL      [ reduce using rule 40 (expression_relop -> expression RELOP_GE expression .) ]
  ! MATRIX_DIV      [ reduce using rule 40 (expression_relop -> expression RELOP_GE expression .) ]
  ! RELOP_EQ        [ reduce using rule 40 (expression_relop -> expression RELOP_GE expression .) ]
  ! RELOP_GT        [ reduce using rule 40 (expression_relop -> expression RELOP_GE expression .) ]
  ! RELOP_LT        [ reduce using rule 40 (expression_relop -> expression RELOP_GE expression .) ]
  ! RELOP_GE        [ reduce using rule 40 (expression_relop -> expression RELOP_GE expression .) ]
  ! RELOP_LE        [ reduce using rule 40 (expression_relop -> expression RELOP_GE expression .) ]
  ! RELOP_NE        [ reduce using rule 40 (expression_relop -> expression RELOP_GE expression .) ]
  ! '               [ reduce using rule 40 (expression_relop -> expression RELOP_GE expression .) ]


state 111

    (41) expression_relop -> expression RELOP_LE expression .
    (29) expression_binop -> expression . + expression
    (30) expression_binop -> expression . - expression
    (31) expression_binop -> expression . * expression
    (32) expression_binop -> expression . / expression
    (33) expression_binop -> expression . MATRIX_PLUS expression
    (34) expression_binop -> expression . MATRIX_SUB expression
    (35) expression_binop -> expression . MATRIX_MUL expression
    (36) expression_binop -> expression . MATRIX_DIV expression
    (37) expression_relop -> expression . RELOP_EQ expression
    (38) expression_relop -> expression . RELOP_GT expression
    (39) expression_relop -> expression . RELOP_LT expression
    (40) expression_relop -> expression . RELOP_GE expression
    (41) expression_relop -> expression . RELOP_LE expression
    (42) expression_relop -> expression . RELOP_NE expression
    (44) expression_unary -> expression . '

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for MATRIX_PLUS resolved as shift
  ! shift/reduce conflict for MATRIX_SUB resolved as shift
  ! shift/reduce conflict for MATRIX_MUL resolved as shift
  ! shift/reduce conflict for MATRIX_DIV resolved as shift
  ! shift/reduce conflict for RELOP_EQ resolved as shift
  ! shift/reduce conflict for RELOP_GT resolved as shift
  ! shift/reduce conflict for RELOP_LT resolved as shift
  ! shift/reduce conflict for RELOP_GE resolved as shift
  ! shift/reduce conflict for RELOP_LE resolved as shift
  ! shift/reduce conflict for RELOP_NE resolved as shift
  ! shift/reduce conflict for ' resolved as shift
    {               reduce using rule 41 (expression_relop -> expression RELOP_LE expression .)
    IF              reduce using rule 41 (expression_relop -> expression RELOP_LE expression .)
    PRINT           reduce using rule 41 (expression_relop -> expression RELOP_LE expression .)
    BREAK           reduce using rule 41 (expression_relop -> expression RELOP_LE expression .)
    CONTINUE        reduce using rule 41 (expression_relop -> expression RELOP_LE expression .)
    RETURN          reduce using rule 41 (expression_relop -> expression RELOP_LE expression .)
    WHILE           reduce using rule 41 (expression_relop -> expression RELOP_LE expression .)
    FOR             reduce using rule 41 (expression_relop -> expression RELOP_LE expression .)
    ID              reduce using rule 41 (expression_relop -> expression RELOP_LE expression .)
    ;               reduce using rule 41 (expression_relop -> expression RELOP_LE expression .)
    ,               reduce using rule 41 (expression_relop -> expression RELOP_LE expression .)
    )               reduce using rule 41 (expression_relop -> expression RELOP_LE expression .)
    +               shift and go to state 64
    -               shift and go to state 65
    *               shift and go to state 66
    /               shift and go to state 67
    MATRIX_PLUS     shift and go to state 68
    MATRIX_SUB      shift and go to state 69
    MATRIX_MUL      shift and go to state 70
    MATRIX_DIV      shift and go to state 71
    RELOP_EQ        shift and go to state 72
    RELOP_GT        shift and go to state 73
    RELOP_LT        shift and go to state 74
    RELOP_GE        shift and go to state 75
    RELOP_LE        shift and go to state 76
    RELOP_NE        shift and go to state 77
    '               shift and go to state 78

  ! +               [ reduce using rule 41 (expression_relop -> expression RELOP_LE expression .) ]
  ! -               [ reduce using rule 41 (expression_relop -> expression RELOP_LE expression .) ]
  ! *               [ reduce using rule 41 (expression_relop -> expression RELOP_LE expression .) ]
  ! /               [ reduce using rule 41 (expression_relop -> expression RELOP_LE expression .) ]
  ! MATRIX_PLUS     [ reduce using rule 41 (expression_relop -> expression RELOP_LE expression .) ]
  ! MATRIX_SUB      [ reduce using rule 41 (expression_relop -> expression RELOP_LE expression .) ]
  ! MATRIX_MUL      [ reduce using rule 41 (expression_relop -> expression RELOP_LE expression .) ]
  ! MATRIX_DIV      [ reduce using rule 41 (expression_relop -> expression RELOP_LE expression .) ]
  ! RELOP_EQ        [ reduce using rule 41 (expression_relop -> expression RELOP_LE expression .) ]
  ! RELOP_GT        [ reduce using rule 41 (expression_relop -> expression RELOP_LE expression .) ]
  ! RELOP_LT        [ reduce using rule 41 (expression_relop -> expression RELOP_LE expression .) ]
  ! RELOP_GE        [ reduce using rule 41 (expression_relop -> expression RELOP_LE expression .) ]
  ! RELOP_LE        [ reduce using rule 41 (expression_relop -> expression RELOP_LE expression .) ]
  ! RELOP_NE        [ reduce using rule 41 (expression_relop -> expression RELOP_LE expression .) ]
  ! '               [ reduce using rule 41 (expression_relop -> expression RELOP_LE expression .) ]


state 112

    (42) expression_relop -> expression RELOP_NE expression .
    (29) expression_binop -> expression . + expression
    (30) expression_binop -> expression . - expression
    (31) expression_binop -> expression . * expression
    (32) expression_binop -> expression . / expression
    (33) expression_binop -> expression . MATRIX_PLUS expression
    (34) expression_binop -> expression . MATRIX_SUB expression
    (35) expression_binop -> expression . MATRIX_MUL expression
    (36) expression_binop -> expression . MATRIX_DIV expression
    (37) expression_relop -> expression . RELOP_EQ expression
    (38) expression_relop -> expression . RELOP_GT expression
    (39) expression_relop -> expression . RELOP_LT expression
    (40) expression_relop -> expression . RELOP_GE expression
    (41) expression_relop -> expression . RELOP_LE expression
    (42) expression_relop -> expression . RELOP_NE expression
    (44) expression_unary -> expression . '

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for MATRIX_PLUS resolved as shift
  ! shift/reduce conflict for MATRIX_SUB resolved as shift
  ! shift/reduce conflict for MATRIX_MUL resolved as shift
  ! shift/reduce conflict for MATRIX_DIV resolved as shift
  ! shift/reduce conflict for RELOP_EQ resolved as shift
  ! shift/reduce conflict for RELOP_GT resolved as shift
  ! shift/reduce conflict for RELOP_LT resolved as shift
  ! shift/reduce conflict for RELOP_GE resolved as shift
  ! shift/reduce conflict for RELOP_LE resolved as shift
  ! shift/reduce conflict for RELOP_NE resolved as shift
  ! shift/reduce conflict for ' resolved as shift
    {               reduce using rule 42 (expression_relop -> expression RELOP_NE expression .)
    IF              reduce using rule 42 (expression_relop -> expression RELOP_NE expression .)
    PRINT           reduce using rule 42 (expression_relop -> expression RELOP_NE expression .)
    BREAK           reduce using rule 42 (expression_relop -> expression RELOP_NE expression .)
    CONTINUE        reduce using rule 42 (expression_relop -> expression RELOP_NE expression .)
    RETURN          reduce using rule 42 (expression_relop -> expression RELOP_NE expression .)
    WHILE           reduce using rule 42 (expression_relop -> expression RELOP_NE expression .)
    FOR             reduce using rule 42 (expression_relop -> expression RELOP_NE expression .)
    ID              reduce using rule 42 (expression_relop -> expression RELOP_NE expression .)
    ;               reduce using rule 42 (expression_relop -> expression RELOP_NE expression .)
    ,               reduce using rule 42 (expression_relop -> expression RELOP_NE expression .)
    )               reduce using rule 42 (expression_relop -> expression RELOP_NE expression .)
    +               shift and go to state 64
    -               shift and go to state 65
    *               shift and go to state 66
    /               shift and go to state 67
    MATRIX_PLUS     shift and go to state 68
    MATRIX_SUB      shift and go to state 69
    MATRIX_MUL      shift and go to state 70
    MATRIX_DIV      shift and go to state 71
    RELOP_EQ        shift and go to state 72
    RELOP_GT        shift and go to state 73
    RELOP_LT        shift and go to state 74
    RELOP_GE        shift and go to state 75
    RELOP_LE        shift and go to state 76
    RELOP_NE        shift and go to state 77
    '               shift and go to state 78

  ! +               [ reduce using rule 42 (expression_relop -> expression RELOP_NE expression .) ]
  ! -               [ reduce using rule 42 (expression_relop -> expression RELOP_NE expression .) ]
  ! *               [ reduce using rule 42 (expression_relop -> expression RELOP_NE expression .) ]
  ! /               [ reduce using rule 42 (expression_relop -> expression RELOP_NE expression .) ]
  ! MATRIX_PLUS     [ reduce using rule 42 (expression_relop -> expression RELOP_NE expression .) ]
  ! MATRIX_SUB      [ reduce using rule 42 (expression_relop -> expression RELOP_NE expression .) ]
  ! MATRIX_MUL      [ reduce using rule 42 (expression_relop -> expression RELOP_NE expression .) ]
  ! MATRIX_DIV      [ reduce using rule 42 (expression_relop -> expression RELOP_NE expression .) ]
  ! RELOP_EQ        [ reduce using rule 42 (expression_relop -> expression RELOP_NE expression .) ]
  ! RELOP_GT        [ reduce using rule 42 (expression_relop -> expression RELOP_NE expression .) ]
  ! RELOP_LT        [ reduce using rule 42 (expression_relop -> expression RELOP_NE expression .) ]
  ! RELOP_GE        [ reduce using rule 42 (expression_relop -> expression RELOP_NE expression .) ]
  ! RELOP_LE        [ reduce using rule 42 (expression_relop -> expression RELOP_NE expression .) ]
  ! RELOP_NE        [ reduce using rule 42 (expression_relop -> expression RELOP_NE expression .) ]
  ! '               [ reduce using rule 42 (expression_relop -> expression RELOP_NE expression .) ]


state 113

    (28) expression -> ( expression ) .

    +               reduce using rule 28 (expression -> ( expression ) .)
    -               reduce using rule 28 (expression -> ( expression ) .)
    *               reduce using rule 28 (expression -> ( expression ) .)
    /               reduce using rule 28 (expression -> ( expression ) .)
    MATRIX_PLUS     reduce using rule 28 (expression -> ( expression ) .)
    MATRIX_SUB      reduce using rule 28 (expression -> ( expression ) .)
    MATRIX_MUL      reduce using rule 28 (expression -> ( expression ) .)
    MATRIX_DIV      reduce using rule 28 (expression -> ( expression ) .)
    RELOP_EQ        reduce using rule 28 (expression -> ( expression ) .)
    RELOP_GT        reduce using rule 28 (expression -> ( expression ) .)
    RELOP_LT        reduce using rule 28 (expression -> ( expression ) .)
    RELOP_GE        reduce using rule 28 (expression -> ( expression ) .)
    RELOP_LE        reduce using rule 28 (expression -> ( expression ) .)
    RELOP_NE        reduce using rule 28 (expression -> ( expression ) .)
    '               reduce using rule 28 (expression -> ( expression ) .)
    {               reduce using rule 28 (expression -> ( expression ) .)
    IF              reduce using rule 28 (expression -> ( expression ) .)
    PRINT           reduce using rule 28 (expression -> ( expression ) .)
    BREAK           reduce using rule 28 (expression -> ( expression ) .)
    CONTINUE        reduce using rule 28 (expression -> ( expression ) .)
    RETURN          reduce using rule 28 (expression -> ( expression ) .)
    WHILE           reduce using rule 28 (expression -> ( expression ) .)
    FOR             reduce using rule 28 (expression -> ( expression ) .)
    ID              reduce using rule 28 (expression -> ( expression ) .)
    ;               reduce using rule 28 (expression -> ( expression ) .)
    ,               reduce using rule 28 (expression -> ( expression ) .)
    )               reduce using rule 28 (expression -> ( expression ) .)


state 114

    (45) matrix_funcs -> ZEROS ( DT_INTEGER . )

    )               shift and go to state 127


state 115

    (46) matrix_funcs -> ONES ( DT_INTEGER . )

    )               shift and go to state 128


state 116

    (47) matrix_funcs -> EYE ( DT_INTEGER . )

    )               shift and go to state 129


state 117

    (50) matrix -> [ vectors ] .

    +               reduce using rule 50 (matrix -> [ vectors ] .)
    -               reduce using rule 50 (matrix -> [ vectors ] .)
    *               reduce using rule 50 (matrix -> [ vectors ] .)
    /               reduce using rule 50 (matrix -> [ vectors ] .)
    MATRIX_PLUS     reduce using rule 50 (matrix -> [ vectors ] .)
    MATRIX_SUB      reduce using rule 50 (matrix -> [ vectors ] .)
    MATRIX_MUL      reduce using rule 50 (matrix -> [ vectors ] .)
    MATRIX_DIV      reduce using rule 50 (matrix -> [ vectors ] .)
    RELOP_EQ        reduce using rule 50 (matrix -> [ vectors ] .)
    RELOP_GT        reduce using rule 50 (matrix -> [ vectors ] .)
    RELOP_LT        reduce using rule 50 (matrix -> [ vectors ] .)
    RELOP_GE        reduce using rule 50 (matrix -> [ vectors ] .)
    RELOP_LE        reduce using rule 50 (matrix -> [ vectors ] .)
    RELOP_NE        reduce using rule 50 (matrix -> [ vectors ] .)
    '               reduce using rule 50 (matrix -> [ vectors ] .)
    {               reduce using rule 50 (matrix -> [ vectors ] .)
    IF              reduce using rule 50 (matrix -> [ vectors ] .)
    PRINT           reduce using rule 50 (matrix -> [ vectors ] .)
    BREAK           reduce using rule 50 (matrix -> [ vectors ] .)
    CONTINUE        reduce using rule 50 (matrix -> [ vectors ] .)
    RETURN          reduce using rule 50 (matrix -> [ vectors ] .)
    WHILE           reduce using rule 50 (matrix -> [ vectors ] .)
    FOR             reduce using rule 50 (matrix -> [ vectors ] .)
    ID              reduce using rule 50 (matrix -> [ vectors ] .)
    ;               reduce using rule 50 (matrix -> [ vectors ] .)
    ,               reduce using rule 50 (matrix -> [ vectors ] .)
    )               reduce using rule 50 (matrix -> [ vectors ] .)


state 118

    (52) vectors -> vectors , . vector
    (53) vector -> . [ numbers ]

    [               shift and go to state 56

    vector                         shift and go to state 130

state 119

    (66) expression_list -> expression_list , expression .
    (29) expression_binop -> expression . + expression
    (30) expression_binop -> expression . - expression
    (31) expression_binop -> expression . * expression
    (32) expression_binop -> expression . / expression
    (33) expression_binop -> expression . MATRIX_PLUS expression
    (34) expression_binop -> expression . MATRIX_SUB expression
    (35) expression_binop -> expression . MATRIX_MUL expression
    (36) expression_binop -> expression . MATRIX_DIV expression
    (37) expression_relop -> expression . RELOP_EQ expression
    (38) expression_relop -> expression . RELOP_GT expression
    (39) expression_relop -> expression . RELOP_LT expression
    (40) expression_relop -> expression . RELOP_GE expression
    (41) expression_relop -> expression . RELOP_LE expression
    (42) expression_relop -> expression . RELOP_NE expression
    (44) expression_unary -> expression . '

    ;               reduce using rule 66 (expression_list -> expression_list , expression .)
    ,               reduce using rule 66 (expression_list -> expression_list , expression .)
    +               shift and go to state 64
    -               shift and go to state 65
    *               shift and go to state 66
    /               shift and go to state 67
    MATRIX_PLUS     shift and go to state 68
    MATRIX_SUB      shift and go to state 69
    MATRIX_MUL      shift and go to state 70
    MATRIX_DIV      shift and go to state 71
    RELOP_EQ        shift and go to state 72
    RELOP_GT        shift and go to state 73
    RELOP_LT        shift and go to state 74
    RELOP_GE        shift and go to state 75
    RELOP_LE        shift and go to state 76
    RELOP_NE        shift and go to state 77
    '               shift and go to state 78


state 120

    (68) while_loop -> WHILE ( expression ) . instructions
    (4) instructions -> . instructions instruction
    (5) instructions -> . instruction
    (6) instruction -> . assignment
    (7) instruction -> . conditional_statement
    (8) instruction -> . print_statement
    (9) instruction -> . jump_statement
    (10) instruction -> . return_statement
    (11) instruction -> . while_loop
    (12) instruction -> . for_loop
    (13) instruction -> . { instructions }
    (14) assignment -> . assign_id = expression ;
    (15) assignment -> . assign_id MUL_ASSIGN expression ;
    (16) assignment -> . assign_id DIV_ASSIGN expression ;
    (17) assignment -> . assign_id PLUS_ASSIGN expression ;
    (18) assignment -> . assign_id SUB_ASSIGN expression ;
    (59) conditional_statement -> . IF expression instructions
    (60) conditional_statement -> . IF expression instructions ELSE instructions
    (65) print_statement -> . PRINT expression_list ;
    (61) jump_statement -> . BREAK ;
    (62) jump_statement -> . CONTINUE ;
    (63) return_statement -> . RETURN ;
    (64) return_statement -> . RETURN expression ;
    (68) while_loop -> . WHILE ( expression ) instructions
    (69) for_loop -> . FOR ID = range_value : range_value instructions
    (19) assign_id -> . ID
    (20) assign_id -> . ID vector

    {               shift and go to state 12
    IF              shift and go to state 14
    PRINT           shift and go to state 15
    BREAK           shift and go to state 16
    CONTINUE        shift and go to state 17
    RETURN          shift and go to state 18
    WHILE           shift and go to state 19
    FOR             shift and go to state 20
    ID              shift and go to state 21

    instructions                   shift and go to state 131
    instruction                    shift and go to state 4
    assignment                     shift and go to state 5
    conditional_statement          shift and go to state 6
    print_statement                shift and go to state 7
    jump_statement                 shift and go to state 8
    return_statement               shift and go to state 9
    while_loop                     shift and go to state 10
    for_loop                       shift and go to state 11
    assign_id                      shift and go to state 13

state 121

    (71) range_value -> ID .

    :               reduce using rule 71 (range_value -> ID .)
    {               reduce using rule 71 (range_value -> ID .)
    IF              reduce using rule 71 (range_value -> ID .)
    PRINT           reduce using rule 71 (range_value -> ID .)
    BREAK           reduce using rule 71 (range_value -> ID .)
    CONTINUE        reduce using rule 71 (range_value -> ID .)
    RETURN          reduce using rule 71 (range_value -> ID .)
    WHILE           reduce using rule 71 (range_value -> ID .)
    FOR             reduce using rule 71 (range_value -> ID .)
    ID              reduce using rule 71 (range_value -> ID .)


state 122

    (69) for_loop -> FOR ID = range_value . : range_value instructions

    :               shift and go to state 132


state 123

    (70) range_value -> DT_INTEGER .

    :               reduce using rule 70 (range_value -> DT_INTEGER .)
    {               reduce using rule 70 (range_value -> DT_INTEGER .)
    IF              reduce using rule 70 (range_value -> DT_INTEGER .)
    PRINT           reduce using rule 70 (range_value -> DT_INTEGER .)
    BREAK           reduce using rule 70 (range_value -> DT_INTEGER .)
    CONTINUE        reduce using rule 70 (range_value -> DT_INTEGER .)
    RETURN          reduce using rule 70 (range_value -> DT_INTEGER .)
    WHILE           reduce using rule 70 (range_value -> DT_INTEGER .)
    FOR             reduce using rule 70 (range_value -> DT_INTEGER .)
    ID              reduce using rule 70 (range_value -> DT_INTEGER .)


state 124

    (53) vector -> [ numbers ] .

    =               reduce using rule 53 (vector -> [ numbers ] .)
    MUL_ASSIGN      reduce using rule 53 (vector -> [ numbers ] .)
    DIV_ASSIGN      reduce using rule 53 (vector -> [ numbers ] .)
    PLUS_ASSIGN     reduce using rule 53 (vector -> [ numbers ] .)
    SUB_ASSIGN      reduce using rule 53 (vector -> [ numbers ] .)
    ]               reduce using rule 53 (vector -> [ numbers ] .)
    ,               reduce using rule 53 (vector -> [ numbers ] .)


state 125

    (54) numbers -> numbers , . number
    (57) number -> . DT_INTEGER
    (58) number -> . DT_FLOAT

    DT_INTEGER      shift and go to state 40
    DT_FLOAT        shift and go to state 46

    number                         shift and go to state 133

state 126

    (60) conditional_statement -> IF expression instructions ELSE instructions .
    (4) instructions -> instructions . instruction
    (6) instruction -> . assignment
    (7) instruction -> . conditional_statement
    (8) instruction -> . print_statement
    (9) instruction -> . jump_statement
    (10) instruction -> . return_statement
    (11) instruction -> . while_loop
    (12) instruction -> . for_loop
    (13) instruction -> . { instructions }
    (14) assignment -> . assign_id = expression ;
    (15) assignment -> . assign_id MUL_ASSIGN expression ;
    (16) assignment -> . assign_id DIV_ASSIGN expression ;
    (17) assignment -> . assign_id PLUS_ASSIGN expression ;
    (18) assignment -> . assign_id SUB_ASSIGN expression ;
    (59) conditional_statement -> . IF expression instructions
    (60) conditional_statement -> . IF expression instructions ELSE instructions
    (65) print_statement -> . PRINT expression_list ;
    (61) jump_statement -> . BREAK ;
    (62) jump_statement -> . CONTINUE ;
    (63) return_statement -> . RETURN ;
    (64) return_statement -> . RETURN expression ;
    (68) while_loop -> . WHILE ( expression ) instructions
    (69) for_loop -> . FOR ID = range_value : range_value instructions
    (19) assign_id -> . ID
    (20) assign_id -> . ID vector

    {               reduce using rule 60 (conditional_statement -> IF expression instructions ELSE instructions .)
    IF              reduce using rule 60 (conditional_statement -> IF expression instructions ELSE instructions .)
    PRINT           reduce using rule 60 (conditional_statement -> IF expression instructions ELSE instructions .)
    BREAK           reduce using rule 60 (conditional_statement -> IF expression instructions ELSE instructions .)
    CONTINUE        reduce using rule 60 (conditional_statement -> IF expression instructions ELSE instructions .)
    RETURN          reduce using rule 60 (conditional_statement -> IF expression instructions ELSE instructions .)
    WHILE           reduce using rule 60 (conditional_statement -> IF expression instructions ELSE instructions .)
    FOR             reduce using rule 60 (conditional_statement -> IF expression instructions ELSE instructions .)
    ID              reduce using rule 60 (conditional_statement -> IF expression instructions ELSE instructions .)
    $end            reduce using rule 60 (conditional_statement -> IF expression instructions ELSE instructions .)
    }               reduce using rule 60 (conditional_statement -> IF expression instructions ELSE instructions .)
    ELSE            reduce using rule 60 (conditional_statement -> IF expression instructions ELSE instructions .)

  ! {               [ shift and go to state 12 ]
  ! IF              [ shift and go to state 14 ]
  ! PRINT           [ shift and go to state 15 ]
  ! BREAK           [ shift and go to state 16 ]
  ! CONTINUE        [ shift and go to state 17 ]
  ! RETURN          [ shift and go to state 18 ]
  ! WHILE           [ shift and go to state 19 ]
  ! FOR             [ shift and go to state 20 ]
  ! ID              [ shift and go to state 21 ]

    instruction                    shift and go to state 22
    assignment                     shift and go to state 5
    conditional_statement          shift and go to state 6
    print_statement                shift and go to state 7
    jump_statement                 shift and go to state 8
    return_statement               shift and go to state 9
    while_loop                     shift and go to state 10
    for_loop                       shift and go to state 11
    assign_id                      shift and go to state 13

state 127

    (45) matrix_funcs -> ZEROS ( DT_INTEGER ) .

    +               reduce using rule 45 (matrix_funcs -> ZEROS ( DT_INTEGER ) .)
    -               reduce using rule 45 (matrix_funcs -> ZEROS ( DT_INTEGER ) .)
    *               reduce using rule 45 (matrix_funcs -> ZEROS ( DT_INTEGER ) .)
    /               reduce using rule 45 (matrix_funcs -> ZEROS ( DT_INTEGER ) .)
    MATRIX_PLUS     reduce using rule 45 (matrix_funcs -> ZEROS ( DT_INTEGER ) .)
    MATRIX_SUB      reduce using rule 45 (matrix_funcs -> ZEROS ( DT_INTEGER ) .)
    MATRIX_MUL      reduce using rule 45 (matrix_funcs -> ZEROS ( DT_INTEGER ) .)
    MATRIX_DIV      reduce using rule 45 (matrix_funcs -> ZEROS ( DT_INTEGER ) .)
    RELOP_EQ        reduce using rule 45 (matrix_funcs -> ZEROS ( DT_INTEGER ) .)
    RELOP_GT        reduce using rule 45 (matrix_funcs -> ZEROS ( DT_INTEGER ) .)
    RELOP_LT        reduce using rule 45 (matrix_funcs -> ZEROS ( DT_INTEGER ) .)
    RELOP_GE        reduce using rule 45 (matrix_funcs -> ZEROS ( DT_INTEGER ) .)
    RELOP_LE        reduce using rule 45 (matrix_funcs -> ZEROS ( DT_INTEGER ) .)
    RELOP_NE        reduce using rule 45 (matrix_funcs -> ZEROS ( DT_INTEGER ) .)
    '               reduce using rule 45 (matrix_funcs -> ZEROS ( DT_INTEGER ) .)
    {               reduce using rule 45 (matrix_funcs -> ZEROS ( DT_INTEGER ) .)
    IF              reduce using rule 45 (matrix_funcs -> ZEROS ( DT_INTEGER ) .)
    PRINT           reduce using rule 45 (matrix_funcs -> ZEROS ( DT_INTEGER ) .)
    BREAK           reduce using rule 45 (matrix_funcs -> ZEROS ( DT_INTEGER ) .)
    CONTINUE        reduce using rule 45 (matrix_funcs -> ZEROS ( DT_INTEGER ) .)
    RETURN          reduce using rule 45 (matrix_funcs -> ZEROS ( DT_INTEGER ) .)
    WHILE           reduce using rule 45 (matrix_funcs -> ZEROS ( DT_INTEGER ) .)
    FOR             reduce using rule 45 (matrix_funcs -> ZEROS ( DT_INTEGER ) .)
    ID              reduce using rule 45 (matrix_funcs -> ZEROS ( DT_INTEGER ) .)
    ;               reduce using rule 45 (matrix_funcs -> ZEROS ( DT_INTEGER ) .)
    ,               reduce using rule 45 (matrix_funcs -> ZEROS ( DT_INTEGER ) .)
    )               reduce using rule 45 (matrix_funcs -> ZEROS ( DT_INTEGER ) .)


state 128

    (46) matrix_funcs -> ONES ( DT_INTEGER ) .

    +               reduce using rule 46 (matrix_funcs -> ONES ( DT_INTEGER ) .)
    -               reduce using rule 46 (matrix_funcs -> ONES ( DT_INTEGER ) .)
    *               reduce using rule 46 (matrix_funcs -> ONES ( DT_INTEGER ) .)
    /               reduce using rule 46 (matrix_funcs -> ONES ( DT_INTEGER ) .)
    MATRIX_PLUS     reduce using rule 46 (matrix_funcs -> ONES ( DT_INTEGER ) .)
    MATRIX_SUB      reduce using rule 46 (matrix_funcs -> ONES ( DT_INTEGER ) .)
    MATRIX_MUL      reduce using rule 46 (matrix_funcs -> ONES ( DT_INTEGER ) .)
    MATRIX_DIV      reduce using rule 46 (matrix_funcs -> ONES ( DT_INTEGER ) .)
    RELOP_EQ        reduce using rule 46 (matrix_funcs -> ONES ( DT_INTEGER ) .)
    RELOP_GT        reduce using rule 46 (matrix_funcs -> ONES ( DT_INTEGER ) .)
    RELOP_LT        reduce using rule 46 (matrix_funcs -> ONES ( DT_INTEGER ) .)
    RELOP_GE        reduce using rule 46 (matrix_funcs -> ONES ( DT_INTEGER ) .)
    RELOP_LE        reduce using rule 46 (matrix_funcs -> ONES ( DT_INTEGER ) .)
    RELOP_NE        reduce using rule 46 (matrix_funcs -> ONES ( DT_INTEGER ) .)
    '               reduce using rule 46 (matrix_funcs -> ONES ( DT_INTEGER ) .)
    {               reduce using rule 46 (matrix_funcs -> ONES ( DT_INTEGER ) .)
    IF              reduce using rule 46 (matrix_funcs -> ONES ( DT_INTEGER ) .)
    PRINT           reduce using rule 46 (matrix_funcs -> ONES ( DT_INTEGER ) .)
    BREAK           reduce using rule 46 (matrix_funcs -> ONES ( DT_INTEGER ) .)
    CONTINUE        reduce using rule 46 (matrix_funcs -> ONES ( DT_INTEGER ) .)
    RETURN          reduce using rule 46 (matrix_funcs -> ONES ( DT_INTEGER ) .)
    WHILE           reduce using rule 46 (matrix_funcs -> ONES ( DT_INTEGER ) .)
    FOR             reduce using rule 46 (matrix_funcs -> ONES ( DT_INTEGER ) .)
    ID              reduce using rule 46 (matrix_funcs -> ONES ( DT_INTEGER ) .)
    ;               reduce using rule 46 (matrix_funcs -> ONES ( DT_INTEGER ) .)
    ,               reduce using rule 46 (matrix_funcs -> ONES ( DT_INTEGER ) .)
    )               reduce using rule 46 (matrix_funcs -> ONES ( DT_INTEGER ) .)


state 129

    (47) matrix_funcs -> EYE ( DT_INTEGER ) .

    +               reduce using rule 47 (matrix_funcs -> EYE ( DT_INTEGER ) .)
    -               reduce using rule 47 (matrix_funcs -> EYE ( DT_INTEGER ) .)
    *               reduce using rule 47 (matrix_funcs -> EYE ( DT_INTEGER ) .)
    /               reduce using rule 47 (matrix_funcs -> EYE ( DT_INTEGER ) .)
    MATRIX_PLUS     reduce using rule 47 (matrix_funcs -> EYE ( DT_INTEGER ) .)
    MATRIX_SUB      reduce using rule 47 (matrix_funcs -> EYE ( DT_INTEGER ) .)
    MATRIX_MUL      reduce using rule 47 (matrix_funcs -> EYE ( DT_INTEGER ) .)
    MATRIX_DIV      reduce using rule 47 (matrix_funcs -> EYE ( DT_INTEGER ) .)
    RELOP_EQ        reduce using rule 47 (matrix_funcs -> EYE ( DT_INTEGER ) .)
    RELOP_GT        reduce using rule 47 (matrix_funcs -> EYE ( DT_INTEGER ) .)
    RELOP_LT        reduce using rule 47 (matrix_funcs -> EYE ( DT_INTEGER ) .)
    RELOP_GE        reduce using rule 47 (matrix_funcs -> EYE ( DT_INTEGER ) .)
    RELOP_LE        reduce using rule 47 (matrix_funcs -> EYE ( DT_INTEGER ) .)
    RELOP_NE        reduce using rule 47 (matrix_funcs -> EYE ( DT_INTEGER ) .)
    '               reduce using rule 47 (matrix_funcs -> EYE ( DT_INTEGER ) .)
    {               reduce using rule 47 (matrix_funcs -> EYE ( DT_INTEGER ) .)
    IF              reduce using rule 47 (matrix_funcs -> EYE ( DT_INTEGER ) .)
    PRINT           reduce using rule 47 (matrix_funcs -> EYE ( DT_INTEGER ) .)
    BREAK           reduce using rule 47 (matrix_funcs -> EYE ( DT_INTEGER ) .)
    CONTINUE        reduce using rule 47 (matrix_funcs -> EYE ( DT_INTEGER ) .)
    RETURN          reduce using rule 47 (matrix_funcs -> EYE ( DT_INTEGER ) .)
    WHILE           reduce using rule 47 (matrix_funcs -> EYE ( DT_INTEGER ) .)
    FOR             reduce using rule 47 (matrix_funcs -> EYE ( DT_INTEGER ) .)
    ID              reduce using rule 47 (matrix_funcs -> EYE ( DT_INTEGER ) .)
    ;               reduce using rule 47 (matrix_funcs -> EYE ( DT_INTEGER ) .)
    ,               reduce using rule 47 (matrix_funcs -> EYE ( DT_INTEGER ) .)
    )               reduce using rule 47 (matrix_funcs -> EYE ( DT_INTEGER ) .)


state 130

    (52) vectors -> vectors , vector .

    ]               reduce using rule 52 (vectors -> vectors , vector .)
    ,               reduce using rule 52 (vectors -> vectors , vector .)


state 131

    (68) while_loop -> WHILE ( expression ) instructions .
    (4) instructions -> instructions . instruction
    (6) instruction -> . assignment
    (7) instruction -> . conditional_statement
    (8) instruction -> . print_statement
    (9) instruction -> . jump_statement
    (10) instruction -> . return_statement
    (11) instruction -> . while_loop
    (12) instruction -> . for_loop
    (13) instruction -> . { instructions }
    (14) assignment -> . assign_id = expression ;
    (15) assignment -> . assign_id MUL_ASSIGN expression ;
    (16) assignment -> . assign_id DIV_ASSIGN expression ;
    (17) assignment -> . assign_id PLUS_ASSIGN expression ;
    (18) assignment -> . assign_id SUB_ASSIGN expression ;
    (59) conditional_statement -> . IF expression instructions
    (60) conditional_statement -> . IF expression instructions ELSE instructions
    (65) print_statement -> . PRINT expression_list ;
    (61) jump_statement -> . BREAK ;
    (62) jump_statement -> . CONTINUE ;
    (63) return_statement -> . RETURN ;
    (64) return_statement -> . RETURN expression ;
    (68) while_loop -> . WHILE ( expression ) instructions
    (69) for_loop -> . FOR ID = range_value : range_value instructions
    (19) assign_id -> . ID
    (20) assign_id -> . ID vector

  ! shift/reduce conflict for { resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    $end            reduce using rule 68 (while_loop -> WHILE ( expression ) instructions .)
    }               reduce using rule 68 (while_loop -> WHILE ( expression ) instructions .)
    ELSE            reduce using rule 68 (while_loop -> WHILE ( expression ) instructions .)
    {               shift and go to state 12
    IF              shift and go to state 14
    PRINT           shift and go to state 15
    BREAK           shift and go to state 16
    CONTINUE        shift and go to state 17
    RETURN          shift and go to state 18
    WHILE           shift and go to state 19
    FOR             shift and go to state 20
    ID              shift and go to state 21

  ! {               [ reduce using rule 68 (while_loop -> WHILE ( expression ) instructions .) ]
  ! IF              [ reduce using rule 68 (while_loop -> WHILE ( expression ) instructions .) ]
  ! PRINT           [ reduce using rule 68 (while_loop -> WHILE ( expression ) instructions .) ]
  ! BREAK           [ reduce using rule 68 (while_loop -> WHILE ( expression ) instructions .) ]
  ! CONTINUE        [ reduce using rule 68 (while_loop -> WHILE ( expression ) instructions .) ]
  ! RETURN          [ reduce using rule 68 (while_loop -> WHILE ( expression ) instructions .) ]
  ! WHILE           [ reduce using rule 68 (while_loop -> WHILE ( expression ) instructions .) ]
  ! FOR             [ reduce using rule 68 (while_loop -> WHILE ( expression ) instructions .) ]
  ! ID              [ reduce using rule 68 (while_loop -> WHILE ( expression ) instructions .) ]

    instruction                    shift and go to state 22
    assignment                     shift and go to state 5
    conditional_statement          shift and go to state 6
    print_statement                shift and go to state 7
    jump_statement                 shift and go to state 8
    return_statement               shift and go to state 9
    while_loop                     shift and go to state 10
    for_loop                       shift and go to state 11
    assign_id                      shift and go to state 13

state 132

    (69) for_loop -> FOR ID = range_value : . range_value instructions
    (70) range_value -> . DT_INTEGER
    (71) range_value -> . ID

    DT_INTEGER      shift and go to state 123
    ID              shift and go to state 121

    range_value                    shift and go to state 134

state 133

    (54) numbers -> numbers , number .

    ]               reduce using rule 54 (numbers -> numbers , number .)
    ,               reduce using rule 54 (numbers -> numbers , number .)


state 134

    (69) for_loop -> FOR ID = range_value : range_value . instructions
    (4) instructions -> . instructions instruction
    (5) instructions -> . instruction
    (6) instruction -> . assignment
    (7) instruction -> . conditional_statement
    (8) instruction -> . print_statement
    (9) instruction -> . jump_statement
    (10) instruction -> . return_statement
    (11) instruction -> . while_loop
    (12) instruction -> . for_loop
    (13) instruction -> . { instructions }
    (14) assignment -> . assign_id = expression ;
    (15) assignment -> . assign_id MUL_ASSIGN expression ;
    (16) assignment -> . assign_id DIV_ASSIGN expression ;
    (17) assignment -> . assign_id PLUS_ASSIGN expression ;
    (18) assignment -> . assign_id SUB_ASSIGN expression ;
    (59) conditional_statement -> . IF expression instructions
    (60) conditional_statement -> . IF expression instructions ELSE instructions
    (65) print_statement -> . PRINT expression_list ;
    (61) jump_statement -> . BREAK ;
    (62) jump_statement -> . CONTINUE ;
    (63) return_statement -> . RETURN ;
    (64) return_statement -> . RETURN expression ;
    (68) while_loop -> . WHILE ( expression ) instructions
    (69) for_loop -> . FOR ID = range_value : range_value instructions
    (19) assign_id -> . ID
    (20) assign_id -> . ID vector

    {               shift and go to state 12
    IF              shift and go to state 14
    PRINT           shift and go to state 15
    BREAK           shift and go to state 16
    CONTINUE        shift and go to state 17
    RETURN          shift and go to state 18
    WHILE           shift and go to state 19
    FOR             shift and go to state 20
    ID              shift and go to state 21

    instructions                   shift and go to state 135
    instruction                    shift and go to state 4
    assignment                     shift and go to state 5
    conditional_statement          shift and go to state 6
    print_statement                shift and go to state 7
    jump_statement                 shift and go to state 8
    return_statement               shift and go to state 9
    while_loop                     shift and go to state 10
    for_loop                       shift and go to state 11
    assign_id                      shift and go to state 13

state 135

    (69) for_loop -> FOR ID = range_value : range_value instructions .
    (4) instructions -> instructions . instruction
    (6) instruction -> . assignment
    (7) instruction -> . conditional_statement
    (8) instruction -> . print_statement
    (9) instruction -> . jump_statement
    (10) instruction -> . return_statement
    (11) instruction -> . while_loop
    (12) instruction -> . for_loop
    (13) instruction -> . { instructions }
    (14) assignment -> . assign_id = expression ;
    (15) assignment -> . assign_id MUL_ASSIGN expression ;
    (16) assignment -> . assign_id DIV_ASSIGN expression ;
    (17) assignment -> . assign_id PLUS_ASSIGN expression ;
    (18) assignment -> . assign_id SUB_ASSIGN expression ;
    (59) conditional_statement -> . IF expression instructions
    (60) conditional_statement -> . IF expression instructions ELSE instructions
    (65) print_statement -> . PRINT expression_list ;
    (61) jump_statement -> . BREAK ;
    (62) jump_statement -> . CONTINUE ;
    (63) return_statement -> . RETURN ;
    (64) return_statement -> . RETURN expression ;
    (68) while_loop -> . WHILE ( expression ) instructions
    (69) for_loop -> . FOR ID = range_value : range_value instructions
    (19) assign_id -> . ID
    (20) assign_id -> . ID vector

  ! shift/reduce conflict for { resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    $end            reduce using rule 69 (for_loop -> FOR ID = range_value : range_value instructions .)
    }               reduce using rule 69 (for_loop -> FOR ID = range_value : range_value instructions .)
    ELSE            reduce using rule 69 (for_loop -> FOR ID = range_value : range_value instructions .)
    {               shift and go to state 12
    IF              shift and go to state 14
    PRINT           shift and go to state 15
    BREAK           shift and go to state 16
    CONTINUE        shift and go to state 17
    RETURN          shift and go to state 18
    WHILE           shift and go to state 19
    FOR             shift and go to state 20
    ID              shift and go to state 21

  ! {               [ reduce using rule 69 (for_loop -> FOR ID = range_value : range_value instructions .) ]
  ! IF              [ reduce using rule 69 (for_loop -> FOR ID = range_value : range_value instructions .) ]
  ! PRINT           [ reduce using rule 69 (for_loop -> FOR ID = range_value : range_value instructions .) ]
  ! BREAK           [ reduce using rule 69 (for_loop -> FOR ID = range_value : range_value instructions .) ]
  ! CONTINUE        [ reduce using rule 69 (for_loop -> FOR ID = range_value : range_value instructions .) ]
  ! RETURN          [ reduce using rule 69 (for_loop -> FOR ID = range_value : range_value instructions .) ]
  ! WHILE           [ reduce using rule 69 (for_loop -> FOR ID = range_value : range_value instructions .) ]
  ! FOR             [ reduce using rule 69 (for_loop -> FOR ID = range_value : range_value instructions .) ]
  ! ID              [ reduce using rule 69 (for_loop -> FOR ID = range_value : range_value instructions .) ]

    instruction                    shift and go to state 22
    assignment                     shift and go to state 5
    conditional_statement          shift and go to state 6
    print_statement                shift and go to state 7
    jump_statement                 shift and go to state 8
    return_statement               shift and go to state 9
    while_loop                     shift and go to state 10
    for_loop                       shift and go to state 11
    assign_id                      shift and go to state 13
WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for + in state 107 resolved as shift
WARNING: shift/reduce conflict for - in state 107 resolved as shift
WARNING: shift/reduce conflict for * in state 107 resolved as shift
WARNING: shift/reduce conflict for / in state 107 resolved as shift
WARNING: shift/reduce conflict for MATRIX_PLUS in state 107 resolved as shift
WARNING: shift/reduce conflict for MATRIX_SUB in state 107 resolved as shift
WARNING: shift/reduce conflict for MATRIX_MUL in state 107 resolved as shift
WARNING: shift/reduce conflict for MATRIX_DIV in state 107 resolved as shift
WARNING: shift/reduce conflict for RELOP_EQ in state 107 resolved as shift
WARNING: shift/reduce conflict for RELOP_GT in state 107 resolved as shift
WARNING: shift/reduce conflict for RELOP_LT in state 107 resolved as shift
WARNING: shift/reduce conflict for RELOP_GE in state 107 resolved as shift
WARNING: shift/reduce conflict for RELOP_LE in state 107 resolved as shift
WARNING: shift/reduce conflict for RELOP_NE in state 107 resolved as shift
WARNING: shift/reduce conflict for ' in state 107 resolved as shift
WARNING: shift/reduce conflict for + in state 108 resolved as shift
WARNING: shift/reduce conflict for - in state 108 resolved as shift
WARNING: shift/reduce conflict for * in state 108 resolved as shift
WARNING: shift/reduce conflict for / in state 108 resolved as shift
WARNING: shift/reduce conflict for MATRIX_PLUS in state 108 resolved as shift
WARNING: shift/reduce conflict for MATRIX_SUB in state 108 resolved as shift
WARNING: shift/reduce conflict for MATRIX_MUL in state 108 resolved as shift
WARNING: shift/reduce conflict for MATRIX_DIV in state 108 resolved as shift
WARNING: shift/reduce conflict for RELOP_EQ in state 108 resolved as shift
WARNING: shift/reduce conflict for RELOP_GT in state 108 resolved as shift
WARNING: shift/reduce conflict for RELOP_LT in state 108 resolved as shift
WARNING: shift/reduce conflict for RELOP_GE in state 108 resolved as shift
WARNING: shift/reduce conflict for RELOP_LE in state 108 resolved as shift
WARNING: shift/reduce conflict for RELOP_NE in state 108 resolved as shift
WARNING: shift/reduce conflict for ' in state 108 resolved as shift
WARNING: shift/reduce conflict for + in state 109 resolved as shift
WARNING: shift/reduce conflict for - in state 109 resolved as shift
WARNING: shift/reduce conflict for * in state 109 resolved as shift
WARNING: shift/reduce conflict for / in state 109 resolved as shift
WARNING: shift/reduce conflict for MATRIX_PLUS in state 109 resolved as shift
WARNING: shift/reduce conflict for MATRIX_SUB in state 109 resolved as shift
WARNING: shift/reduce conflict for MATRIX_MUL in state 109 resolved as shift
WARNING: shift/reduce conflict for MATRIX_DIV in state 109 resolved as shift
WARNING: shift/reduce conflict for RELOP_EQ in state 109 resolved as shift
WARNING: shift/reduce conflict for RELOP_GT in state 109 resolved as shift
WARNING: shift/reduce conflict for RELOP_LT in state 109 resolved as shift
WARNING: shift/reduce conflict for RELOP_GE in state 109 resolved as shift
WARNING: shift/reduce conflict for RELOP_LE in state 109 resolved as shift
WARNING: shift/reduce conflict for RELOP_NE in state 109 resolved as shift
WARNING: shift/reduce conflict for ' in state 109 resolved as shift
WARNING: shift/reduce conflict for + in state 110 resolved as shift
WARNING: shift/reduce conflict for - in state 110 resolved as shift
WARNING: shift/reduce conflict for * in state 110 resolved as shift
WARNING: shift/reduce conflict for / in state 110 resolved as shift
WARNING: shift/reduce conflict for MATRIX_PLUS in state 110 resolved as shift
WARNING: shift/reduce conflict for MATRIX_SUB in state 110 resolved as shift
WARNING: shift/reduce conflict for MATRIX_MUL in state 110 resolved as shift
WARNING: shift/reduce conflict for MATRIX_DIV in state 110 resolved as shift
WARNING: shift/reduce conflict for RELOP_EQ in state 110 resolved as shift
WARNING: shift/reduce conflict for RELOP_GT in state 110 resolved as shift
WARNING: shift/reduce conflict for RELOP_LT in state 110 resolved as shift
WARNING: shift/reduce conflict for RELOP_GE in state 110 resolved as shift
WARNING: shift/reduce conflict for RELOP_LE in state 110 resolved as shift
WARNING: shift/reduce conflict for RELOP_NE in state 110 resolved as shift
WARNING: shift/reduce conflict for ' in state 110 resolved as shift
WARNING: shift/reduce conflict for + in state 111 resolved as shift
WARNING: shift/reduce conflict for - in state 111 resolved as shift
WARNING: shift/reduce conflict for * in state 111 resolved as shift
WARNING: shift/reduce conflict for / in state 111 resolved as shift
WARNING: shift/reduce conflict for MATRIX_PLUS in state 111 resolved as shift
WARNING: shift/reduce conflict for MATRIX_SUB in state 111 resolved as shift
WARNING: shift/reduce conflict for MATRIX_MUL in state 111 resolved as shift
WARNING: shift/reduce conflict for MATRIX_DIV in state 111 resolved as shift
WARNING: shift/reduce conflict for RELOP_EQ in state 111 resolved as shift
WARNING: shift/reduce conflict for RELOP_GT in state 111 resolved as shift
WARNING: shift/reduce conflict for RELOP_LT in state 111 resolved as shift
WARNING: shift/reduce conflict for RELOP_GE in state 111 resolved as shift
WARNING: shift/reduce conflict for RELOP_LE in state 111 resolved as shift
WARNING: shift/reduce conflict for RELOP_NE in state 111 resolved as shift
WARNING: shift/reduce conflict for ' in state 111 resolved as shift
WARNING: shift/reduce conflict for + in state 112 resolved as shift
WARNING: shift/reduce conflict for - in state 112 resolved as shift
WARNING: shift/reduce conflict for * in state 112 resolved as shift
WARNING: shift/reduce conflict for / in state 112 resolved as shift
WARNING: shift/reduce conflict for MATRIX_PLUS in state 112 resolved as shift
WARNING: shift/reduce conflict for MATRIX_SUB in state 112 resolved as shift
WARNING: shift/reduce conflict for MATRIX_MUL in state 112 resolved as shift
WARNING: shift/reduce conflict for MATRIX_DIV in state 112 resolved as shift
WARNING: shift/reduce conflict for RELOP_EQ in state 112 resolved as shift
WARNING: shift/reduce conflict for RELOP_GT in state 112 resolved as shift
WARNING: shift/reduce conflict for RELOP_LT in state 112 resolved as shift
WARNING: shift/reduce conflict for RELOP_GE in state 112 resolved as shift
WARNING: shift/reduce conflict for RELOP_LE in state 112 resolved as shift
WARNING: shift/reduce conflict for RELOP_NE in state 112 resolved as shift
WARNING: shift/reduce conflict for ' in state 112 resolved as shift
WARNING: shift/reduce conflict for { in state 131 resolved as shift
WARNING: shift/reduce conflict for IF in state 131 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 131 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 131 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 131 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 131 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 131 resolved as shift
WARNING: shift/reduce conflict for FOR in state 131 resolved as shift
WARNING: shift/reduce conflict for ID in state 131 resolved as shift
WARNING: shift/reduce conflict for { in state 135 resolved as shift
WARNING: shift/reduce conflict for IF in state 135 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 135 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 135 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 135 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 135 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 135 resolved as shift
WARNING: shift/reduce conflict for FOR in state 135 resolved as shift
WARNING: shift/reduce conflict for ID in state 135 resolved as shift
