
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "nonassocIFXnonassocELSEnonassocRELOP_EQRELOP_NERELOP_GTRELOP_LTRELOP_GERELOP_LEleft+-leftMATRIX_PLUSMATRIX_SUBleft*/leftMATRIX_MULMATRIX_DIVrightUMINUSleft'BREAK CONTINUE DIV_ASSIGN DT_FLOAT DT_INTEGER DT_STRING ELSE EYE FOR ID IF MATRIX_DIV MATRIX_MUL MATRIX_PLUS MATRIX_SUB MUL_ASSIGN ONES PLUS_ASSIGN PRINT RELOP_EQ RELOP_GE RELOP_GT RELOP_LE RELOP_LT RELOP_NE RETURN SUB_ASSIGN WHILE ZEROSprogram : instructions_opt\n        empty : \n    instructions_opt : instructions instructions_opt : empty \n        instructions : instructions instruction\n    \n        instructions : instruction\n    \n        instruction : assignment\n                    | conditional_statement\n                    | print_statement\n                    | jump_statement\n                    | return_statement\n                    | while_loop\n                    | for_loop\n                    | instruction_block\n    \n        instruction_block : '{' instructions '}'\n    \n        assignment : assign_id '=' expression ';'\n                    | assign_id MUL_ASSIGN expression ';'\n                    | assign_id DIV_ASSIGN expression ';'\n                    | assign_id PLUS_ASSIGN expression ';'\n                    | assign_id SUB_ASSIGN expression ';'\n    \n        assign_id : ID\n    \n        assign_id : slice\n    \n        slice : ID slice_vector\n    \n        slice_vector : '[' expression_list ']'\n    \n        slice_vector : '[' range ']'\n    \n        slice_vector : '[' range ',' range ']'\n    expression : expression_binop\n                  | expression_relop\n                  | expression_unary\n                  | matrix_funcs\n                  | constant\n                  | matrix\n                  | vector\n                  | slice\n    expression : ID\n    expression : '(' expression ')'\n    expression_binop : expression '+' expression\n                | expression '-' expression\n                | expression '*' expression\n                | expression '/' expression\n                | expression MATRIX_PLUS expression\n                | expression MATRIX_SUB expression\n                | expression MATRIX_MUL expression\n                | expression MATRIX_DIV expression\n    expression_relop : expression RELOP_EQ expression\n                | expression RELOP_GT expression\n                | expression RELOP_LT expression\n                | expression RELOP_GE expression\n                | expression RELOP_LE expression\n                | expression RELOP_NE expression\n    expression_unary : '-' expression %prec UMINUS\n                | expression '\\''\n    \n        matrix_funcs : ZEROS '(' expression_list ')'\n                    | ONES '(' expression_list ')'\n                    | EYE '(' expression_list ')'  \n\n    \n        constant : number\n    \n        constant : DT_STRING\n    \n        matrix : '[' vectors ']'\n\n     vectors : vector \n     vectors : vectors ',' vector\n    \n        vector : '[' numbers ']'\n                | '[' ']'\n    \n        numbers : numbers ',' number \n                | number\n    \n        number : DT_INTEGER \n    \n        number : DT_FLOAT\n    \n        conditional_statement : IF '(' expression ')' instruction %prec IFX\n                    | IF '(' expression ')' instruction ELSE instruction\n    \n        jump_statement : BREAK ';'\n                        | CONTINUE ';'\n    \n        return_statement : RETURN ';'\n                        | RETURN expression ';'\n    \n        print_statement : PRINT expression_list ';'\n    \n        expression_list : expression_list ',' expression\n    \n        expression_list : expression\n    \n        while_loop : WHILE '(' expression ')' instruction\n    \n        for_loop : FOR ID '=' range instruction\n    \n        range : expression ':' expression\n    "
    
_lr_action_items = {'$end':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,25,53,54,55,68,96,102,103,104,105,106,107,139,145,146,151,],[-2,0,-1,-3,-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,-5,-69,-70,-71,-73,-72,-15,-16,-17,-18,-19,-20,-67,-76,-77,-68,]),'IF':([0,3,5,6,7,8,9,10,11,12,13,23,25,34,35,36,37,38,39,40,41,42,48,49,51,52,53,54,55,59,61,68,84,86,92,96,102,103,104,105,106,107,108,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,128,130,132,133,135,136,139,140,141,142,145,146,148,149,150,151,],[15,15,-6,-7,-8,-9,-10,-11,-12,-13,-14,15,-5,-27,-28,-29,-30,-31,-32,-33,-34,-35,-56,-57,-65,-66,-69,-70,-71,-23,15,-73,-52,-51,-62,-72,-15,-16,-17,-18,-19,-20,15,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-36,-58,-61,15,15,-24,-25,-67,-53,-54,-55,-76,-77,-78,15,-26,-68,]),'PRINT':([0,3,5,6,7,8,9,10,11,12,13,23,25,34,35,36,37,38,39,40,41,42,48,49,51,52,53,54,55,59,61,68,84,86,92,96,102,103,104,105,106,107,108,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,128,130,132,133,135,136,139,140,141,142,145,146,148,149,150,151,],[16,16,-6,-7,-8,-9,-10,-11,-12,-13,-14,16,-5,-27,-28,-29,-30,-31,-32,-33,-34,-35,-56,-57,-65,-66,-69,-70,-71,-23,16,-73,-52,-51,-62,-72,-15,-16,-17,-18,-19,-20,16,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-36,-58,-61,16,16,-24,-25,-67,-53,-54,-55,-76,-77,-78,16,-26,-68,]),'BREAK':([0,3,5,6,7,8,9,10,11,12,13,23,25,34,35,36,37,38,39,40,41,42,48,49,51,52,53,54,55,59,61,68,84,86,92,96,102,103,104,105,106,107,108,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,128,130,132,133,135,136,139,140,141,142,145,146,148,149,150,151,],[17,17,-6,-7,-8,-9,-10,-11,-12,-13,-14,17,-5,-27,-28,-29,-30,-31,-32,-33,-34,-35,-56,-57,-65,-66,-69,-70,-71,-23,17,-73,-52,-51,-62,-72,-15,-16,-17,-18,-19,-20,17,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-36,-58,-61,17,17,-24,-25,-67,-53,-54,-55,-76,-77,-78,17,-26,-68,]),'CONTINUE':([0,3,5,6,7,8,9,10,11,12,13,23,25,34,35,36,37,38,39,40,41,42,48,49,51,52,53,54,55,59,61,68,84,86,92,96,102,103,104,105,106,107,108,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,128,130,132,133,135,136,139,140,141,142,145,146,148,149,150,151,],[18,18,-6,-7,-8,-9,-10,-11,-12,-13,-14,18,-5,-27,-28,-29,-30,-31,-32,-33,-34,-35,-56,-57,-65,-66,-69,-70,-71,-23,18,-73,-52,-51,-62,-72,-15,-16,-17,-18,-19,-20,18,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-36,-58,-61,18,18,-24,-25,-67,-53,-54,-55,-76,-77,-78,18,-26,-68,]),'RETURN':([0,3,5,6,7,8,9,10,11,12,13,23,25,34,35,36,37,38,39,40,41,42,48,49,51,52,53,54,55,59,61,68,84,86,92,96,102,103,104,105,106,107,108,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,128,130,132,133,135,136,139,140,141,142,145,146,148,149,150,151,],[19,19,-6,-7,-8,-9,-10,-11,-12,-13,-14,19,-5,-27,-28,-29,-30,-31,-32,-33,-34,-35,-56,-57,-65,-66,-69,-70,-71,-23,19,-73,-52,-51,-62,-72,-15,-16,-17,-18,-19,-20,19,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-36,-58,-61,19,19,-24,-25,-67,-53,-54,-55,-76,-77,-78,19,-26,-68,]),'WHILE':([0,3,5,6,7,8,9,10,11,12,13,23,25,34,35,36,37,38,39,40,41,42,48,49,51,52,53,54,55,59,61,68,84,86,92,96,102,103,104,105,106,107,108,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,128,130,132,133,135,136,139,140,141,142,145,146,148,149,150,151,],[20,20,-6,-7,-8,-9,-10,-11,-12,-13,-14,20,-5,-27,-28,-29,-30,-31,-32,-33,-34,-35,-56,-57,-65,-66,-69,-70,-71,-23,20,-73,-52,-51,-62,-72,-15,-16,-17,-18,-19,-20,20,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-36,-58,-61,20,20,-24,-25,-67,-53,-54,-55,-76,-77,-78,20,-26,-68,]),'FOR':([0,3,5,6,7,8,9,10,11,12,13,23,25,34,35,36,37,38,39,40,41,42,48,49,51,52,53,54,55,59,61,68,84,86,92,96,102,103,104,105,106,107,108,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,128,130,132,133,135,136,139,140,141,142,145,146,148,149,150,151,],[21,21,-6,-7,-8,-9,-10,-11,-12,-13,-14,21,-5,-27,-28,-29,-30,-31,-32,-33,-34,-35,-56,-57,-65,-66,-69,-70,-71,-23,21,-73,-52,-51,-62,-72,-15,-16,-17,-18,-19,-20,21,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-36,-58,-61,21,21,-24,-25,-67,-53,-54,-55,-76,-77,-78,21,-26,-68,]),'{':([0,3,5,6,7,8,9,10,11,12,13,23,25,34,35,36,37,38,39,40,41,42,48,49,51,52,53,54,55,59,61,68,84,86,92,96,102,103,104,105,106,107,108,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,128,130,132,133,135,136,139,140,141,142,145,146,148,149,150,151,],[23,23,-6,-7,-8,-9,-10,-11,-12,-13,-14,23,-5,-27,-28,-29,-30,-31,-32,-33,-34,-35,-56,-57,-65,-66,-69,-70,-71,-23,23,-73,-52,-51,-62,-72,-15,-16,-17,-18,-19,-20,23,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-36,-58,-61,23,23,-24,-25,-67,-53,-54,-55,-76,-77,-78,23,-26,-68,]),'ID':([0,3,5,6,7,8,9,10,11,12,13,16,19,21,23,25,26,27,28,29,30,31,34,35,36,37,38,39,40,41,42,43,44,48,49,51,52,53,54,55,57,59,60,61,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,86,87,88,89,92,96,98,102,103,104,105,106,107,108,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,128,130,132,133,135,136,137,138,139,140,141,142,145,146,148,149,150,151,],[22,22,-6,-7,-8,-9,-10,-11,-12,-13,-14,42,42,58,22,-5,42,42,42,42,42,42,-27,-28,-29,-30,-31,-32,-33,-34,-35,42,42,-56,-57,-65,-66,-69,-70,-71,42,-23,42,22,-73,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,-52,-51,42,42,42,-62,-72,42,-15,-16,-17,-18,-19,-20,22,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-36,-58,-61,22,22,-24,-25,42,42,-67,-53,-54,-55,-76,-77,-78,22,-26,-68,]),'}':([5,6,7,8,9,10,11,12,13,25,53,54,55,61,68,96,102,103,104,105,106,107,139,145,146,151,],[-6,-7,-8,-9,-10,-11,-12,-13,-14,-5,-69,-70,-71,102,-73,-72,-15,-16,-17,-18,-19,-20,-67,-76,-77,-68,]),'ELSE':([6,7,8,9,10,11,12,13,53,54,55,68,96,102,103,104,105,106,107,139,145,146,151,],[-7,-8,-9,-10,-11,-12,-13,-14,-69,-70,-71,-73,-72,-15,-16,-17,-18,-19,-20,149,-76,-77,-68,]),'=':([14,22,24,58,59,135,136,150,],[26,-21,-22,98,-23,-24,-25,-26,]),'MUL_ASSIGN':([14,22,24,59,135,136,150,],[27,-21,-22,-23,-24,-25,-26,]),'DIV_ASSIGN':([14,22,24,59,135,136,150,],[28,-21,-22,-23,-24,-25,-26,]),'PLUS_ASSIGN':([14,22,24,59,135,136,150,],[29,-21,-22,-23,-24,-25,-26,]),'SUB_ASSIGN':([14,22,24,59,135,136,150,],[30,-21,-22,-23,-24,-25,-26,]),'(':([15,16,19,20,26,27,28,29,30,31,43,44,45,46,47,57,60,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,87,88,89,98,137,138,],[31,43,43,57,43,43,43,43,43,43,43,43,87,88,89,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'-':([16,19,26,27,28,29,30,31,33,34,35,36,37,38,39,40,41,42,43,44,48,49,51,52,56,57,59,60,62,63,64,65,66,67,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,92,97,98,101,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,128,130,134,135,136,137,138,140,141,142,148,150,],[44,44,44,44,44,44,44,44,71,-27,-28,-29,-30,-31,-32,-33,-34,-35,44,44,-56,-57,-65,-66,71,44,-23,44,71,71,71,71,71,71,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-52,71,-51,44,44,44,-62,71,44,71,71,-37,-38,-39,-40,-41,-42,-43,-44,71,71,71,71,71,71,-36,-58,-61,71,-24,-25,44,44,-53,-54,-55,71,-26,]),'ZEROS':([16,19,26,27,28,29,30,31,43,44,57,60,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,87,88,89,98,137,138,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'ONES':([16,19,26,27,28,29,30,31,43,44,57,60,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,87,88,89,98,137,138,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'EYE':([16,19,26,27,28,29,30,31,43,44,57,60,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,87,88,89,98,137,138,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'DT_STRING':([16,19,26,27,28,29,30,31,43,44,57,60,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,87,88,89,98,137,138,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'[':([16,19,22,26,27,28,29,30,31,42,43,44,50,57,60,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,87,88,89,98,129,137,138,],[50,50,60,50,50,50,50,50,50,60,50,50,90,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,90,50,50,]),'DT_INTEGER':([16,19,26,27,28,29,30,31,43,44,50,57,60,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,87,88,89,90,98,131,137,138,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'DT_FLOAT':([16,19,26,27,28,29,30,31,43,44,50,57,60,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,87,88,89,90,98,131,137,138,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),';':([17,18,19,32,33,34,35,36,37,38,39,40,41,42,48,49,51,52,56,59,62,63,64,65,66,84,86,92,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,128,130,135,136,140,141,142,150,],[53,54,55,68,-75,-27,-28,-29,-30,-31,-32,-33,-34,-35,-56,-57,-65,-66,96,-23,103,104,105,106,107,-52,-51,-62,-74,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-36,-58,-61,-24,-25,-53,-54,-55,-26,]),',':([32,33,34,35,36,37,38,39,40,41,42,48,49,51,52,59,84,86,91,92,93,94,95,99,100,101,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,130,135,136,140,141,142,143,144,148,150,],[69,-75,-27,-28,-29,-30,-31,-32,-33,-34,-35,-56,-57,-65,-66,-23,-52,-51,129,-62,131,-59,-64,69,137,-75,-74,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-36,69,69,69,-58,-61,-24,-25,-53,-54,-55,-60,-63,-78,-26,]),')':([33,34,35,36,37,38,39,40,41,42,48,49,51,52,59,67,84,85,86,92,97,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,130,135,136,140,141,142,150,],[-75,-27,-28,-29,-30,-31,-32,-33,-34,-35,-56,-57,-65,-66,-23,108,-52,124,-51,-62,132,-74,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-36,140,141,142,-58,-61,-24,-25,-53,-54,-55,-26,]),'+':([33,34,35,36,37,38,39,40,41,42,48,49,51,52,56,59,62,63,64,65,66,67,84,85,86,92,97,101,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,128,130,134,135,136,140,141,142,148,150,],[70,-27,-28,-29,-30,-31,-32,-33,-34,-35,-56,-57,-65,-66,70,-23,70,70,70,70,70,70,-52,70,-51,-62,70,70,70,-37,-38,-39,-40,-41,-42,-43,-44,70,70,70,70,70,70,-36,-58,-61,70,-24,-25,-53,-54,-55,70,-26,]),'*':([33,34,35,36,37,38,39,40,41,42,48,49,51,52,56,59,62,63,64,65,66,67,84,85,86,92,97,101,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,128,130,134,135,136,140,141,142,148,150,],[72,-27,-28,-29,-30,-31,-32,-33,-34,-35,-56,-57,-65,-66,72,-23,72,72,72,72,72,72,-52,72,-51,-62,72,72,72,72,72,-39,-40,72,72,-43,-44,72,72,72,72,72,72,-36,-58,-61,72,-24,-25,-53,-54,-55,72,-26,]),'/':([33,34,35,36,37,38,39,40,41,42,48,49,51,52,56,59,62,63,64,65,66,67,84,85,86,92,97,101,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,128,130,134,135,136,140,141,142,148,150,],[73,-27,-28,-29,-30,-31,-32,-33,-34,-35,-56,-57,-65,-66,73,-23,73,73,73,73,73,73,-52,73,-51,-62,73,73,73,73,73,-39,-40,73,73,-43,-44,73,73,73,73,73,73,-36,-58,-61,73,-24,-25,-53,-54,-55,73,-26,]),'MATRIX_PLUS':([33,34,35,36,37,38,39,40,41,42,48,49,51,52,56,59,62,63,64,65,66,67,84,85,86,92,97,101,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,128,130,134,135,136,140,141,142,148,150,],[74,-27,-28,-29,-30,-31,-32,-33,-34,-35,-56,-57,-65,-66,74,-23,74,74,74,74,74,74,-52,74,-51,-62,74,74,74,74,74,-39,-40,-41,-42,-43,-44,74,74,74,74,74,74,-36,-58,-61,74,-24,-25,-53,-54,-55,74,-26,]),'MATRIX_SUB':([33,34,35,36,37,38,39,40,41,42,48,49,51,52,56,59,62,63,64,65,66,67,84,85,86,92,97,101,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,128,130,134,135,136,140,141,142,148,150,],[75,-27,-28,-29,-30,-31,-32,-33,-34,-35,-56,-57,-65,-66,75,-23,75,75,75,75,75,75,-52,75,-51,-62,75,75,75,75,75,-39,-40,-41,-42,-43,-44,75,75,75,75,75,75,-36,-58,-61,75,-24,-25,-53,-54,-55,75,-26,]),'MATRIX_MUL':([33,34,35,36,37,38,39,40,41,42,48,49,51,52,56,59,62,63,64,65,66,67,84,85,86,92,97,101,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,128,130,134,135,136,140,141,142,148,150,],[76,-27,-28,-29,-30,-31,-32,-33,-34,-35,-56,-57,-65,-66,76,-23,76,76,76,76,76,76,-52,76,-51,-62,76,76,76,76,76,76,76,76,76,-43,-44,76,76,76,76,76,76,-36,-58,-61,76,-24,-25,-53,-54,-55,76,-26,]),'MATRIX_DIV':([33,34,35,36,37,38,39,40,41,42,48,49,51,52,56,59,62,63,64,65,66,67,84,85,86,92,97,101,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,128,130,134,135,136,140,141,142,148,150,],[77,-27,-28,-29,-30,-31,-32,-33,-34,-35,-56,-57,-65,-66,77,-23,77,77,77,77,77,77,-52,77,-51,-62,77,77,77,77,77,77,77,77,77,-43,-44,77,77,77,77,77,77,-36,-58,-61,77,-24,-25,-53,-54,-55,77,-26,]),'RELOP_EQ':([33,34,35,36,37,38,39,40,41,42,48,49,51,52,56,59,62,63,64,65,66,67,84,85,86,92,97,101,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,128,130,134,135,136,140,141,142,148,150,],[78,-27,-28,-29,-30,-31,-32,-33,-34,-35,-56,-57,-65,-66,78,-23,78,78,78,78,78,78,-52,78,-51,-62,78,78,78,-37,-38,-39,-40,-41,-42,-43,-44,None,None,None,None,None,None,-36,-58,-61,78,-24,-25,-53,-54,-55,78,-26,]),'RELOP_GT':([33,34,35,36,37,38,39,40,41,42,48,49,51,52,56,59,62,63,64,65,66,67,84,85,86,92,97,101,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,128,130,134,135,136,140,141,142,148,150,],[79,-27,-28,-29,-30,-31,-32,-33,-34,-35,-56,-57,-65,-66,79,-23,79,79,79,79,79,79,-52,79,-51,-62,79,79,79,-37,-38,-39,-40,-41,-42,-43,-44,None,None,None,None,None,None,-36,-58,-61,79,-24,-25,-53,-54,-55,79,-26,]),'RELOP_LT':([33,34,35,36,37,38,39,40,41,42,48,49,51,52,56,59,62,63,64,65,66,67,84,85,86,92,97,101,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,128,130,134,135,136,140,141,142,148,150,],[80,-27,-28,-29,-30,-31,-32,-33,-34,-35,-56,-57,-65,-66,80,-23,80,80,80,80,80,80,-52,80,-51,-62,80,80,80,-37,-38,-39,-40,-41,-42,-43,-44,None,None,None,None,None,None,-36,-58,-61,80,-24,-25,-53,-54,-55,80,-26,]),'RELOP_GE':([33,34,35,36,37,38,39,40,41,42,48,49,51,52,56,59,62,63,64,65,66,67,84,85,86,92,97,101,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,128,130,134,135,136,140,141,142,148,150,],[81,-27,-28,-29,-30,-31,-32,-33,-34,-35,-56,-57,-65,-66,81,-23,81,81,81,81,81,81,-52,81,-51,-62,81,81,81,-37,-38,-39,-40,-41,-42,-43,-44,None,None,None,None,None,None,-36,-58,-61,81,-24,-25,-53,-54,-55,81,-26,]),'RELOP_LE':([33,34,35,36,37,38,39,40,41,42,48,49,51,52,56,59,62,63,64,65,66,67,84,85,86,92,97,101,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,128,130,134,135,136,140,141,142,148,150,],[82,-27,-28,-29,-30,-31,-32,-33,-34,-35,-56,-57,-65,-66,82,-23,82,82,82,82,82,82,-52,82,-51,-62,82,82,82,-37,-38,-39,-40,-41,-42,-43,-44,None,None,None,None,None,None,-36,-58,-61,82,-24,-25,-53,-54,-55,82,-26,]),'RELOP_NE':([33,34,35,36,37,38,39,40,41,42,48,49,51,52,56,59,62,63,64,65,66,67,84,85,86,92,97,101,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,128,130,134,135,136,140,141,142,148,150,],[83,-27,-28,-29,-30,-31,-32,-33,-34,-35,-56,-57,-65,-66,83,-23,83,83,83,83,83,83,-52,83,-51,-62,83,83,83,-37,-38,-39,-40,-41,-42,-43,-44,None,None,None,None,None,None,-36,-58,-61,83,-24,-25,-53,-54,-55,83,-26,]),"'":([33,34,35,36,37,38,39,40,41,42,48,49,51,52,56,59,62,63,64,65,66,67,84,85,86,92,97,101,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,128,130,134,135,136,140,141,142,148,150,],[84,-27,-28,-29,-30,-31,-32,-33,-34,-35,-56,-57,-65,-66,84,-23,84,84,84,84,84,84,-52,84,84,-62,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,-36,-58,-61,84,-24,-25,-53,-54,-55,84,-26,]),':':([34,35,36,37,38,39,40,41,42,48,49,51,52,59,84,86,92,101,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,128,130,134,135,136,140,141,142,150,],[-27,-28,-29,-30,-31,-32,-33,-34,-35,-56,-57,-65,-66,-23,-52,-51,-62,138,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-36,-58,-61,138,-24,-25,-53,-54,-55,-26,]),']':([34,35,36,37,38,39,40,41,42,48,49,50,51,52,59,84,86,90,91,92,93,94,95,99,100,101,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,128,130,135,136,140,141,142,143,144,147,148,150,],[-27,-28,-29,-30,-31,-32,-33,-34,-35,-56,-57,92,-65,-66,-23,-52,-51,92,128,-62,130,-59,-64,135,136,-75,-74,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-36,-58,-61,-24,-25,-53,-54,-55,-60,-63,150,-78,-26,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'instructions_opt':([0,],[2,]),'instructions':([0,23,],[3,61,]),'empty':([0,],[4,]),'instruction':([0,3,23,61,108,132,133,149,],[5,25,5,25,139,145,146,151,]),'assignment':([0,3,23,61,108,132,133,149,],[6,6,6,6,6,6,6,6,]),'conditional_statement':([0,3,23,61,108,132,133,149,],[7,7,7,7,7,7,7,7,]),'print_statement':([0,3,23,61,108,132,133,149,],[8,8,8,8,8,8,8,8,]),'jump_statement':([0,3,23,61,108,132,133,149,],[9,9,9,9,9,9,9,9,]),'return_statement':([0,3,23,61,108,132,133,149,],[10,10,10,10,10,10,10,10,]),'while_loop':([0,3,23,61,108,132,133,149,],[11,11,11,11,11,11,11,11,]),'for_loop':([0,3,23,61,108,132,133,149,],[12,12,12,12,12,12,12,12,]),'instruction_block':([0,3,23,61,108,132,133,149,],[13,13,13,13,13,13,13,13,]),'assign_id':([0,3,23,61,108,132,133,149,],[14,14,14,14,14,14,14,14,]),'slice':([0,3,16,19,23,26,27,28,29,30,31,43,44,57,60,61,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,87,88,89,98,108,132,133,137,138,149,],[24,24,41,41,24,41,41,41,41,41,41,41,41,41,41,24,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,24,24,24,41,41,24,]),'expression_list':([16,60,87,88,89,],[32,99,125,126,127,]),'expression':([16,19,26,27,28,29,30,31,43,44,57,60,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,87,88,89,98,137,138,],[33,56,62,63,64,65,66,67,85,86,97,101,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,33,33,33,134,134,148,]),'expression_binop':([16,19,26,27,28,29,30,31,43,44,57,60,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,87,88,89,98,137,138,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'expression_relop':([16,19,26,27,28,29,30,31,43,44,57,60,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,87,88,89,98,137,138,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'expression_unary':([16,19,26,27,28,29,30,31,43,44,57,60,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,87,88,89,98,137,138,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'matrix_funcs':([16,19,26,27,28,29,30,31,43,44,57,60,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,87,88,89,98,137,138,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'constant':([16,19,26,27,28,29,30,31,43,44,57,60,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,87,88,89,98,137,138,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'matrix':([16,19,26,27,28,29,30,31,43,44,57,60,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,87,88,89,98,137,138,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'vector':([16,19,26,27,28,29,30,31,43,44,50,57,60,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,87,88,89,98,129,137,138,],[40,40,40,40,40,40,40,40,40,40,94,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,143,40,40,]),'number':([16,19,26,27,28,29,30,31,43,44,50,57,60,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,87,88,89,90,98,131,137,138,],[48,48,48,48,48,48,48,48,48,48,95,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,95,48,144,48,48,]),'slice_vector':([22,42,],[59,59,]),'vectors':([50,],[91,]),'numbers':([50,90,],[93,93,]),'range':([60,98,137,],[100,133,147,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> instructions_opt','program',1,'p_program','Mparser.py',38),
  ('empty -> <empty>','empty',0,'p_empty','Mparser.py',44),
  ('instructions_opt -> instructions','instructions_opt',1,'p_instruction_opt_1','Mparser.py',50),
  ('instructions_opt -> empty','instructions_opt',1,'p_instruction_opt_2','Mparser.py',55),
  ('instructions -> instructions instruction','instructions',2,'p_instructions','Mparser.py',61),
  ('instructions -> instruction','instructions',1,'p_instructions_2','Mparser.py',70),
  ('instruction -> assignment','instruction',1,'p_instruction','Mparser.py',81),
  ('instruction -> conditional_statement','instruction',1,'p_instruction','Mparser.py',82),
  ('instruction -> print_statement','instruction',1,'p_instruction','Mparser.py',83),
  ('instruction -> jump_statement','instruction',1,'p_instruction','Mparser.py',84),
  ('instruction -> return_statement','instruction',1,'p_instruction','Mparser.py',85),
  ('instruction -> while_loop','instruction',1,'p_instruction','Mparser.py',86),
  ('instruction -> for_loop','instruction',1,'p_instruction','Mparser.py',87),
  ('instruction -> instruction_block','instruction',1,'p_instruction','Mparser.py',88),
  ('instruction_block -> { instructions }','instruction_block',3,'p_instruction_block','Mparser.py',96),
  ('assignment -> assign_id = expression ;','assignment',4,'p_assignment','Mparser.py',103),
  ('assignment -> assign_id MUL_ASSIGN expression ;','assignment',4,'p_assignment','Mparser.py',104),
  ('assignment -> assign_id DIV_ASSIGN expression ;','assignment',4,'p_assignment','Mparser.py',105),
  ('assignment -> assign_id PLUS_ASSIGN expression ;','assignment',4,'p_assignment','Mparser.py',106),
  ('assignment -> assign_id SUB_ASSIGN expression ;','assignment',4,'p_assignment','Mparser.py',107),
  ('assign_id -> ID','assign_id',1,'p_assign_id','Mparser.py',116),
  ('assign_id -> slice','assign_id',1,'p_assign_slice','Mparser.py',124),
  ('slice -> ID slice_vector','slice',2,'p_slice','Mparser.py',132),
  ('slice_vector -> [ expression_list ]','slice_vector',3,'p_slice_vector','Mparser.py',141),
  ('slice_vector -> [ range ]','slice_vector',3,'p_slice_vector2','Mparser.py',149),
  ('slice_vector -> [ range , range ]','slice_vector',5,'p_slice_vector3','Mparser.py',157),
  ('expression -> expression_binop','expression',1,'p_expression','Mparser.py',164),
  ('expression -> expression_relop','expression',1,'p_expression','Mparser.py',165),
  ('expression -> expression_unary','expression',1,'p_expression','Mparser.py',166),
  ('expression -> matrix_funcs','expression',1,'p_expression','Mparser.py',167),
  ('expression -> constant','expression',1,'p_expression','Mparser.py',168),
  ('expression -> matrix','expression',1,'p_expression','Mparser.py',169),
  ('expression -> vector','expression',1,'p_expression','Mparser.py',170),
  ('expression -> slice','expression',1,'p_expression','Mparser.py',171),
  ('expression -> ID','expression',1,'p_expression_2','Mparser.py',177),
  ('expression -> ( expression )','expression',3,'p_expression_3','Mparser.py',184),
  ('expression_binop -> expression + expression','expression_binop',3,'p_expression_binop','Mparser.py',190),
  ('expression_binop -> expression - expression','expression_binop',3,'p_expression_binop','Mparser.py',191),
  ('expression_binop -> expression * expression','expression_binop',3,'p_expression_binop','Mparser.py',192),
  ('expression_binop -> expression / expression','expression_binop',3,'p_expression_binop','Mparser.py',193),
  ('expression_binop -> expression MATRIX_PLUS expression','expression_binop',3,'p_expression_binop','Mparser.py',194),
  ('expression_binop -> expression MATRIX_SUB expression','expression_binop',3,'p_expression_binop','Mparser.py',195),
  ('expression_binop -> expression MATRIX_MUL expression','expression_binop',3,'p_expression_binop','Mparser.py',196),
  ('expression_binop -> expression MATRIX_DIV expression','expression_binop',3,'p_expression_binop','Mparser.py',197),
  ('expression_relop -> expression RELOP_EQ expression','expression_relop',3,'p_expression_relop','Mparser.py',205),
  ('expression_relop -> expression RELOP_GT expression','expression_relop',3,'p_expression_relop','Mparser.py',206),
  ('expression_relop -> expression RELOP_LT expression','expression_relop',3,'p_expression_relop','Mparser.py',207),
  ('expression_relop -> expression RELOP_GE expression','expression_relop',3,'p_expression_relop','Mparser.py',208),
  ('expression_relop -> expression RELOP_LE expression','expression_relop',3,'p_expression_relop','Mparser.py',209),
  ('expression_relop -> expression RELOP_NE expression','expression_relop',3,'p_expression_relop','Mparser.py',210),
  ('expression_unary -> - expression','expression_unary',2,'p_expression_unary','Mparser.py',217),
  ("expression_unary -> expression '",'expression_unary',2,'p_expression_unary','Mparser.py',218),
  ('matrix_funcs -> ZEROS ( expression_list )','matrix_funcs',4,'p_matrix_funcs','Mparser.py',231),
  ('matrix_funcs -> ONES ( expression_list )','matrix_funcs',4,'p_matrix_funcs','Mparser.py',232),
  ('matrix_funcs -> EYE ( expression_list )','matrix_funcs',4,'p_matrix_funcs','Mparser.py',233),
  ('constant -> number','constant',1,'p_constant','Mparser.py',243),
  ('constant -> DT_STRING','constant',1,'p_constant_str','Mparser.py',250),
  ('matrix -> [ vectors ]','matrix',3,'p_matrix','Mparser.py',258),
  ('vectors -> vector','vectors',1,'p_vectors','Mparser.py',266),
  ('vectors -> vectors , vector','vectors',3,'p_vectors_2','Mparser.py',273),
  ('vector -> [ numbers ]','vector',3,'p_vector','Mparser.py',282),
  ('vector -> [ ]','vector',2,'p_vector','Mparser.py',283),
  ('numbers -> numbers , number','numbers',3,'p_numbers','Mparser.py',296),
  ('numbers -> number','numbers',1,'p_numbers','Mparser.py',297),
  ('number -> DT_INTEGER','number',1,'p_number_int','Mparser.py',311),
  ('number -> DT_FLOAT','number',1,'p_number_float','Mparser.py',320),
  ('conditional_statement -> IF ( expression ) instruction','conditional_statement',5,'p_conditional_statement','Mparser.py',329),
  ('conditional_statement -> IF ( expression ) instruction ELSE instruction','conditional_statement',7,'p_conditional_statement','Mparser.py',330),
  ('jump_statement -> BREAK ;','jump_statement',2,'p_jump_statement','Mparser.py',343),
  ('jump_statement -> CONTINUE ;','jump_statement',2,'p_jump_statement','Mparser.py',344),
  ('return_statement -> RETURN ;','return_statement',2,'p_return_statement','Mparser.py',352),
  ('return_statement -> RETURN expression ;','return_statement',3,'p_return_statement','Mparser.py',353),
  ('print_statement -> PRINT expression_list ;','print_statement',3,'p_print_statement','Mparser.py',366),
  ('expression_list -> expression_list , expression','expression_list',3,'p_expression_list','Mparser.py',374),
  ('expression_list -> expression','expression_list',1,'p_expression_list_2','Mparser.py',382),
  ('while_loop -> WHILE ( expression ) instruction','while_loop',5,'p_while_loop','Mparser.py',389),
  ('for_loop -> FOR ID = range instruction','for_loop',5,'p_for_loop','Mparser.py',396),
  ('range -> expression : expression','range',3,'p_range','Mparser.py',403),
]
