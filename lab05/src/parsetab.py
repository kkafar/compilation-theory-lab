
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "nonassocIFXnonassocELSEnonassocRELOP_EQRELOP_NERELOP_GTRELOP_LTRELOP_GERELOP_LEleft+-leftMATRIX_PLUSMATRIX_SUBleft*/leftMATRIX_MULMATRIX_DIVrightUMINUSleft'BREAK CONTINUE DIV_ASSIGN DT_FLOAT DT_INTEGER DT_STRING ELSE EYE FOR ID IF MATRIX_DIV MATRIX_MUL MATRIX_PLUS MATRIX_SUB MUL_ASSIGN ONES PLUS_ASSIGN PRINT RELOP_EQ RELOP_GE RELOP_GT RELOP_LE RELOP_LT RELOP_NE RETURN SUB_ASSIGN WHILE ZEROSprogram : instructions_opt\n        empty : \n    instructions_opt : instructions instructions_opt : empty \n        instructions : instructions instruction\n    \n        instructions : instruction\n    \n        instruction : assignment\n                    | conditional_statement\n                    | print_statement\n                    | jump_statement\n                    | return_statement\n                    | while_loop\n                    | for_loop\n                    | instruction_block\n    \n        instruction_block : '{' instructions '}'\n    \n        assignment : assign_id '=' expression ';'\n                    | assign_id MUL_ASSIGN expression ';'\n                    | assign_id DIV_ASSIGN expression ';'\n                    | assign_id PLUS_ASSIGN expression ';'\n                    | assign_id SUB_ASSIGN expression ';'\n    \n        assign_id : ID\n    \n        assign_id : slice\n    \n        slice : ID slice_vector\n    \n        slice_vector : '[' expression_list ']'\n    expression : expression_binop\n                  | expression_relop\n                  | expression_unary\n                  | matrix_funcs\n                  | constant\n                  | matrix\n                  | vector\n                  | slice\n    expression : ID\n    expression : '(' expression ')'\n    expression_binop : expression '+' expression\n                | expression '-' expression\n                | expression '*' expression\n                | expression '/' expression\n                | expression MATRIX_PLUS expression\n                | expression MATRIX_SUB expression\n                | expression MATRIX_MUL expression\n                | expression MATRIX_DIV expression\n    expression_relop : expression RELOP_EQ expression\n                | expression RELOP_GT expression\n                | expression RELOP_LT expression\n                | expression RELOP_GE expression\n                | expression RELOP_LE expression\n                | expression RELOP_NE expression\n    expression_unary : '-' expression %prec UMINUS\n                | expression '\\''\n    \n        matrix_funcs : ZEROS '(' expression_list ')'\n                    | ONES '(' expression_list ')'\n                    | EYE '(' expression_list ')'  \n\n    \n        constant : number\n    \n        constant : DT_STRING\n    \n        matrix : '[' vectors ']'\n\n     vectors : vector \n     vectors : vectors ',' vector\n    \n        vector : '[' numbers ']'\n                | '[' ']'\n    \n        numbers : numbers ',' number \n                | number\n    \n        number : DT_INTEGER \n    \n        number : DT_FLOAT\n    \n        conditional_statement : IF '(' expression ')' instruction %prec IFX\n                    | IF '(' expression ')' instruction ELSE instruction\n    \n        jump_statement : BREAK ';'\n                        | CONTINUE ';'\n    \n        return_statement : RETURN ';'\n                        | RETURN expression ';'\n    \n        print_statement : PRINT expression_list ';'\n    \n        expression_list : expression_list ',' expression\n    \n        expression_list : expression\n    \n        while_loop : WHILE '(' expression ')' instruction\n    \n        for_loop : FOR ID '=' range instruction\n    \n        range : expression ':' expression\n    "
    
_lr_action_items = {'$end':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,25,53,54,55,68,96,100,101,102,103,104,105,134,140,141,145,],[-2,0,-1,-3,-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,-5,-67,-68,-69,-71,-70,-15,-16,-17,-18,-19,-20,-65,-74,-75,-66,]),'IF':([0,3,5,6,7,8,9,10,11,12,13,23,25,34,35,36,37,38,39,40,41,42,48,49,51,52,53,54,55,59,61,68,84,86,92,96,100,101,102,103,104,105,106,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,126,128,130,131,133,134,135,136,137,140,141,143,144,145,],[15,15,-6,-7,-8,-9,-10,-11,-12,-13,-14,15,-5,-25,-26,-27,-28,-29,-30,-31,-32,-33,-54,-55,-63,-64,-67,-68,-69,-23,15,-71,-50,-49,-60,-70,-15,-16,-17,-18,-19,-20,15,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-34,-56,-59,15,15,-24,-65,-51,-52,-53,-74,-75,15,-76,-66,]),'PRINT':([0,3,5,6,7,8,9,10,11,12,13,23,25,34,35,36,37,38,39,40,41,42,48,49,51,52,53,54,55,59,61,68,84,86,92,96,100,101,102,103,104,105,106,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,126,128,130,131,133,134,135,136,137,140,141,143,144,145,],[16,16,-6,-7,-8,-9,-10,-11,-12,-13,-14,16,-5,-25,-26,-27,-28,-29,-30,-31,-32,-33,-54,-55,-63,-64,-67,-68,-69,-23,16,-71,-50,-49,-60,-70,-15,-16,-17,-18,-19,-20,16,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-34,-56,-59,16,16,-24,-65,-51,-52,-53,-74,-75,16,-76,-66,]),'BREAK':([0,3,5,6,7,8,9,10,11,12,13,23,25,34,35,36,37,38,39,40,41,42,48,49,51,52,53,54,55,59,61,68,84,86,92,96,100,101,102,103,104,105,106,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,126,128,130,131,133,134,135,136,137,140,141,143,144,145,],[17,17,-6,-7,-8,-9,-10,-11,-12,-13,-14,17,-5,-25,-26,-27,-28,-29,-30,-31,-32,-33,-54,-55,-63,-64,-67,-68,-69,-23,17,-71,-50,-49,-60,-70,-15,-16,-17,-18,-19,-20,17,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-34,-56,-59,17,17,-24,-65,-51,-52,-53,-74,-75,17,-76,-66,]),'CONTINUE':([0,3,5,6,7,8,9,10,11,12,13,23,25,34,35,36,37,38,39,40,41,42,48,49,51,52,53,54,55,59,61,68,84,86,92,96,100,101,102,103,104,105,106,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,126,128,130,131,133,134,135,136,137,140,141,143,144,145,],[18,18,-6,-7,-8,-9,-10,-11,-12,-13,-14,18,-5,-25,-26,-27,-28,-29,-30,-31,-32,-33,-54,-55,-63,-64,-67,-68,-69,-23,18,-71,-50,-49,-60,-70,-15,-16,-17,-18,-19,-20,18,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-34,-56,-59,18,18,-24,-65,-51,-52,-53,-74,-75,18,-76,-66,]),'RETURN':([0,3,5,6,7,8,9,10,11,12,13,23,25,34,35,36,37,38,39,40,41,42,48,49,51,52,53,54,55,59,61,68,84,86,92,96,100,101,102,103,104,105,106,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,126,128,130,131,133,134,135,136,137,140,141,143,144,145,],[19,19,-6,-7,-8,-9,-10,-11,-12,-13,-14,19,-5,-25,-26,-27,-28,-29,-30,-31,-32,-33,-54,-55,-63,-64,-67,-68,-69,-23,19,-71,-50,-49,-60,-70,-15,-16,-17,-18,-19,-20,19,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-34,-56,-59,19,19,-24,-65,-51,-52,-53,-74,-75,19,-76,-66,]),'WHILE':([0,3,5,6,7,8,9,10,11,12,13,23,25,34,35,36,37,38,39,40,41,42,48,49,51,52,53,54,55,59,61,68,84,86,92,96,100,101,102,103,104,105,106,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,126,128,130,131,133,134,135,136,137,140,141,143,144,145,],[20,20,-6,-7,-8,-9,-10,-11,-12,-13,-14,20,-5,-25,-26,-27,-28,-29,-30,-31,-32,-33,-54,-55,-63,-64,-67,-68,-69,-23,20,-71,-50,-49,-60,-70,-15,-16,-17,-18,-19,-20,20,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-34,-56,-59,20,20,-24,-65,-51,-52,-53,-74,-75,20,-76,-66,]),'FOR':([0,3,5,6,7,8,9,10,11,12,13,23,25,34,35,36,37,38,39,40,41,42,48,49,51,52,53,54,55,59,61,68,84,86,92,96,100,101,102,103,104,105,106,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,126,128,130,131,133,134,135,136,137,140,141,143,144,145,],[21,21,-6,-7,-8,-9,-10,-11,-12,-13,-14,21,-5,-25,-26,-27,-28,-29,-30,-31,-32,-33,-54,-55,-63,-64,-67,-68,-69,-23,21,-71,-50,-49,-60,-70,-15,-16,-17,-18,-19,-20,21,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-34,-56,-59,21,21,-24,-65,-51,-52,-53,-74,-75,21,-76,-66,]),'{':([0,3,5,6,7,8,9,10,11,12,13,23,25,34,35,36,37,38,39,40,41,42,48,49,51,52,53,54,55,59,61,68,84,86,92,96,100,101,102,103,104,105,106,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,126,128,130,131,133,134,135,136,137,140,141,143,144,145,],[23,23,-6,-7,-8,-9,-10,-11,-12,-13,-14,23,-5,-25,-26,-27,-28,-29,-30,-31,-32,-33,-54,-55,-63,-64,-67,-68,-69,-23,23,-71,-50,-49,-60,-70,-15,-16,-17,-18,-19,-20,23,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-34,-56,-59,23,23,-24,-65,-51,-52,-53,-74,-75,23,-76,-66,]),'ID':([0,3,5,6,7,8,9,10,11,12,13,16,19,21,23,25,26,27,28,29,30,31,34,35,36,37,38,39,40,41,42,43,44,48,49,51,52,53,54,55,57,59,60,61,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,86,87,88,89,92,96,98,100,101,102,103,104,105,106,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,126,128,130,131,133,134,135,136,137,140,141,142,143,144,145,],[22,22,-6,-7,-8,-9,-10,-11,-12,-13,-14,42,42,58,22,-5,42,42,42,42,42,42,-25,-26,-27,-28,-29,-30,-31,-32,-33,42,42,-54,-55,-63,-64,-67,-68,-69,42,-23,42,22,-71,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,-50,-49,42,42,42,-60,-70,42,-15,-16,-17,-18,-19,-20,22,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-34,-56,-59,22,22,-24,-65,-51,-52,-53,-74,-75,42,22,-76,-66,]),'}':([5,6,7,8,9,10,11,12,13,25,53,54,55,61,68,96,100,101,102,103,104,105,134,140,141,145,],[-6,-7,-8,-9,-10,-11,-12,-13,-14,-5,-67,-68,-69,100,-71,-70,-15,-16,-17,-18,-19,-20,-65,-74,-75,-66,]),'ELSE':([6,7,8,9,10,11,12,13,53,54,55,68,96,100,101,102,103,104,105,134,140,141,145,],[-7,-8,-9,-10,-11,-12,-13,-14,-67,-68,-69,-71,-70,-15,-16,-17,-18,-19,-20,143,-74,-75,-66,]),'=':([14,22,24,58,59,133,],[26,-21,-22,98,-23,-24,]),'MUL_ASSIGN':([14,22,24,59,133,],[27,-21,-22,-23,-24,]),'DIV_ASSIGN':([14,22,24,59,133,],[28,-21,-22,-23,-24,]),'PLUS_ASSIGN':([14,22,24,59,133,],[29,-21,-22,-23,-24,]),'SUB_ASSIGN':([14,22,24,59,133,],[30,-21,-22,-23,-24,]),'(':([15,16,19,20,26,27,28,29,30,31,43,44,45,46,47,57,60,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,87,88,89,98,142,],[31,43,43,57,43,43,43,43,43,43,43,43,87,88,89,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'-':([16,19,26,27,28,29,30,31,33,34,35,36,37,38,39,40,41,42,43,44,48,49,51,52,56,57,59,60,62,63,64,65,66,67,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,92,97,98,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,126,128,132,133,135,136,137,142,144,],[44,44,44,44,44,44,44,44,71,-25,-26,-27,-28,-29,-30,-31,-32,-33,44,44,-54,-55,-63,-64,71,44,-23,44,71,71,71,71,71,71,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-50,71,-49,44,44,44,-60,71,44,71,-35,-36,-37,-38,-39,-40,-41,-42,71,71,71,71,71,71,-34,-56,-59,71,-24,-51,-52,-53,44,71,]),'ZEROS':([16,19,26,27,28,29,30,31,43,44,57,60,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,87,88,89,98,142,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'ONES':([16,19,26,27,28,29,30,31,43,44,57,60,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,87,88,89,98,142,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'EYE':([16,19,26,27,28,29,30,31,43,44,57,60,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,87,88,89,98,142,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'DT_STRING':([16,19,26,27,28,29,30,31,43,44,57,60,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,87,88,89,98,142,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'[':([16,19,22,26,27,28,29,30,31,42,43,44,50,57,60,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,87,88,89,98,127,142,],[50,50,60,50,50,50,50,50,50,60,50,50,90,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,90,50,]),'DT_INTEGER':([16,19,26,27,28,29,30,31,43,44,50,57,60,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,87,88,89,90,98,129,142,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'DT_FLOAT':([16,19,26,27,28,29,30,31,43,44,50,57,60,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,87,88,89,90,98,129,142,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),';':([17,18,19,32,33,34,35,36,37,38,39,40,41,42,48,49,51,52,56,59,62,63,64,65,66,84,86,92,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,126,128,133,135,136,137,],[53,54,55,68,-73,-25,-26,-27,-28,-29,-30,-31,-32,-33,-54,-55,-63,-64,96,-23,101,102,103,104,105,-50,-49,-60,-72,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-34,-56,-59,-24,-51,-52,-53,]),',':([32,33,34,35,36,37,38,39,40,41,42,48,49,51,52,59,84,86,91,92,93,94,95,99,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,128,133,135,136,137,138,139,],[69,-73,-25,-26,-27,-28,-29,-30,-31,-32,-33,-54,-55,-63,-64,-23,-50,-49,127,-60,129,-57,-62,69,-72,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-34,69,69,69,-56,-59,-24,-51,-52,-53,-58,-61,]),']':([33,34,35,36,37,38,39,40,41,42,48,49,50,51,52,59,84,86,90,91,92,93,94,95,99,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,126,128,133,135,136,137,138,139,],[-73,-25,-26,-27,-28,-29,-30,-31,-32,-33,-54,-55,92,-63,-64,-23,-50,-49,92,126,-60,128,-57,-62,133,-72,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-34,-56,-59,-24,-51,-52,-53,-58,-61,]),')':([33,34,35,36,37,38,39,40,41,42,48,49,51,52,59,67,84,85,86,92,97,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,128,133,135,136,137,],[-73,-25,-26,-27,-28,-29,-30,-31,-32,-33,-54,-55,-63,-64,-23,106,-50,122,-49,-60,130,-72,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-34,135,136,137,-56,-59,-24,-51,-52,-53,]),'+':([33,34,35,36,37,38,39,40,41,42,48,49,51,52,56,59,62,63,64,65,66,67,84,85,86,92,97,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,126,128,132,133,135,136,137,144,],[70,-25,-26,-27,-28,-29,-30,-31,-32,-33,-54,-55,-63,-64,70,-23,70,70,70,70,70,70,-50,70,-49,-60,70,70,-35,-36,-37,-38,-39,-40,-41,-42,70,70,70,70,70,70,-34,-56,-59,70,-24,-51,-52,-53,70,]),'*':([33,34,35,36,37,38,39,40,41,42,48,49,51,52,56,59,62,63,64,65,66,67,84,85,86,92,97,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,126,128,132,133,135,136,137,144,],[72,-25,-26,-27,-28,-29,-30,-31,-32,-33,-54,-55,-63,-64,72,-23,72,72,72,72,72,72,-50,72,-49,-60,72,72,72,72,-37,-38,72,72,-41,-42,72,72,72,72,72,72,-34,-56,-59,72,-24,-51,-52,-53,72,]),'/':([33,34,35,36,37,38,39,40,41,42,48,49,51,52,56,59,62,63,64,65,66,67,84,85,86,92,97,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,126,128,132,133,135,136,137,144,],[73,-25,-26,-27,-28,-29,-30,-31,-32,-33,-54,-55,-63,-64,73,-23,73,73,73,73,73,73,-50,73,-49,-60,73,73,73,73,-37,-38,73,73,-41,-42,73,73,73,73,73,73,-34,-56,-59,73,-24,-51,-52,-53,73,]),'MATRIX_PLUS':([33,34,35,36,37,38,39,40,41,42,48,49,51,52,56,59,62,63,64,65,66,67,84,85,86,92,97,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,126,128,132,133,135,136,137,144,],[74,-25,-26,-27,-28,-29,-30,-31,-32,-33,-54,-55,-63,-64,74,-23,74,74,74,74,74,74,-50,74,-49,-60,74,74,74,74,-37,-38,-39,-40,-41,-42,74,74,74,74,74,74,-34,-56,-59,74,-24,-51,-52,-53,74,]),'MATRIX_SUB':([33,34,35,36,37,38,39,40,41,42,48,49,51,52,56,59,62,63,64,65,66,67,84,85,86,92,97,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,126,128,132,133,135,136,137,144,],[75,-25,-26,-27,-28,-29,-30,-31,-32,-33,-54,-55,-63,-64,75,-23,75,75,75,75,75,75,-50,75,-49,-60,75,75,75,75,-37,-38,-39,-40,-41,-42,75,75,75,75,75,75,-34,-56,-59,75,-24,-51,-52,-53,75,]),'MATRIX_MUL':([33,34,35,36,37,38,39,40,41,42,48,49,51,52,56,59,62,63,64,65,66,67,84,85,86,92,97,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,126,128,132,133,135,136,137,144,],[76,-25,-26,-27,-28,-29,-30,-31,-32,-33,-54,-55,-63,-64,76,-23,76,76,76,76,76,76,-50,76,-49,-60,76,76,76,76,76,76,76,76,-41,-42,76,76,76,76,76,76,-34,-56,-59,76,-24,-51,-52,-53,76,]),'MATRIX_DIV':([33,34,35,36,37,38,39,40,41,42,48,49,51,52,56,59,62,63,64,65,66,67,84,85,86,92,97,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,126,128,132,133,135,136,137,144,],[77,-25,-26,-27,-28,-29,-30,-31,-32,-33,-54,-55,-63,-64,77,-23,77,77,77,77,77,77,-50,77,-49,-60,77,77,77,77,77,77,77,77,-41,-42,77,77,77,77,77,77,-34,-56,-59,77,-24,-51,-52,-53,77,]),'RELOP_EQ':([33,34,35,36,37,38,39,40,41,42,48,49,51,52,56,59,62,63,64,65,66,67,84,85,86,92,97,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,126,128,132,133,135,136,137,144,],[78,-25,-26,-27,-28,-29,-30,-31,-32,-33,-54,-55,-63,-64,78,-23,78,78,78,78,78,78,-50,78,-49,-60,78,78,-35,-36,-37,-38,-39,-40,-41,-42,None,None,None,None,None,None,-34,-56,-59,78,-24,-51,-52,-53,78,]),'RELOP_GT':([33,34,35,36,37,38,39,40,41,42,48,49,51,52,56,59,62,63,64,65,66,67,84,85,86,92,97,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,126,128,132,133,135,136,137,144,],[79,-25,-26,-27,-28,-29,-30,-31,-32,-33,-54,-55,-63,-64,79,-23,79,79,79,79,79,79,-50,79,-49,-60,79,79,-35,-36,-37,-38,-39,-40,-41,-42,None,None,None,None,None,None,-34,-56,-59,79,-24,-51,-52,-53,79,]),'RELOP_LT':([33,34,35,36,37,38,39,40,41,42,48,49,51,52,56,59,62,63,64,65,66,67,84,85,86,92,97,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,126,128,132,133,135,136,137,144,],[80,-25,-26,-27,-28,-29,-30,-31,-32,-33,-54,-55,-63,-64,80,-23,80,80,80,80,80,80,-50,80,-49,-60,80,80,-35,-36,-37,-38,-39,-40,-41,-42,None,None,None,None,None,None,-34,-56,-59,80,-24,-51,-52,-53,80,]),'RELOP_GE':([33,34,35,36,37,38,39,40,41,42,48,49,51,52,56,59,62,63,64,65,66,67,84,85,86,92,97,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,126,128,132,133,135,136,137,144,],[81,-25,-26,-27,-28,-29,-30,-31,-32,-33,-54,-55,-63,-64,81,-23,81,81,81,81,81,81,-50,81,-49,-60,81,81,-35,-36,-37,-38,-39,-40,-41,-42,None,None,None,None,None,None,-34,-56,-59,81,-24,-51,-52,-53,81,]),'RELOP_LE':([33,34,35,36,37,38,39,40,41,42,48,49,51,52,56,59,62,63,64,65,66,67,84,85,86,92,97,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,126,128,132,133,135,136,137,144,],[82,-25,-26,-27,-28,-29,-30,-31,-32,-33,-54,-55,-63,-64,82,-23,82,82,82,82,82,82,-50,82,-49,-60,82,82,-35,-36,-37,-38,-39,-40,-41,-42,None,None,None,None,None,None,-34,-56,-59,82,-24,-51,-52,-53,82,]),'RELOP_NE':([33,34,35,36,37,38,39,40,41,42,48,49,51,52,56,59,62,63,64,65,66,67,84,85,86,92,97,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,126,128,132,133,135,136,137,144,],[83,-25,-26,-27,-28,-29,-30,-31,-32,-33,-54,-55,-63,-64,83,-23,83,83,83,83,83,83,-50,83,-49,-60,83,83,-35,-36,-37,-38,-39,-40,-41,-42,None,None,None,None,None,None,-34,-56,-59,83,-24,-51,-52,-53,83,]),"'":([33,34,35,36,37,38,39,40,41,42,48,49,51,52,56,59,62,63,64,65,66,67,84,85,86,92,97,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,126,128,132,133,135,136,137,144,],[84,-25,-26,-27,-28,-29,-30,-31,-32,-33,-54,-55,-63,-64,84,-23,84,84,84,84,84,84,-50,84,84,-60,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,-34,-56,-59,84,-24,-51,-52,-53,84,]),':':([34,35,36,37,38,39,40,41,42,48,49,51,52,59,84,86,92,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,126,128,132,133,135,136,137,],[-25,-26,-27,-28,-29,-30,-31,-32,-33,-54,-55,-63,-64,-23,-50,-49,-60,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-34,-56,-59,142,-24,-51,-52,-53,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'instructions_opt':([0,],[2,]),'instructions':([0,23,],[3,61,]),'empty':([0,],[4,]),'instruction':([0,3,23,61,106,130,131,143,],[5,25,5,25,134,140,141,145,]),'assignment':([0,3,23,61,106,130,131,143,],[6,6,6,6,6,6,6,6,]),'conditional_statement':([0,3,23,61,106,130,131,143,],[7,7,7,7,7,7,7,7,]),'print_statement':([0,3,23,61,106,130,131,143,],[8,8,8,8,8,8,8,8,]),'jump_statement':([0,3,23,61,106,130,131,143,],[9,9,9,9,9,9,9,9,]),'return_statement':([0,3,23,61,106,130,131,143,],[10,10,10,10,10,10,10,10,]),'while_loop':([0,3,23,61,106,130,131,143,],[11,11,11,11,11,11,11,11,]),'for_loop':([0,3,23,61,106,130,131,143,],[12,12,12,12,12,12,12,12,]),'instruction_block':([0,3,23,61,106,130,131,143,],[13,13,13,13,13,13,13,13,]),'assign_id':([0,3,23,61,106,130,131,143,],[14,14,14,14,14,14,14,14,]),'slice':([0,3,16,19,23,26,27,28,29,30,31,43,44,57,60,61,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,87,88,89,98,106,130,131,142,143,],[24,24,41,41,24,41,41,41,41,41,41,41,41,41,41,24,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,24,24,24,41,24,]),'expression_list':([16,60,87,88,89,],[32,99,123,124,125,]),'expression':([16,19,26,27,28,29,30,31,43,44,57,60,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,87,88,89,98,142,],[33,56,62,63,64,65,66,67,85,86,97,33,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,33,33,33,132,144,]),'expression_binop':([16,19,26,27,28,29,30,31,43,44,57,60,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,87,88,89,98,142,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'expression_relop':([16,19,26,27,28,29,30,31,43,44,57,60,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,87,88,89,98,142,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'expression_unary':([16,19,26,27,28,29,30,31,43,44,57,60,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,87,88,89,98,142,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'matrix_funcs':([16,19,26,27,28,29,30,31,43,44,57,60,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,87,88,89,98,142,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'constant':([16,19,26,27,28,29,30,31,43,44,57,60,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,87,88,89,98,142,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'matrix':([16,19,26,27,28,29,30,31,43,44,57,60,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,87,88,89,98,142,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'vector':([16,19,26,27,28,29,30,31,43,44,50,57,60,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,87,88,89,98,127,142,],[40,40,40,40,40,40,40,40,40,40,94,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,138,40,]),'number':([16,19,26,27,28,29,30,31,43,44,50,57,60,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,87,88,89,90,98,129,142,],[48,48,48,48,48,48,48,48,48,48,95,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,95,48,139,48,]),'slice_vector':([22,42,],[59,59,]),'vectors':([50,],[91,]),'numbers':([50,90,],[93,93,]),'range':([98,],[131,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> instructions_opt','program',1,'p_program','Mparser.py',38),
  ('empty -> <empty>','empty',0,'p_empty','Mparser.py',44),
  ('instructions_opt -> instructions','instructions_opt',1,'p_instruction_opt_1','Mparser.py',50),
  ('instructions_opt -> empty','instructions_opt',1,'p_instruction_opt_2','Mparser.py',55),
  ('instructions -> instructions instruction','instructions',2,'p_instructions','Mparser.py',61),
  ('instructions -> instruction','instructions',1,'p_instructions_2','Mparser.py',70),
  ('instruction -> assignment','instruction',1,'p_instruction','Mparser.py',81),
  ('instruction -> conditional_statement','instruction',1,'p_instruction','Mparser.py',82),
  ('instruction -> print_statement','instruction',1,'p_instruction','Mparser.py',83),
  ('instruction -> jump_statement','instruction',1,'p_instruction','Mparser.py',84),
  ('instruction -> return_statement','instruction',1,'p_instruction','Mparser.py',85),
  ('instruction -> while_loop','instruction',1,'p_instruction','Mparser.py',86),
  ('instruction -> for_loop','instruction',1,'p_instruction','Mparser.py',87),
  ('instruction -> instruction_block','instruction',1,'p_instruction','Mparser.py',88),
  ('instruction_block -> { instructions }','instruction_block',3,'p_instruction_block','Mparser.py',96),
  ('assignment -> assign_id = expression ;','assignment',4,'p_assignment','Mparser.py',103),
  ('assignment -> assign_id MUL_ASSIGN expression ;','assignment',4,'p_assignment','Mparser.py',104),
  ('assignment -> assign_id DIV_ASSIGN expression ;','assignment',4,'p_assignment','Mparser.py',105),
  ('assignment -> assign_id PLUS_ASSIGN expression ;','assignment',4,'p_assignment','Mparser.py',106),
  ('assignment -> assign_id SUB_ASSIGN expression ;','assignment',4,'p_assignment','Mparser.py',107),
  ('assign_id -> ID','assign_id',1,'p_assign_id','Mparser.py',116),
  ('assign_id -> slice','assign_id',1,'p_assign_slice','Mparser.py',124),
  ('slice -> ID slice_vector','slice',2,'p_slice','Mparser.py',132),
  ('slice_vector -> [ expression_list ]','slice_vector',3,'p_slice_vector','Mparser.py',141),
  ('expression -> expression_binop','expression',1,'p_expression','Mparser.py',148),
  ('expression -> expression_relop','expression',1,'p_expression','Mparser.py',149),
  ('expression -> expression_unary','expression',1,'p_expression','Mparser.py',150),
  ('expression -> matrix_funcs','expression',1,'p_expression','Mparser.py',151),
  ('expression -> constant','expression',1,'p_expression','Mparser.py',152),
  ('expression -> matrix','expression',1,'p_expression','Mparser.py',153),
  ('expression -> vector','expression',1,'p_expression','Mparser.py',154),
  ('expression -> slice','expression',1,'p_expression','Mparser.py',155),
  ('expression -> ID','expression',1,'p_expression_2','Mparser.py',161),
  ('expression -> ( expression )','expression',3,'p_expression_3','Mparser.py',168),
  ('expression_binop -> expression + expression','expression_binop',3,'p_expression_binop','Mparser.py',174),
  ('expression_binop -> expression - expression','expression_binop',3,'p_expression_binop','Mparser.py',175),
  ('expression_binop -> expression * expression','expression_binop',3,'p_expression_binop','Mparser.py',176),
  ('expression_binop -> expression / expression','expression_binop',3,'p_expression_binop','Mparser.py',177),
  ('expression_binop -> expression MATRIX_PLUS expression','expression_binop',3,'p_expression_binop','Mparser.py',178),
  ('expression_binop -> expression MATRIX_SUB expression','expression_binop',3,'p_expression_binop','Mparser.py',179),
  ('expression_binop -> expression MATRIX_MUL expression','expression_binop',3,'p_expression_binop','Mparser.py',180),
  ('expression_binop -> expression MATRIX_DIV expression','expression_binop',3,'p_expression_binop','Mparser.py',181),
  ('expression_relop -> expression RELOP_EQ expression','expression_relop',3,'p_expression_relop','Mparser.py',189),
  ('expression_relop -> expression RELOP_GT expression','expression_relop',3,'p_expression_relop','Mparser.py',190),
  ('expression_relop -> expression RELOP_LT expression','expression_relop',3,'p_expression_relop','Mparser.py',191),
  ('expression_relop -> expression RELOP_GE expression','expression_relop',3,'p_expression_relop','Mparser.py',192),
  ('expression_relop -> expression RELOP_LE expression','expression_relop',3,'p_expression_relop','Mparser.py',193),
  ('expression_relop -> expression RELOP_NE expression','expression_relop',3,'p_expression_relop','Mparser.py',194),
  ('expression_unary -> - expression','expression_unary',2,'p_expression_unary','Mparser.py',201),
  ("expression_unary -> expression '",'expression_unary',2,'p_expression_unary','Mparser.py',202),
  ('matrix_funcs -> ZEROS ( expression_list )','matrix_funcs',4,'p_matrix_funcs','Mparser.py',215),
  ('matrix_funcs -> ONES ( expression_list )','matrix_funcs',4,'p_matrix_funcs','Mparser.py',216),
  ('matrix_funcs -> EYE ( expression_list )','matrix_funcs',4,'p_matrix_funcs','Mparser.py',217),
  ('constant -> number','constant',1,'p_constant','Mparser.py',227),
  ('constant -> DT_STRING','constant',1,'p_constant_str','Mparser.py',234),
  ('matrix -> [ vectors ]','matrix',3,'p_matrix','Mparser.py',242),
  ('vectors -> vector','vectors',1,'p_vectors','Mparser.py',250),
  ('vectors -> vectors , vector','vectors',3,'p_vectors_2','Mparser.py',257),
  ('vector -> [ numbers ]','vector',3,'p_vector','Mparser.py',266),
  ('vector -> [ ]','vector',2,'p_vector','Mparser.py',267),
  ('numbers -> numbers , number','numbers',3,'p_numbers','Mparser.py',280),
  ('numbers -> number','numbers',1,'p_numbers','Mparser.py',281),
  ('number -> DT_INTEGER','number',1,'p_number_int','Mparser.py',295),
  ('number -> DT_FLOAT','number',1,'p_number_float','Mparser.py',304),
  ('conditional_statement -> IF ( expression ) instruction','conditional_statement',5,'p_conditional_statement','Mparser.py',313),
  ('conditional_statement -> IF ( expression ) instruction ELSE instruction','conditional_statement',7,'p_conditional_statement','Mparser.py',314),
  ('jump_statement -> BREAK ;','jump_statement',2,'p_jump_statement','Mparser.py',327),
  ('jump_statement -> CONTINUE ;','jump_statement',2,'p_jump_statement','Mparser.py',328),
  ('return_statement -> RETURN ;','return_statement',2,'p_return_statement','Mparser.py',336),
  ('return_statement -> RETURN expression ;','return_statement',3,'p_return_statement','Mparser.py',337),
  ('print_statement -> PRINT expression_list ;','print_statement',3,'p_print_statement','Mparser.py',350),
  ('expression_list -> expression_list , expression','expression_list',3,'p_expression_list','Mparser.py',358),
  ('expression_list -> expression','expression_list',1,'p_expression_list_2','Mparser.py',366),
  ('while_loop -> WHILE ( expression ) instruction','while_loop',5,'p_while_loop','Mparser.py',373),
  ('for_loop -> FOR ID = range instruction','for_loop',5,'p_for_loop','Mparser.py',380),
  ('range -> expression : expression','range',3,'p_range','Mparser.py',387),
]
